/*! For license information please see main.js.LICENSE.txt */
(()=>{"use strict";var e,t,n,r,o,a,i={444:(e,t,n)=>{n.d(t,{BH:()=>c,L:()=>i,LL:()=>m,P0:()=>s,Sg:()=>d,ZR:()=>h,aH:()=>u,eu:()=>p,hl:()=>f,m9:()=>b,vZ:()=>v});const r=function(e){const t=[];let n=0;for(let r=0;r<e.length;r++){let o=e.charCodeAt(r);o<128?t[n++]=o:o<2048?(t[n++]=o>>6|192,t[n++]=63&o|128):55296==(64512&o)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(o=65536+((1023&o)<<10)+(1023&e.charCodeAt(++r)),t[n++]=o>>18|240,t[n++]=o>>12&63|128,t[n++]=o>>6&63|128,t[n++]=63&o|128):(t[n++]=o>>12|224,t[n++]=o>>6&63|128,t[n++]=63&o|128)}return t},o={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();const n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[];for(let t=0;t<e.length;t+=3){const o=e[t],a=t+1<e.length,i=a?e[t+1]:0,l=t+2<e.length,s=l?e[t+2]:0,u=o>>2,c=(3&o)<<4|i>>4;let d=(15&i)<<2|s>>6,f=63&s;l||(f=64,a||(d=64)),r.push(n[u],n[c],n[d],n[f])}return r.join("")},encodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(r(e),t)},decodeString(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){const t=[];let n=0,r=0;for(;n<e.length;){const o=e[n++];if(o<128)t[r++]=String.fromCharCode(o);else if(o>191&&o<224){const a=e[n++];t[r++]=String.fromCharCode((31&o)<<6|63&a)}else if(o>239&&o<365){const a=((7&o)<<18|(63&e[n++])<<12|(63&e[n++])<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(a>>10)),t[r++]=String.fromCharCode(56320+(1023&a))}else{const a=e[n++],i=e[n++];t[r++]=String.fromCharCode((15&o)<<12|(63&a)<<6|63&i)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray(e,t){this.init_();const n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[];for(let t=0;t<e.length;){const o=n[e.charAt(t++)],i=t<e.length?n[e.charAt(t)]:0;++t;const l=t<e.length?n[e.charAt(t)]:64;++t;const s=t<e.length?n[e.charAt(t)]:64;if(++t,null==o||null==i||null==l||null==s)throw new a;const u=o<<2|i>>4;if(r.push(u),64!==l){const e=i<<4&240|l>>2;if(r.push(e),64!==s){const e=l<<6&192|s;r.push(e)}}}return r},init_(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(let e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}};class a extends Error{constructor(){super(...arguments),this.name="DecodeBase64StringError"}}const i=function(e){return function(e){const t=r(e);return o.encodeByteArray(t,!0)}(e).replace(/\./g,"")},l=()=>{try{return function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if(void 0!==n.g)return n.g;throw new Error("Unable to locate global object.")}().__FIREBASE_DEFAULTS__||(()=>{if("undefined"==typeof process||void 0===process.env)return;const e=process.env.__FIREBASE_DEFAULTS__;return e?JSON.parse(e):void 0})()||(()=>{if("undefined"==typeof document)return;let e;try{e=document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/)}catch(e){return}const t=e&&function(e){try{return o.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null}(e[1]);return t&&JSON.parse(t)})()}catch(e){return void console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`)}},s=e=>{const t=(e=>{var t,n;return null===(n=null===(t=l())||void 0===t?void 0:t.emulatorHosts)||void 0===n?void 0:n[e]})(e);if(!t)return;const n=t.lastIndexOf(":");if(n<=0||n+1===t.length)throw new Error(`Invalid host ${t} with no separate hostname and port!`);const r=parseInt(t.substring(n+1),10);return"["===t[0]?[t.substring(1,n-1),r]:[t.substring(0,n),r]},u=()=>{var e;return null===(e=l())||void 0===e?void 0:e.config};class c{constructor(){this.reject=()=>{},this.resolve=()=>{},this.promise=new Promise(((e,t)=>{this.resolve=e,this.reject=t}))}wrapCallback(e){return(t,n)=>{t?this.reject(t):this.resolve(n),"function"==typeof e&&(this.promise.catch((()=>{})),1===e.length?e(t):e(t,n))}}}function d(e,t){if(e.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');const n=t||"demo-project",r=e.iat||0,o=e.sub||e.user_id;if(!o)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");const a=Object.assign({iss:`https://securetoken.google.com/${n}`,aud:n,iat:r,exp:r+3600,auth_time:r,sub:o,user_id:o,firebase:{sign_in_provider:"custom",identities:{}}},e);return[i(JSON.stringify({alg:"none",type:"JWT"})),i(JSON.stringify(a)),""].join(".")}function f(){try{return"object"==typeof indexedDB}catch(e){return!1}}function p(){return new Promise(((e,t)=>{try{let n=!0;const r="validate-browser-context-for-indexeddb-analytics-module",o=self.indexedDB.open(r);o.onsuccess=()=>{o.result.close(),n||self.indexedDB.deleteDatabase(r),e(!0)},o.onupgradeneeded=()=>{n=!1},o.onerror=()=>{var e;t((null===(e=o.error)||void 0===e?void 0:e.message)||"")}}catch(e){t(e)}}))}class h extends Error{constructor(e,t,n){super(t),this.code=e,this.customData=n,this.name="FirebaseError",Object.setPrototypeOf(this,h.prototype),Error.captureStackTrace&&Error.captureStackTrace(this,m.prototype.create)}}class m{constructor(e,t,n){this.service=e,this.serviceName=t,this.errors=n}create(e,...t){const n=t[0]||{},r=`${this.service}/${e}`,o=this.errors[e],a=o?function(e,t){return e.replace(g,((e,n)=>{const r=t[n];return null!=r?String(r):`<${n}?>`}))}(o,n):"Error",i=`${this.serviceName}: ${a} (${r}).`;return new h(r,i,n)}}const g=/\{\$([^}]+)}/g;function v(e,t){if(e===t)return!0;const n=Object.keys(e),r=Object.keys(t);for(const o of n){if(!r.includes(o))return!1;const n=e[o],a=t[o];if(y(n)&&y(a)){if(!v(n,a))return!1}else if(n!==a)return!1}for(const e of r)if(!n.includes(e))return!1;return!0}function y(e){return null!==e&&"object"==typeof e}function b(e){return e&&e._delegate?e._delegate:e}},96:(e,t,n)=>{n.a(e,(async(e,r)=>{try{n.d(t,{Z:()=>C});var o=n(294),a=n(541),i=n(698),l=n(9),s=n(628),u=n(894),c=e([l]);function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function h(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){m(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t,n){return(t=g(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function g(e){var t=v(e,"string");return"symbol"===f(t)?t:String(t)}function v(e,t){if("object"!==f(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!==f(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}function y(e,t){return k(e)||x(e,t)||w(e,t)||b()}function b(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function w(e,t){if(e){if("string"==typeof e)return S(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?S(e,t):void 0}}function S(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function x(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}function k(e){if(Array.isArray(e))return e}l=(c.then?(await c)():c)[0];var d=await(0,l.Y)("characters");const C=function(){var e=y((0,o.useState)(d.map((function(e){return h(h({},e),{},{found:!1})}))),2),t=e[0],n=e[1],r=y((0,o.useState)(!1),2),l=r[0],c=r[1],f=y((0,o.useState)(!1),2),p=f[0],m=f[1];return o.createElement(s.w.Provider,{value:{characters:t,setCharacters:n,gameInit:l,gameEnd:p,setGameEnd:m}},o.createElement("div",null,o.createElement(a.Z,{start:l,end:p}),!l&&o.createElement(u.Z,{handleClick:function(){c(!0)}}),l&&o.createElement(i.Z,{endGame:function(){m(!0)}})))};r()}catch(E){r(E)}}),1)},628:(e,t,n)=>{n.d(t,{w:()=>r});var r=(0,n(294).createContext)()},894:(e,t,n)=>{n.d(t,{Z:()=>a});var r=n(294),o=n(305);const a=function(e){return r.createElement("div",{className:"w-full"},r.createElement("img",{src:o,id:"image",className:"relative ",style:{width:"100vw",height:"auto"}}),r.createElement("div",{className:"w-[30%] fixed top-2/4 left-2/4 -translate-y-2/4 -translate-x-2/4 bg-slate-300"},r.createElement("p",null,"Initialize game"),r.createElement("button",{onClick:e.handleClick},"Start")))}},541:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(294),o=n(628);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return i(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var l=function(e){var t="0".concat(e%60).slice(-2),n="".concat(Math.floor(e/60)),r="0".concat(n%60).slice(-2),o="0".concat(Math.floor(e/3600)).slice(-2);return"".concat(o," : ").concat(r," : ").concat(t)};function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const u=function(){var e,t,n=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=a((0,r.useState)(e),2),n=t[0],o=t[1],i=a((0,r.useState)(!1),2),l=i[0],s=i[1],u=a((0,r.useState)(!1),2),c=u[0],d=u[1],f=(0,r.useRef)(null);return{timer:n,isActive:l,isPaused:c,handleStart:function(){s(!0),d(!0),f.current=setInterval((function(){o((function(e){return e+1}))}),1e3)},handlePause:function(){clearInterval(f.current),d(!1)},handleResume:function(){d(!0),f.current=setInterval((function(){o((function(e){return e+1}))}),1e3)},handleReset:function(){clearInterval(f.current),s(!1),d(!1),o(0)}}}(0),i=n.timer,u=(n.isActive,n.isPaused,n.handleStart),c=(n.handlePause,n.handleResume,n.handleReset,e=(0,r.useState)(0),t=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return s(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?s(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=c[0],f=c[1],p=(0,r.useContext)(o.w),h=p.gameInit,m=p.gameEnd;return(0,r.useEffect)((function(){h&&u(),m&&f(i)}),[h,m]),r.createElement("div",null,r.createElement("div",null,!m&&r.createElement("p",null,l(i)),m&&r.createElement("p",null,l(d))))};n(326);const c=function(){var e=(0,r.useContext)(o.w),t=e.characters,n=(e.setCharacters,t.map((function(e){return r.createElement("div",{className:"flex flex-row items-center flex-grow"},r.createElement("img",{src:e.img,className:"w-7 ".concat(e.found?"grayscale":"grayscale-0"," ")}),r.createElement("p",{className:"ml-3"},e.name))})));return r.createElement("div",{className:"w-full h-[7dvh] bg-slate-700 text-white flex flex-row items-center justify-around"},r.createElement("p",null,"Header"),r.createElement("div",{className:"w-[60%] flex flex-row items-center justify-between"},n),r.createElement(u,null))}},698:(e,t,n)=>{n.d(t,{Z:()=>Ki});var r=n(294),o=n.t(r,2),a=n(628);function i(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}function l(){return l=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},l.apply(this,arguments)}function s(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=s(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}const u=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=s(e))&&(r&&(r+=" "),r+=t);return r};function c(e,t,n=void 0){const r={};return Object.keys(e).forEach((o=>{r[o]=e[o].reduce(((e,r)=>{if(r){const o=t(r);""!==o&&e.push(o),n&&n[r]&&e.push(n[r])}return e}),[]).join(" ")})),r}function d(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}function f(e){if("string"!=typeof e)throw new Error(d(7));return e.charAt(0).toUpperCase()+e.slice(1)}function p(e,t){return r.isValidElement(e)&&-1!==t.indexOf(e.type.muiName)}function h(e,t){const n=l({},t);return Object.keys(e).forEach((r=>{if(r.toString().match(/^(components|slots)$/))n[r]=l({},e[r],n[r]);else if(r.toString().match(/^(componentsProps|slotProps)$/)){const o=e[r]||{},a=t[r];n[r]={},a&&Object.keys(a)?o&&Object.keys(o)?(n[r]=l({},a),Object.keys(o).forEach((e=>{n[r][e]=h(o[e],a[e])}))):n[r]=a:n[r]=o}else void 0===n[r]&&(n[r]=e[r])})),n}function m(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?h(t.components[n].defaultProps,r):r}function g(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function v(e){if(!g(e))return e;const t={};return Object.keys(e).forEach((n=>{t[n]=v(e[n])})),t}function y(e,t,n={clone:!0}){const r=n.clone?l({},e):e;return g(e)&&g(t)&&Object.keys(t).forEach((o=>{"__proto__"!==o&&(g(t[o])&&o in e&&g(e[o])?r[o]=y(e[o],t[o],n):n.clone?r[o]=g(t[o])?v(t[o]):t[o]:r[o]=t[o])})),r}const b=["values","unit","step"];function w(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:r=5}=e,o=i(e,b),a=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>l({},e,{[t.key]:t.val})),{})})(t),s=Object.keys(a);function u(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function c(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-r/100}${n})`}function d(e,o){const a=s.indexOf(o);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==a&&"number"==typeof t[s[a]]?t[s[a]]:o)-r/100}${n})`}return l({keys:s,values:a,up:u,down:c,between:d,only:function(e){return s.indexOf(e)+1<s.length?d(e,s[s.indexOf(e)+1]):u(e)},not:function(e){const t=s.indexOf(e);return 0===t?u(s[1]):t===s.length-1?c(s[t]):d(e,s[s.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},o)}const S={borderRadius:4},x={xs:0,sm:600,md:900,lg:1200,xl:1536},k={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${x[e]}px)`};function C(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||k;return t.reduce(((r,o,a)=>(r[e.up(e.keys[a])]=n(t[a]),r)),{})}if("object"==typeof t){const e=r.breakpoints||k;return Object.keys(t).reduce(((r,o)=>{if(-1!==Object.keys(e.values||x).indexOf(o))r[e.up(o)]=n(t[o],o);else{const e=o;r[e]=t[e]}return r}),{})}return n(t)}function E(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function _(e,t,n,r=n){let o;return o="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:E(e,n)||r,t&&(o=t(o,r,e)),o}const $=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:o}=e,a=e=>{if(null==e[t])return null;const a=e[t],i=E(e.theme,r)||{};return C(e,a,(e=>{let r=_(i,o,e);return e===r&&"string"==typeof e&&(r=_(i,o,`${t}${"default"===e?"":f(e)}`,e)),!1===n?r:{[n]:r}}))};return a.propTypes={},a.filterProps=[t],a},P=function(e,t){return t?y(e,t,{clone:!1}):e},T={m:"margin",p:"padding"},O={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},R={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},A=function(e){const t={};return e=>(void 0===t[e]&&(t[e]=(e=>{if(e.length>2){if(!R[e])return[e];e=R[e]}const[t,n]=e.split(""),r=T[t],o=O[n]||"";return Array.isArray(o)?o.map((e=>r+e)):[r+o]})(e)),t[e])}(),D=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],I=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],N=[...D,...I];function F(e,t,n,r){var o;const a=null!=(o=E(e,t,!1))?o:n;return"number"==typeof a?e=>"string"==typeof e?e:a*e:Array.isArray(a)?e=>"string"==typeof e?e:a[e]:"function"==typeof a?a:()=>{}}function L(e){return F(e,"spacing",8)}function B(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function M(e,t){const n=L(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(-1===t.indexOf(n))return null;const o=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=B(t,n),e)),{})}(A(n),r);return C(e,e[n],o)}(e,t,r,n))).reduce(P,{})}function z(e){return M(e,D)}function j(e){return M(e,I)}function V(e){return M(e,N)}function H(e=8){if(e.mui)return e;const t=L({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}z.propTypes={},z.filterProps=D,j.propTypes={},j.filterProps=I,V.propTypes={},V.filterProps=N;const U=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?P(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function W(e){return"number"!=typeof e?e:`${e}px solid`}const K=$({prop:"border",themeKey:"borders",transform:W}),q=$({prop:"borderTop",themeKey:"borders",transform:W}),G=$({prop:"borderRight",themeKey:"borders",transform:W}),Q=$({prop:"borderBottom",themeKey:"borders",transform:W}),Y=$({prop:"borderLeft",themeKey:"borders",transform:W}),X=$({prop:"borderColor",themeKey:"palette"}),J=$({prop:"borderTopColor",themeKey:"palette"}),Z=$({prop:"borderRightColor",themeKey:"palette"}),ee=$({prop:"borderBottomColor",themeKey:"palette"}),te=$({prop:"borderLeftColor",themeKey:"palette"}),ne=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=F(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:B(t,e)});return C(e,e.borderRadius,n)}return null};ne.propTypes={},ne.filterProps=["borderRadius"],U(K,q,G,Q,Y,X,J,Z,ee,te,ne);const re=e=>{if(void 0!==e.gap&&null!==e.gap){const t=F(e.theme,"spacing",8),n=e=>({gap:B(t,e)});return C(e,e.gap,n)}return null};re.propTypes={},re.filterProps=["gap"];const oe=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=F(e.theme,"spacing",8),n=e=>({columnGap:B(t,e)});return C(e,e.columnGap,n)}return null};oe.propTypes={},oe.filterProps=["columnGap"];const ae=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=F(e.theme,"spacing",8),n=e=>({rowGap:B(t,e)});return C(e,e.rowGap,n)}return null};function ie(e,t){return"grey"===t?t:e}function le(e){return e<=1&&0!==e?100*e+"%":e}ae.propTypes={},ae.filterProps=["rowGap"],U(re,oe,ae,$({prop:"gridColumn"}),$({prop:"gridRow"}),$({prop:"gridAutoFlow"}),$({prop:"gridAutoColumns"}),$({prop:"gridAutoRows"}),$({prop:"gridTemplateColumns"}),$({prop:"gridTemplateRows"}),$({prop:"gridTemplateAreas"}),$({prop:"gridArea"})),U($({prop:"color",themeKey:"palette",transform:ie}),$({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:ie}),$({prop:"backgroundColor",themeKey:"palette",transform:ie}));const se=$({prop:"width",transform:le}),ue=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r,o;return{maxWidth:(null==(n=e.theme)||null==(r=n.breakpoints)||null==(o=r.values)?void 0:o[t])||x[t]||le(t)}};return C(e,e.maxWidth,t)}return null};ue.filterProps=["maxWidth"];const ce=$({prop:"minWidth",transform:le}),de=$({prop:"height",transform:le}),fe=$({prop:"maxHeight",transform:le}),pe=$({prop:"minHeight",transform:le}),he=($({prop:"size",cssProperty:"width",transform:le}),$({prop:"size",cssProperty:"height",transform:le}),U(se,ue,ce,de,fe,pe,$({prop:"boxSizing"})),{border:{themeKey:"borders",transform:W},borderTop:{themeKey:"borders",transform:W},borderRight:{themeKey:"borders",transform:W},borderBottom:{themeKey:"borders",transform:W},borderLeft:{themeKey:"borders",transform:W},borderColor:{themeKey:"palette"},borderTopColor:{themeKey:"palette"},borderRightColor:{themeKey:"palette"},borderBottomColor:{themeKey:"palette"},borderLeftColor:{themeKey:"palette"},borderRadius:{themeKey:"shape.borderRadius",style:ne},color:{themeKey:"palette",transform:ie},bgcolor:{themeKey:"palette",cssProperty:"backgroundColor",transform:ie},backgroundColor:{themeKey:"palette",transform:ie},p:{style:j},pt:{style:j},pr:{style:j},pb:{style:j},pl:{style:j},px:{style:j},py:{style:j},padding:{style:j},paddingTop:{style:j},paddingRight:{style:j},paddingBottom:{style:j},paddingLeft:{style:j},paddingX:{style:j},paddingY:{style:j},paddingInline:{style:j},paddingInlineStart:{style:j},paddingInlineEnd:{style:j},paddingBlock:{style:j},paddingBlockStart:{style:j},paddingBlockEnd:{style:j},m:{style:z},mt:{style:z},mr:{style:z},mb:{style:z},ml:{style:z},mx:{style:z},my:{style:z},margin:{style:z},marginTop:{style:z},marginRight:{style:z},marginBottom:{style:z},marginLeft:{style:z},marginX:{style:z},marginY:{style:z},marginInline:{style:z},marginInlineStart:{style:z},marginInlineEnd:{style:z},marginBlock:{style:z},marginBlockStart:{style:z},marginBlockEnd:{style:z},displayPrint:{cssProperty:!1,transform:e=>({"@media print":{display:e}})},display:{},overflow:{},textOverflow:{},visibility:{},whiteSpace:{},flexBasis:{},flexDirection:{},flexWrap:{},justifyContent:{},alignItems:{},alignContent:{},order:{},flex:{},flexGrow:{},flexShrink:{},alignSelf:{},justifyItems:{},justifySelf:{},gap:{style:re},rowGap:{style:ae},columnGap:{style:oe},gridColumn:{},gridRow:{},gridAutoFlow:{},gridAutoColumns:{},gridAutoRows:{},gridTemplateColumns:{},gridTemplateRows:{},gridTemplateAreas:{},gridArea:{},position:{},zIndex:{themeKey:"zIndex"},top:{},right:{},bottom:{},left:{},boxShadow:{themeKey:"shadows"},width:{transform:le},maxWidth:{style:ue},minWidth:{transform:le},height:{transform:le},maxHeight:{transform:le},minHeight:{transform:le},boxSizing:{},fontFamily:{themeKey:"typography"},fontSize:{themeKey:"typography"},fontStyle:{themeKey:"typography"},fontWeight:{themeKey:"typography"},letterSpacing:{},textTransform:{},lineHeight:{},textAlign:{},typography:{cssProperty:!1,themeKey:"typography"}}),me=function(){function e(e,t,n,r){const o={[e]:t,theme:n},a=r[e];if(!a)return{[e]:t};const{cssProperty:i=e,themeKey:l,transform:s,style:u}=a;if(null==t)return null;if("typography"===l&&"inherit"===t)return{[e]:t};const c=E(n,l)||{};return u?u(o):C(o,t,(t=>{let n=_(c,s,t);return t===n&&"string"==typeof t&&(n=_(c,s,`${e}${"default"===t?"":f(t)}`,t)),!1===i?n:{[i]:n}}))}return function t(n){var r;const{sx:o,theme:a={}}=n||{};if(!o)return null;const i=null!=(r=a.unstable_sxConfig)?r:he;function l(n){let r=n;if("function"==typeof n)r=n(a);else if("object"!=typeof n)return n;if(!r)return null;const o=function(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}(a.breakpoints),l=Object.keys(o);let s=o;return Object.keys(r).forEach((n=>{const o="function"==typeof(l=r[n])?l(a):l;var l;if(null!=o)if("object"==typeof o)if(i[n])s=P(s,e(n,o,a,i));else{const e=C({theme:a},o,(e=>({[n]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(e,o)?s=P(s,e):s[n]=t({sx:o,theme:a})}else s=P(s,e(n,o,a,i))})),u=s,l.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),u);var u}return Array.isArray(o)?o.map(l):l(o)}}();me.filterProps=["sx"];const ge=me,ve=["breakpoints","palette","spacing","shape"],ye=function(e={},...t){const{breakpoints:n={},palette:r={},spacing:o,shape:a={}}=e,s=i(e,ve),u=w(n),c=H(o);let d=y({breakpoints:u,direction:"ltr",components:{},palette:l({mode:"light"},r),spacing:c,shape:l({},S,a)},s);return d=t.reduce(((e,t)=>y(e,t)),d),d.unstable_sxConfig=l({},he,null==s?void 0:s.unstable_sxConfig),d.unstable_sx=function(e){return ge({sx:e,theme:this})},d};var be=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),we=Math.abs,Se=String.fromCharCode,xe=Object.assign;function ke(e){return e.trim()}function Ce(e,t,n){return e.replace(t,n)}function Ee(e,t){return e.indexOf(t)}function _e(e,t){return 0|e.charCodeAt(t)}function $e(e,t,n){return e.slice(t,n)}function Pe(e){return e.length}function Te(e){return e.length}function Oe(e,t){return t.push(e),e}var Re=1,Ae=1,De=0,Ie=0,Ne=0,Fe="";function Le(e,t,n,r,o,a,i){return{value:e,root:t,parent:n,type:r,props:o,children:a,line:Re,column:Ae,length:i,return:""}}function Be(e,t){return xe(Le("",null,null,"",null,null,0),e,{length:-e.length},t)}function Me(){return Ne=Ie>0?_e(Fe,--Ie):0,Ae--,10===Ne&&(Ae=1,Re--),Ne}function ze(){return Ne=Ie<De?_e(Fe,Ie++):0,Ae++,10===Ne&&(Ae=1,Re++),Ne}function je(){return _e(Fe,Ie)}function Ve(){return Ie}function He(e,t){return $e(Fe,e,t)}function Ue(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function We(e){return Re=Ae=1,De=Pe(Fe=e),Ie=0,[]}function Ke(e){return Fe="",e}function qe(e){return ke(He(Ie-1,Ye(91===e?e+2:40===e?e+1:e)))}function Ge(e){for(;(Ne=je())&&Ne<33;)ze();return Ue(e)>2||Ue(Ne)>3?"":" "}function Qe(e,t){for(;--t&&ze()&&!(Ne<48||Ne>102||Ne>57&&Ne<65||Ne>70&&Ne<97););return He(e,Ve()+(t<6&&32==je()&&32==ze()))}function Ye(e){for(;ze();)switch(Ne){case e:return Ie;case 34:case 39:34!==e&&39!==e&&Ye(Ne);break;case 40:41===e&&Ye(e);break;case 92:ze()}return Ie}function Xe(e,t){for(;ze()&&e+Ne!==57&&(e+Ne!==84||47!==je()););return"/*"+He(t,Ie-1)+"*"+Se(47===e?e:ze())}function Je(e){for(;!Ue(je());)ze();return He(e,Ie)}var Ze="-ms-",et="-moz-",tt="-webkit-",nt="comm",rt="rule",ot="decl",at="@keyframes";function it(e,t){for(var n="",r=Te(e),o=0;o<r;o++)n+=t(e[o],o,e,t)||"";return n}function lt(e,t,n,r){switch(e.type){case"@layer":if(e.children.length)break;case"@import":case ot:return e.return=e.return||e.value;case nt:return"";case at:return e.return=e.value+"{"+it(e.children,r)+"}";case rt:e.value=e.props.join(",")}return Pe(n=it(e.children,r))?e.return=e.value+"{"+n+"}":""}function st(e){return Ke(ut("",null,null,null,[""],e=We(e),0,[0],e))}function ut(e,t,n,r,o,a,i,l,s){for(var u=0,c=0,d=i,f=0,p=0,h=0,m=1,g=1,v=1,y=0,b="",w=o,S=a,x=r,k=b;g;)switch(h=y,y=ze()){case 40:if(108!=h&&58==_e(k,d-1)){-1!=Ee(k+=Ce(qe(y),"&","&\f"),"&\f")&&(v=-1);break}case 34:case 39:case 91:k+=qe(y);break;case 9:case 10:case 13:case 32:k+=Ge(h);break;case 92:k+=Qe(Ve()-1,7);continue;case 47:switch(je()){case 42:case 47:Oe(dt(Xe(ze(),Ve()),t,n),s);break;default:k+="/"}break;case 123*m:l[u++]=Pe(k)*v;case 125*m:case 59:case 0:switch(y){case 0:case 125:g=0;case 59+c:-1==v&&(k=Ce(k,/\f/g,"")),p>0&&Pe(k)-d&&Oe(p>32?ft(k+";",r,n,d-1):ft(Ce(k," ","")+";",r,n,d-2),s);break;case 59:k+=";";default:if(Oe(x=ct(k,t,n,u,c,o,l,b,w=[],S=[],d),a),123===y)if(0===c)ut(k,t,x,x,w,a,d,l,S);else switch(99===f&&110===_e(k,3)?100:f){case 100:case 108:case 109:case 115:ut(e,x,x,r&&Oe(ct(e,x,x,0,0,o,l,b,o,w=[],d),S),o,S,d,l,r?w:S);break;default:ut(k,x,x,x,[""],S,0,l,S)}}u=c=p=0,m=v=1,b=k="",d=i;break;case 58:d=1+Pe(k),p=h;default:if(m<1)if(123==y)--m;else if(125==y&&0==m++&&125==Me())continue;switch(k+=Se(y),y*m){case 38:v=c>0?1:(k+="\f",-1);break;case 44:l[u++]=(Pe(k)-1)*v,v=1;break;case 64:45===je()&&(k+=qe(ze())),f=je(),c=d=Pe(b=k+=Je(Ve())),y++;break;case 45:45===h&&2==Pe(k)&&(m=0)}}return a}function ct(e,t,n,r,o,a,i,l,s,u,c){for(var d=o-1,f=0===o?a:[""],p=Te(f),h=0,m=0,g=0;h<r;++h)for(var v=0,y=$e(e,d+1,d=we(m=i[h])),b=e;v<p;++v)(b=ke(m>0?f[v]+" "+y:Ce(y,/&\f/g,f[v])))&&(s[g++]=b);return Le(e,t,n,0===o?rt:l,s,u,c)}function dt(e,t,n){return Le(e,t,n,nt,Se(Ne),$e(e,2,-2),0)}function ft(e,t,n,r){return Le(e,t,n,ot,$e(e,0,r),$e(e,r+1,-1),r)}var pt=function(e,t,n){for(var r=0,o=0;r=o,o=je(),38===r&&12===o&&(t[n]=1),!Ue(o);)ze();return He(e,Ie)},ht=new WeakMap,mt=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||ht.get(n))&&!r){ht.set(e,!0);for(var o=[],a=function(e,t){return Ke(function(e,t){var n=-1,r=44;do{switch(Ue(r)){case 0:38===r&&12===je()&&(t[n]=1),e[n]+=pt(Ie-1,t,n);break;case 2:e[n]+=qe(r);break;case 4:if(44===r){e[++n]=58===je()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=Se(r)}}while(r=ze());return e}(We(e),t))}(t,o),i=n.props,l=0,s=0;l<a.length;l++)for(var u=0;u<i.length;u++,s++)e.props[s]=o[l]?a[l].replace(/&\f/g,i[u]):i[u]+" "+a[l]}}},gt=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function vt(e,t){switch(function(e,t){return 45^_e(e,0)?(((t<<2^_e(e,0))<<2^_e(e,1))<<2^_e(e,2))<<2^_e(e,3):0}(e,t)){case 5103:return tt+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return tt+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return tt+e+et+e+Ze+e+e;case 6828:case 4268:return tt+e+Ze+e+e;case 6165:return tt+e+Ze+"flex-"+e+e;case 5187:return tt+e+Ce(e,/(\w+).+(:[^]+)/,tt+"box-$1$2"+Ze+"flex-$1$2")+e;case 5443:return tt+e+Ze+"flex-item-"+Ce(e,/flex-|-self/,"")+e;case 4675:return tt+e+Ze+"flex-line-pack"+Ce(e,/align-content|flex-|-self/,"")+e;case 5548:return tt+e+Ze+Ce(e,"shrink","negative")+e;case 5292:return tt+e+Ze+Ce(e,"basis","preferred-size")+e;case 6060:return tt+"box-"+Ce(e,"-grow","")+tt+e+Ze+Ce(e,"grow","positive")+e;case 4554:return tt+Ce(e,/([^-])(transform)/g,"$1"+tt+"$2")+e;case 6187:return Ce(Ce(Ce(e,/(zoom-|grab)/,tt+"$1"),/(image-set)/,tt+"$1"),e,"")+e;case 5495:case 3959:return Ce(e,/(image-set\([^]*)/,tt+"$1$`$1");case 4968:return Ce(Ce(e,/(.+:)(flex-)?(.*)/,tt+"box-pack:$3"+Ze+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+tt+e+e;case 4095:case 3583:case 4068:case 2532:return Ce(e,/(.+)-inline(.+)/,tt+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(Pe(e)-1-t>6)switch(_e(e,t+1)){case 109:if(45!==_e(e,t+4))break;case 102:return Ce(e,/(.+:)(.+)-([^]+)/,"$1"+tt+"$2-$3$1"+et+(108==_e(e,t+3)?"$3":"$2-$3"))+e;case 115:return~Ee(e,"stretch")?vt(Ce(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==_e(e,t+1))break;case 6444:switch(_e(e,Pe(e)-3-(~Ee(e,"!important")&&10))){case 107:return Ce(e,":",":"+tt)+e;case 101:return Ce(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+tt+(45===_e(e,14)?"inline-":"")+"box$3$1"+tt+"$2$3$1"+Ze+"$2box$3")+e}break;case 5936:switch(_e(e,t+11)){case 114:return tt+e+Ze+Ce(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return tt+e+Ze+Ce(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return tt+e+Ze+Ce(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return tt+e+Ze+e+e}return e}var yt=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case ot:e.return=vt(e.value,e.length);break;case at:return it([Be(e,{value:Ce(e.value,"@","@"+tt)})],r);case rt:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e,t){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return it([Be(e,{props:[Ce(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return it([Be(e,{props:[Ce(t,/:(plac\w+)/,":"+tt+"input-$1")]}),Be(e,{props:[Ce(t,/:(plac\w+)/,":-moz-$1")]}),Be(e,{props:[Ce(t,/:(plac\w+)/,Ze+"input-$1")]})],r)}return""}))}}],bt=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,o,a=e.stylisPlugins||yt,i={},l=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)i[t[n]]=!0;l.push(e)}));var s,u,c,d,f=[lt,(u=function(e){s.insert(e)},function(e){e.root||(e=e.return)&&u(e)})],p=(c=[mt,gt].concat(a,f),d=Te(c),function(e,t,n,r){for(var o="",a=0;a<d;a++)o+=c[a](e,t,n,r)||"";return o});o=function(e,t,n,r){s=n,function(e){it(st(e),p)}(e?e+"{"+t.styles+"}":t.styles),r&&(h.inserted[t.name]=!0)};var h={key:t,sheet:new be({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:i,registered:{},insert:o};return h.sheet.hydrate(l),h},wt={animationIterationCount:1,aspectRatio:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};function St(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}}var xt=/[A-Z]|^ms/g,kt=/_EMO_([^_]+?)_([^]*?)_EMO_/g,Ct=function(e){return 45===e.charCodeAt(1)},Et=function(e){return null!=e&&"boolean"!=typeof e},_t=St((function(e){return Ct(e)?e:e.replace(xt,"-$&").toLowerCase()})),$t=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(kt,(function(e,t,n){return Tt={name:t,styles:n,next:Tt},t}))}return 1===wt[e]||Ct(e)||"number"!=typeof t||0===t?t:t+"px"};function Pt(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return Tt={name:n.name,styles:n.styles,next:Tt},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)Tt={name:r.name,styles:r.styles,next:Tt},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var o=0;o<n.length;o++)r+=Pt(e,t,n[o])+";";else for(var a in n){var i=n[a];if("object"!=typeof i)null!=t&&void 0!==t[i]?r+=a+"{"+t[i]+"}":Et(i)&&(r+=_t(a)+":"+$t(a,i)+";");else if(!Array.isArray(i)||"string"!=typeof i[0]||null!=t&&void 0!==t[i[0]]){var l=Pt(e,t,i);switch(a){case"animation":case"animationName":r+=_t(a)+":"+l+";";break;default:r+=a+"{"+l+"}"}}else for(var s=0;s<i.length;s++)Et(i[s])&&(r+=_t(a)+":"+$t(a,i[s])+";")}return r}(e,t,n);case"function":if(void 0!==e){var o=Tt,a=n(e);return Tt=o,Pt(e,t,a)}}if(null==t)return n;var i=t[n];return void 0!==i?i:n}var Tt,Ot=/label:\s*([^\s;\n{]+)\s*(;|$)/g,Rt=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,o="";Tt=void 0;var a=e[0];null==a||void 0===a.raw?(r=!1,o+=Pt(n,t,a)):o+=a[0];for(var i=1;i<e.length;i++)o+=Pt(n,t,e[i]),r&&(o+=a[i]);Ot.lastIndex=0;for(var l,s="";null!==(l=Ot.exec(o));)s+="-"+l[1];var u=function(e){for(var t,n=0,r=0,o=e.length;o>=4;++r,o-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(o){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)}(o)+s;return{name:u,styles:o,next:Tt}},At=!!o.useInsertionEffect&&o.useInsertionEffect,Dt=At||function(e){return e()},It=(At||r.useLayoutEffect,r.createContext("undefined"!=typeof HTMLElement?bt({key:"css"}):null));It.Provider;var Nt=r.createContext({});const Ft=ye(),Lt=function(e=Ft){return function(e=null){const t=r.useContext(Nt);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n}(e)};function Bt({props:e,name:t,defaultTheme:n,themeId:r}){let o=Lt(n);return r&&(o=o[r]||o),m({theme:o,name:t,props:e})}function Mt(e=""){function t(...n){if(!n.length)return"";const r=n[0];return"string"!=typeof r||r.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)?`, ${r}`:`, var(--${e?`${e}-`:""}${r}${t(...n.slice(1))})`}return(n,...r)=>`var(--${e?`${e}-`:""}${n}${t(...r)})`}function zt(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function jt(e){if(e.type)return e;if("#"===e.charAt(0))return jt(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error(d(9,e));let r,o=e.substring(t+1,e.length-1);if("color"===n){if(o=o.split(" "),r=o.shift(),4===o.length&&"/"===o[3].charAt(0)&&(o[3]=o[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error(d(10,r))}else o=o.split(",");return o=o.map((e=>parseFloat(e))),{type:n,values:o,colorSpace:r}}const Vt=e=>{const t=jt(e);return t.values.slice(0,3).map(((e,n)=>-1!==t.type.indexOf("hsl")&&0!==n?`${e}%`:e)).join(" ")};function Ht(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function Ut(e){let t="hsl"===(e=jt(e)).type||"hsla"===e.type?jt(function(e){e=jt(e);const{values:t}=e,n=t[0],r=t[1]/100,o=t[2]/100,a=r*Math.min(o,1-o),i=(e,t=(e+n/30)%12)=>o-a*Math.max(Math.min(t-3,9-t,1),-1);let l="rgb";const s=[Math.round(255*i(0)),Math.round(255*i(8)),Math.round(255*i(4))];return"hsla"===e.type&&(l+="a",s.push(t[3])),Ht({type:l,values:s})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function Wt(e,t){return e=jt(e),t=zt(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,Ht(e)}const Kt=(e,t,n,r=[])=>{let o=e;t.forEach(((e,a)=>{a===t.length-1?Array.isArray(o)?o[Number(e)]=n:o&&"object"==typeof o&&(o[e]=n):o&&"object"==typeof o&&(o[e]||(o[e]=r.includes(e)?[]:{}),o=o[e])}))},qt=(e,t)=>"number"==typeof t?["lineHeight","fontWeight","opacity","zIndex"].some((t=>e.includes(t)))||e[e.length-1].toLowerCase().indexOf("opacity")>=0?t:`${t}px`:t;function Gt(e,t){const{prefix:n,shouldSkipGeneratingVar:r}=t||{},o={},a={},i={};return l=(e,t,l)=>{if(!("string"!=typeof t&&"number"!=typeof t||r&&r(e,t))){const r=`--${n?`${n}-`:""}${e.join("-")}`;Object.assign(o,{[r]:qt(e,t)}),Kt(a,e,`var(${r})`,l),Kt(i,e,`var(${r}, ${t})`,l)}},s=e=>"vars"===e[0],function e(t,n=[],r=[]){Object.entries(t).forEach((([t,o])=>{(!s||s&&!s([...n,t]))&&null!=o&&("object"==typeof o&&Object.keys(o).length>0?e(o,[...n,t],Array.isArray(o)?[...r,t]:r):l([...n,t],o,r))}))}(e),{css:o,vars:a,varsWithDefaults:i};var l,s}const Qt=["colorSchemes","components"],Yt=["light"],Xt=l({},he,{borderRadius:{themeKey:"radius"},boxShadow:{themeKey:"shadow"},fontFamily:{themeKey:"fontFamily"},fontSize:{themeKey:"fontSize"},fontWeight:{themeKey:"fontWeight"},letterSpacing:{themeKey:"letterSpacing"},lineHeight:{themeKey:"lineHeight"}}),Jt={grey:{50:"#F7F7F8",100:"#EBEBEF",200:"#D8D8DF",300:"#B9B9C6",400:"#8F8FA3",500:"#73738C",600:"#5A5A72",700:"#434356",800:"#25252D",900:"#131318"},blue:{50:"#F4FAFF",100:"#DDF1FF",200:"#ADDBFF",300:"#6FB6FF",400:"#3990FF",500:"#096BDE",600:"#054DA7",700:"#02367D",800:"#072859",900:"#00153C"},yellow:{50:"#FFF8C5",100:"#FAE17D",200:"#EAC54F",300:"#D4A72C",400:"#BF8700",500:"#9A6700",600:"#7D4E00",700:"#633C01",800:"#4D2D00",900:"#3B2300"},red:{50:"#FFF8F6",100:"#FFE9E8",200:"#FFC7C5",300:"#FF9192",400:"#FA5255",500:"#D3232F",600:"#A10E25",700:"#77061B",800:"#580013",900:"#39000D"},green:{50:"#F3FEF5",100:"#D7F5DD",200:"#77EC95",300:"#4CC76E",400:"#2CA24D",500:"#1A7D36",600:"#0F5D26",700:"#034318",800:"#002F0F",900:"#001D09"},purple:{50:"#FDF7FF",100:"#F4EAFF",200:"#E1CBFF",300:"#C69EFF",400:"#A374F9",500:"#814DDE",600:"#5F35AE",700:"#452382",800:"#301761",900:"#1D0A42"}};function Zt(e){var t;return!!e[0].match(/^(typography|variants|breakpoints|colorInversion|colorInversionConfig)$/)||!!e[0].match(/sxConfig$/)||"palette"===e[0]&&!(null==(t=e[1])||!t.match(/^(mode)$/))||"focus"===e[0]&&"thickness"!==e[1]}const en=e=>e,tn=(()=>{let e=en;return{configure(t){e=t},generate:t=>e(t),reset(){e=en}}})(),nn={active:"active",checked:"checked",completed:"completed",disabled:"disabled",readOnly:"readOnly",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",required:"required",selected:"selected"};function rn(e,t,n="Mui"){const r=nn[t];return r?`${n}-${r}`:`${tn.generate(e)}-${t}`}function on(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=rn(e,t,n)})),r}const an=(e,t)=>rn(e,t,"Joy"),ln=(e,t)=>on(e,t,"Joy"),sn=e=>e&&"object"==typeof e&&Object.keys(e).some((e=>{var t;return null==(t=e.match)?void 0:t.call(e,/^(plain(Hover|Active|Disabled)?(Color|Bg)|outlined(Hover|Active|Disabled)?(Color|Border|Bg)|soft(Hover|Active|Disabled)?(Color|Bg)|solid(Hover|Active|Disabled)?(Color|Bg))$/)})),un=(e,t,n)=>{const r={};return Object.entries(t||{}).forEach((([t,o])=>{if(t.match(new RegExp(`${e}(color|bg|border)`,"i"))&&o){const e=n?n(t):o;t.includes("Disabled")&&(r.pointerEvents="none",r.cursor="default"),t.match(/(Hover|Active|Disabled)/)||(r["--variant-borderWidth"]||(r["--variant-borderWidth"]="0px"),t.includes("Border")&&(r["--variant-borderWidth"]="1px",r.border="var(--variant-borderWidth) solid")),((e,t,n)=>{t.includes("Color")&&(e.color=n),t.includes("Bg")&&(e.backgroundColor=n),t.includes("Border")&&(e.borderColor=n)})(r,t,e)}})),r},cn=e=>t=>`--${e?`${e}-`:""}${t.replace(/^--/,"")}`,dn=(e,t)=>{let n={};if(t){const{getCssVar:r,palette:o}=t;Object.entries(o).forEach((t=>{const[a,i]=t;sn(i)&&"object"==typeof i&&(n=l({},n,{[a]:un(e,i,(e=>r(`palette-${a}-${e}`,o[a][e])))}))}))}return n.context=un(e,{plainColor:"var(--variant-plainColor)",plainHoverColor:"var(--variant-plainHoverColor)",plainHoverBg:"var(--variant-plainHoverBg)",plainActiveBg:"var(--variant-plainActiveBg)",plainDisabledColor:"var(--variant-plainDisabledColor)",outlinedColor:"var(--variant-outlinedColor)",outlinedBorder:"var(--variant-outlinedBorder)",outlinedHoverColor:"var(--variant-outlinedHoverColor)",outlinedHoverBorder:"var(--variant-outlinedHoverBorder)",outlinedHoverBg:"var(--variant-outlinedHoverBg)",outlinedActiveBg:"var(--variant-outlinedActiveBg)",outlinedDisabledColor:"var(--variant-outlinedDisabledColor)",outlinedDisabledBorder:"var(--variant-outlinedDisabledBorder)",softColor:"var(--variant-softColor)",softBg:"var(--variant-softBg)",softHoverColor:"var(--variant-softHoverColor)",softHoverBg:"var(--variant-softHoverBg)",softActiveBg:"var(--variant-softActiveBg)",softDisabledColor:"var(--variant-softDisabledColor)",softDisabledBg:"var(--variant-softDisabledBg)",solidColor:"var(--variant-solidColor)",solidBg:"var(--variant-solidBg)",solidHoverColor:"var(--variant-solidHoverColor)",solidHoverBg:"var(--variant-solidHoverBg)",solidActiveBg:"var(--variant-solidActiveBg)",solidDisabledColor:"var(--variant-solidDisabledColor)",solidDisabledBg:"var(--variant-solidDisabledBg)"}),n},fn=(e,t)=>{const n=Mt(e.cssVarPrefix),r=cn(e.cssVarPrefix),o={},a=t?t=>{var r,o;const a=t.split("-"),i=a[1],l=a[2];return n(t,null==(r=e.palette)||null==(o=r[i])?void 0:o[l])}:n;return Object.entries(e.palette).forEach((t=>{const[n,i]=t;sn(i)&&(o[n]={"--Badge-ringColor":a(`palette-${n}-softBg`),[r("--shadowChannel")]:a(`palette-${n}-darkChannel`),[e.getColorSchemeSelector("dark")]:{[r("--palette-focusVisible")]:a(`palette-${n}-300`),[r("--palette-background-body")]:`rgba(${a(`palette-${n}-mainChannel`)} / 0.1)`,[r("--palette-background-surface")]:`rgba(${a(`palette-${n}-mainChannel`)} / 0.08)`,[r("--palette-background-level1")]:`rgba(${a(`palette-${n}-mainChannel`)} / 0.2)`,[r("--palette-background-level2")]:`rgba(${a(`palette-${n}-mainChannel`)} / 0.4)`,[r("--palette-background-level3")]:`rgba(${a(`palette-${n}-mainChannel`)} / 0.6)`,[r("--palette-text-primary")]:a(`palette-${n}-100`),[r("--palette-text-secondary")]:`rgba(${a(`palette-${n}-lightChannel`)} / 0.72)`,[r("--palette-text-tertiary")]:`rgba(${a(`palette-${n}-lightChannel`)} / 0.6)`,[r("--palette-divider")]:`rgba(${a(`palette-${n}-lightChannel`)} / 0.2)`,"--variant-plainColor":`rgba(${a(`palette-${n}-lightChannel`)} / 1)`,"--variant-plainHoverColor":a(`palette-${n}-50`),"--variant-plainHoverBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.16)`,"--variant-plainActiveBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.32)`,"--variant-plainDisabledColor":`rgba(${a(`palette-${n}-mainChannel`)} / 0.72)`,"--variant-outlinedColor":`rgba(${a(`palette-${n}-lightChannel`)} / 1)`,"--variant-outlinedHoverColor":a(`palette-${n}-50`),"--variant-outlinedBg":"initial","--variant-outlinedBorder":`rgba(${a(`palette-${n}-mainChannel`)} / 0.4)`,"--variant-outlinedHoverBorder":a(`palette-${n}-600`),"--variant-outlinedHoverBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.16)`,"--variant-outlinedActiveBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.32)`,"--variant-outlinedDisabledColor":`rgba(${a(`palette-${n}-mainChannel`)} / 0.72)`,"--variant-outlinedDisabledBorder":`rgba(${a(`palette-${n}-mainChannel`)} / 0.2)`,"--variant-softColor":a(`palette-${n}-100`),"--variant-softBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.24)`,"--variant-softHoverColor":"#fff","--variant-softHoverBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.32)`,"--variant-softActiveBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.48)`,"--variant-softDisabledColor":`rgba(${a(`palette-${n}-mainChannel`)} / 0.72)`,"--variant-softDisabledBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.12)`,"--variant-solidColor":"#fff","--variant-solidBg":a(`palette-${n}-500`),"--variant-solidHoverColor":"#fff","--variant-solidHoverBg":a(`palette-${n}-400`),"--variant-solidActiveBg":a(`palette-${n}-400`),"--variant-solidDisabledColor":`rgba(${a(`palette-${n}-mainChannel`)} / 0.72)`,"--variant-solidDisabledBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.12)`},[e.getColorSchemeSelector("light")]:{[r("--palette-focusVisible")]:a(`palette-${n}-500`),[r("--palette-background-body")]:`rgba(${a(`palette-${n}-mainChannel`)} / 0.1)`,[r("--palette-background-surface")]:`rgba(${a(`palette-${n}-mainChannel`)} / 0.08)`,[r("--palette-background-level1")]:`rgba(${a(`palette-${n}-mainChannel`)} / 0.2)`,[r("--palette-background-level2")]:`rgba(${a(`palette-${n}-mainChannel`)} / 0.32)`,[r("--palette-background-level3")]:`rgba(${a(`palette-${n}-mainChannel`)} / 0.48)`,[r("--palette-text-primary")]:a(`palette-${n}-700`),[r("--palette-text-secondary")]:`rgba(${a(`palette-${n}-darkChannel`)} / 0.8)`,[r("--palette-text-tertiary")]:`rgba(${a(`palette-${n}-darkChannel`)} / 0.68)`,[r("--palette-divider")]:`rgba(${a(`palette-${n}-mainChannel`)} / 0.32)`,"--variant-plainColor":`rgba(${a(`palette-${n}-darkChannel`)} / 0.8)`,"--variant-plainHoverColor":`rgba(${a(`palette-${n}-darkChannel`)} / 1)`,"--variant-plainHoverBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.12)`,"--variant-plainActiveBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.24)`,"--variant-plainDisabledColor":`rgba(${a(`palette-${n}-mainChannel`)} / 0.6)`,"--variant-outlinedColor":`rgba(${a(`palette-${n}-mainChannel`)} / 1)`,"--variant-outlinedBorder":`rgba(${a(`palette-${n}-mainChannel`)} / 0.4)`,"--variant-outlinedHoverColor":a(`palette-${n}-600`),"--variant-outlinedHoverBorder":a(`palette-${n}-300`),"--variant-outlinedHoverBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.12)`,"--variant-outlinedActiveBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.24)`,"--variant-outlinedDisabledColor":`rgba(${a(`palette-${n}-mainChannel`)} / 0.6)`,"--variant-outlinedDisabledBorder":`rgba(${a(`palette-${n}-mainChannel`)} / 0.12)`,"--variant-softColor":a(`palette-${n}-600`),"--variant-softBg":`rgba(${a(`palette-${n}-lightChannel`)} / 0.72)`,"--variant-softHoverColor":a(`palette-${n}-700`),"--variant-softHoverBg":a(`palette-${n}-200`),"--variant-softActiveBg":a(`palette-${n}-300`),"--variant-softDisabledColor":`rgba(${a(`palette-${n}-mainChannel`)} / 0.6)`,"--variant-softDisabledBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.08)`,"--variant-solidColor":a("palette-common-white"),"--variant-solidBg":a(`palette-${n}-600`),"--variant-solidHoverColor":a("palette-common-white"),"--variant-solidHoverBg":a(`palette-${n}-500`),"--variant-solidActiveBg":a(`palette-${n}-500`),"--variant-solidDisabledColor":`rgba(${a(`palette-${n}-mainChannel`)} / 0.6)`,"--variant-solidDisabledBg":`rgba(${a(`palette-${n}-mainChannel`)} / 0.08)`}})})),o},pn=(e,t)=>{const n=Mt(e.cssVarPrefix),r=cn(e.cssVarPrefix),o={},a=t?t=>{const r=t.split("-"),o=r[1],a=r[2];return n(t,e.palette[o][a])}:n;return Object.entries(e.palette).forEach((e=>{const[t,n]=e;sn(n)&&("warning"===t?o.warning={"--Badge-ringColor":a(`palette-${t}-solidBg`),[r("--shadowChannel")]:a(`palette-${t}-darkChannel`),[r("--palette-focusVisible")]:a(`palette-${t}-700`),[r("--palette-background-body")]:`rgba(${a(`palette-${t}-darkChannel`)} / 0.16)`,[r("--palette-background-surface")]:`rgba(${a(`palette-${t}-darkChannel`)} / 0.1)`,[r("--palette-background-popup")]:a(`palette-${t}-100`),[r("--palette-background-level1")]:`rgba(${a(`palette-${t}-darkChannel`)} / 0.2)`,[r("--palette-background-level2")]:`rgba(${a(`palette-${t}-darkChannel`)} / 0.36)`,[r("--palette-background-level3")]:`rgba(${a(`palette-${t}-darkChannel`)} / 0.6)`,[r("--palette-text-primary")]:a(`palette-${t}-900`),[r("--palette-text-secondary")]:a(`palette-${t}-700`),[r("--palette-text-tertiary")]:a(`palette-${t}-500`),[r("--palette-divider")]:`rgba(${a(`palette-${t}-darkChannel`)} / 0.2)`,"--variant-plainColor":a(`palette-${t}-700`),"--variant-plainHoverColor":a(`palette-${t}-800`),"--variant-plainHoverBg":`rgba(${a(`palette-${t}-mainChannel`)} / 0.12)`,"--variant-plainActiveBg":`rgba(${a(`palette-${t}-mainChannel`)} / 0.32)`,"--variant-plainDisabledColor":`rgba(${a(`palette-${t}-mainChannel`)} / 0.72)`,"--variant-outlinedColor":a(`palette-${t}-700`),"--variant-outlinedBorder":`rgba(${a(`palette-${t}-mainChannel`)} / 0.5)`,"--variant-outlinedHoverColor":a(`palette-${t}-800`),"--variant-outlinedHoverBorder":`rgba(${a(`palette-${t}-mainChannel`)} / 0.6)`,"--variant-outlinedHoverBg":`rgba(${a(`palette-${t}-mainChannel`)} / 0.12)`,"--variant-outlinedActiveBg":`rgba(${a(`palette-${t}-mainChannel`)} / 0.32)`,"--variant-outlinedDisabledColor":`rgba(${a(`palette-${t}-mainChannel`)} / 0.72)`,"--variant-outlinedDisabledBorder":`rgba(${a(`palette-${t}-mainChannel`)} / 0.2)`,"--variant-softColor":a(`palette-${t}-800`),"--variant-softHoverColor":a(`palette-${t}-900`),"--variant-softBg":`rgba(${a(`palette-${t}-mainChannel`)} / 0.2)`,"--variant-softHoverBg":`rgba(${a(`palette-${t}-mainChannel`)} / 0.28)`,"--variant-softActiveBg":`rgba(${a(`palette-${t}-mainChannel`)} / 0.12)`,"--variant-softDisabledColor":`rgba(${a(`palette-${t}-mainChannel`)} / 0.72)`,"--variant-softDisabledBg":`rgba(${a(`palette-${t}-mainChannel`)} / 0.08)`,"--variant-solidColor":"#fff","--variant-solidBg":a(`palette-${t}-600`),"--variant-solidHoverColor":"#fff","--variant-solidHoverBg":a(`palette-${t}-700`),"--variant-solidActiveBg":a(`palette-${t}-800`),"--variant-solidDisabledColor":`rgba(${a(`palette-${t}-mainChannel`)} / 0.72)`,"--variant-solidDisabledBg":`rgba(${a(`palette-${t}-mainChannel`)} / 0.08)`}:o[t]={colorScheme:"dark","--Badge-ringColor":a(`palette-${t}-solidBg`),[r("--shadowChannel")]:a(`palette-${t}-darkChannel`),[r("--palette-focusVisible")]:a(`palette-${t}-200`),[r("--palette-background-body")]:"rgba(0 0 0 / 0.1)",[r("--palette-background-surface")]:"rgba(0 0 0 / 0.06)",[r("--palette-background-popup")]:a(`palette-${t}-700`),[r("--palette-background-level1")]:`rgba(${a(`palette-${t}-darkChannel`)} / 0.2)`,[r("--palette-background-level2")]:`rgba(${a(`palette-${t}-darkChannel`)} / 0.36)`,[r("--palette-background-level3")]:`rgba(${a(`palette-${t}-darkChannel`)} / 0.6)`,[r("--palette-text-primary")]:a("palette-common-white"),[r("--palette-text-secondary")]:a(`palette-${t}-100`),[r("--palette-text-tertiary")]:a(`palette-${t}-200`),[r("--palette-divider")]:`rgba(${a(`palette-${t}-lightChannel`)} / 0.32)`,"--variant-plainColor":a(`palette-${t}-50`),"--variant-plainHoverColor":"#fff","--variant-plainHoverBg":`rgba(${a(`palette-${t}-lightChannel`)} / 0.12)`,"--variant-plainActiveBg":`rgba(${a(`palette-${t}-lightChannel`)} / 0.32)`,"--variant-plainDisabledColor":`rgba(${a(`palette-${t}-lightChannel`)} / 0.72)`,"--variant-outlinedColor":a(`palette-${t}-50`),"--variant-outlinedBorder":`rgba(${a(`palette-${t}-lightChannel`)} / 0.5)`,"--variant-outlinedHoverColor":"#fff","--variant-outlinedHoverBorder":a(`palette-${t}-300`),"--variant-outlinedHoverBg":`rgba(${a(`palette-${t}-lightChannel`)} / 0.12)`,"--variant-outlinedActiveBg":`rgba(${a(`palette-${t}-lightChannel`)} / 0.32)`,"--variant-outlinedDisabledColor":`rgba(${a(`palette-${t}-lightChannel`)} / 0.72)`,"--variant-outlinedDisabledBorder":"rgba(255 255 255 / 0.2)","--variant-softColor":a("palette-common-white"),"--variant-softHoverColor":a("palette-common-white"),"--variant-softBg":`rgba(${a(`palette-${t}-lightChannel`)} / 0.24)`,"--variant-softHoverBg":`rgba(${a(`palette-${t}-lightChannel`)} / 0.36)`,"--variant-softActiveBg":`rgba(${a(`palette-${t}-lightChannel`)} / 0.16)`,"--variant-softDisabledColor":`rgba(${a(`palette-${t}-lightChannel`)} / 0.72)`,"--variant-softDisabledBg":`rgba(${a(`palette-${t}-lightChannel`)} / 0.1)`,"--variant-solidColor":a(`palette-${t}-${"neutral"===t?"600":"500"}`),"--variant-solidBg":a("palette-common-white"),"--variant-solidHoverColor":a(`palette-${t}-700`),"--variant-solidHoverBg":a("palette-common-white"),"--variant-solidActiveBg":a(`palette-${t}-200`),"--variant-solidDisabledColor":`rgba(${a(`palette-${t}-lightChannel`)} / 0.72)`,"--variant-solidDisabledBg":`rgba(${a(`palette-${t}-lightChannel`)} / 0.1)`})})),o},hn=["cssVarPrefix","breakpoints","spacing","components","variants","colorInversion","shouldSkipGeneratingVar"],mn=["colorSchemes"],gn=function(e){var t,n,r,o,a,s,u,c,d,f,p,h,m,g,v,b,S,x,k,C,E,_,$,P,T,O,R,A,D,I,N,F,L,B,M,z,j,V,U,W,K,q,G,Q,Y,X,J,Z,ee,te,ne,re,oe,ae,ie,le,se,ue,ce,de,fe,pe,he,me,ve,ye,be,we,Se,xe,ke,Ce,Ee,_e,$e,Pe,Te,Oe,Re,Ae,De,Ie;const Ne={},{cssVarPrefix:Fe="joy",breakpoints:Le,spacing:Be,components:Me,variants:ze,colorInversion:je,shouldSkipGeneratingVar:Ve=Zt}=Ne,He=i(Ne,hn),Ue=((e="joy")=>Mt(e))(Fe),We={primary:Jt.blue,neutral:Jt.grey,danger:Jt.red,info:Jt.purple,success:Jt.green,warning:Jt.yellow,common:{white:"#FFF",black:"#09090D"}},Ke=e=>{var t;const n=e.split("-"),r=n[1],o=n[2];return Ue(e,null==(t=We[r])?void 0:t[o])},qe=e=>({plainColor:Ke(`palette-${e}-600`),plainHoverBg:Ke(`palette-${e}-100`),plainActiveBg:Ke(`palette-${e}-200`),plainDisabledColor:Ke(`palette-${e}-200`),outlinedColor:Ke(`palette-${e}-500`),outlinedBorder:Ke(`palette-${e}-200`),outlinedHoverBg:Ke(`palette-${e}-100`),outlinedHoverBorder:Ke(`palette-${e}-300`),outlinedActiveBg:Ke(`palette-${e}-200`),outlinedDisabledColor:Ke(`palette-${e}-100`),outlinedDisabledBorder:Ke(`palette-${e}-100`),softColor:Ke(`palette-${e}-600`),softBg:Ke(`palette-${e}-100`),softHoverBg:Ke(`palette-${e}-200`),softActiveBg:Ke(`palette-${e}-300`),softDisabledColor:Ke(`palette-${e}-300`),softDisabledBg:Ke(`palette-${e}-50`),solidColor:"#fff",solidBg:Ke(`palette-${e}-500`),solidHoverBg:Ke(`palette-${e}-600`),solidActiveBg:Ke(`palette-${e}-700`),solidDisabledColor:"#fff",solidDisabledBg:Ke(`palette-${e}-200`)}),Ge=e=>({plainColor:Ke(`palette-${e}-300`),plainHoverBg:Ke(`palette-${e}-800`),plainActiveBg:Ke(`palette-${e}-700`),plainDisabledColor:Ke(`palette-${e}-800`),outlinedColor:Ke(`palette-${e}-200`),outlinedBorder:Ke(`palette-${e}-700`),outlinedHoverBg:Ke(`palette-${e}-800`),outlinedHoverBorder:Ke(`palette-${e}-600`),outlinedActiveBg:Ke(`palette-${e}-900`),outlinedDisabledColor:Ke(`palette-${e}-800`),outlinedDisabledBorder:Ke(`palette-${e}-800`),softColor:Ke(`palette-${e}-200`),softBg:Ke(`palette-${e}-900`),softHoverBg:Ke(`palette-${e}-800`),softActiveBg:Ke(`palette-${e}-700`),softDisabledColor:Ke(`palette-${e}-800`),softDisabledBg:Ke(`palette-${e}-900`),solidColor:"#fff",solidBg:Ke(`palette-${e}-600`),solidHoverBg:Ke(`palette-${e}-700`),solidActiveBg:Ke(`palette-${e}-800`),solidDisabledColor:Ke(`palette-${e}-700`),solidDisabledBg:Ke(`palette-${e}-900`)}),Qe={palette:{mode:"light",primary:l({},We.primary,qe("primary")),neutral:l({},We.neutral,{plainColor:Ke("palette-neutral-800"),plainHoverColor:Ke("palette-neutral-900"),plainHoverBg:Ke("palette-neutral-100"),plainActiveBg:Ke("palette-neutral-200"),plainDisabledColor:Ke("palette-neutral-300"),outlinedColor:Ke("palette-neutral-800"),outlinedBorder:Ke("palette-neutral-200"),outlinedHoverColor:Ke("palette-neutral-900"),outlinedHoverBg:Ke("palette-neutral-100"),outlinedHoverBorder:Ke("palette-neutral-300"),outlinedActiveBg:Ke("palette-neutral-200"),outlinedDisabledColor:Ke("palette-neutral-300"),outlinedDisabledBorder:Ke("palette-neutral-100"),softColor:Ke("palette-neutral-800"),softBg:Ke("palette-neutral-100"),softHoverColor:Ke("palette-neutral-900"),softHoverBg:Ke("palette-neutral-200"),softActiveBg:Ke("palette-neutral-300"),softDisabledColor:Ke("palette-neutral-300"),softDisabledBg:Ke("palette-neutral-50"),solidColor:Ke("palette-common-white"),solidBg:Ke("palette-neutral-600"),solidHoverBg:Ke("palette-neutral-700"),solidActiveBg:Ke("palette-neutral-800"),solidDisabledColor:Ke("palette-neutral-300"),solidDisabledBg:Ke("palette-neutral-50")}),danger:l({},We.danger,qe("danger")),info:l({},We.info,qe("info")),success:l({},We.success,qe("success")),warning:l({},We.warning,qe("warning"),{solidColor:Ke("palette-warning-800"),solidBg:Ke("palette-warning-200"),solidHoverBg:Ke("palette-warning-300"),solidActiveBg:Ke("palette-warning-400"),solidDisabledColor:Ke("palette-warning-200"),solidDisabledBg:Ke("palette-warning-50"),softColor:Ke("palette-warning-800"),softBg:Ke("palette-warning-50"),softHoverBg:Ke("palette-warning-100"),softActiveBg:Ke("palette-warning-200"),softDisabledColor:Ke("palette-warning-200"),softDisabledBg:Ke("palette-warning-50"),outlinedColor:Ke("palette-warning-800"),outlinedHoverBg:Ke("palette-warning-50"),plainColor:Ke("palette-warning-800"),plainHoverBg:Ke("palette-warning-50")}),common:{white:"#FFF",black:"#09090D"},text:{primary:Ke("palette-neutral-800"),secondary:Ke("palette-neutral-600"),tertiary:Ke("palette-neutral-500")},background:{body:Ke("palette-common-white"),surface:Ke("palette-common-white"),popup:Ke("palette-common-white"),level1:Ke("palette-neutral-50"),level2:Ke("palette-neutral-100"),level3:Ke("palette-neutral-200"),tooltip:Ke("palette-neutral-800"),backdrop:"rgba(255 255 255 / 0.5)"},divider:`rgba(${Ue("palette-neutral-mainChannel",Vt(We.neutral[500]))} / 0.28)`,focusVisible:Ke("palette-primary-500")},shadowRing:"0 0 #000",shadowChannel:"187 187 187"},Ye={palette:{mode:"dark",primary:l({},We.primary,Ge("primary")),neutral:l({},We.neutral,{plainColor:Ke("palette-neutral-200"),plainHoverColor:Ke("palette-neutral-50"),plainHoverBg:Ke("palette-neutral-800"),plainActiveBg:Ke("palette-neutral-700"),plainDisabledColor:Ke("palette-neutral-700"),outlinedColor:Ke("palette-neutral-200"),outlinedBorder:Ke("palette-neutral-800"),outlinedHoverColor:Ke("palette-neutral-50"),outlinedHoverBg:Ke("palette-neutral-800"),outlinedHoverBorder:Ke("palette-neutral-700"),outlinedActiveBg:Ke("palette-neutral-800"),outlinedDisabledColor:Ke("palette-neutral-800"),outlinedDisabledBorder:Ke("palette-neutral-800"),softColor:Ke("palette-neutral-200"),softBg:Ke("palette-neutral-800"),softHoverColor:Ke("palette-neutral-50"),softHoverBg:Ke("palette-neutral-700"),softActiveBg:Ke("palette-neutral-600"),softDisabledColor:Ke("palette-neutral-700"),softDisabledBg:Ke("palette-neutral-900"),solidColor:Ke("palette-common-white"),solidBg:Ke("palette-neutral-600"),solidHoverBg:Ke("palette-neutral-700"),solidActiveBg:Ke("palette-neutral-800"),solidDisabledColor:Ke("palette-neutral-700"),solidDisabledBg:Ke("palette-neutral-900")}),danger:l({},We.danger,Ge("danger")),info:l({},We.info,Ge("info")),success:l({},We.success,Ge("success"),{solidColor:"#fff",solidBg:Ke("palette-success-600"),solidHoverBg:Ke("palette-success-700"),solidActiveBg:Ke("palette-success-800")}),warning:l({},We.warning,Ge("warning"),{solidColor:Ke("palette-common-black"),solidBg:Ke("palette-warning-300"),solidHoverBg:Ke("palette-warning-400"),solidActiveBg:Ke("palette-warning-500")}),common:{white:"#FFF",black:"#09090D"},text:{primary:Ke("palette-neutral-100"),secondary:Ke("palette-neutral-300"),tertiary:Ke("palette-neutral-400")},background:{body:Ke("palette-neutral-900"),surface:Ke("palette-common-black"),popup:Ke("palette-neutral-900"),level1:Ke("palette-neutral-800"),level2:Ke("palette-neutral-700"),level3:Ke("palette-neutral-600"),tooltip:Ke("palette-neutral-600"),backdrop:`rgba(${Ue("palette-neutral-darkChannel",Vt(We.neutral[800]))} / 0.5)`},divider:`rgba(${Ue("palette-neutral-mainChannel",Vt(We.neutral[500]))} / 0.24)`,focusVisible:Ke("palette-primary-500")},shadowRing:"0 0 #000",shadowChannel:"0 0 0"},Xe='-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"',Je=l({body:`"Public Sans", ${Ue("fontFamily-fallback",Xe)}`,display:`"Public Sans", ${Ue("fontFamily-fallback",Xe)}`,code:"Source Code Pro,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,Liberation Mono,Courier New,monospace",fallback:Xe},He.fontFamily),Ze=l({xs:200,sm:300,md:500,lg:600,xl:700,xl2:800,xl3:900},He.fontWeight),et=l({xs3:"0.5rem",xs2:"0.625rem",xs:"0.75rem",sm:"0.875rem",md:"1rem",lg:"1.125rem",xl:"1.25rem",xl2:"1.5rem",xl3:"1.875rem",xl4:"2.25rem",xl5:"3rem",xl6:"3.75rem",xl7:"4.5rem"},He.fontSize),tt=l({sm:1.25,md:1.5,lg:1.7},He.lineHeight),nt=l({sm:"-0.01em",md:"0.083em",lg:"0.125em"},He.letterSpacing),rt={colorSchemes:{light:Qe,dark:Ye},fontSize:et,fontFamily:Je,fontWeight:Ze,focus:{thickness:"2px",selector:`&.${an("","focusVisible")}, &:focus-visible`,default:{outlineOffset:`var(--focus-outline-offset, ${Ue("focus-thickness",null!=(t=null==(n=He.focus)?void 0:n.thickness)?t:"2px")})`,outline:`${Ue("focus-thickness",null!=(r=null==(o=He.focus)?void 0:o.thickness)?r:"2px")} solid ${Ue("palette-focusVisible",We.primary[500])}`}},lineHeight:tt,letterSpacing:nt,radius:{xs:"4px",sm:"8px",md:"12px",lg:"16px",xl:"20px"},shadow:{xs:`${Ue("shadowRing",null!=(a=null==(s=He.colorSchemes)||null==(u=s.light)?void 0:u.shadowRing)?a:Qe.shadowRing)}, 0 1px 2px 0 rgba(${Ue("shadowChannel",null!=(c=null==(d=He.colorSchemes)||null==(f=d.light)?void 0:f.shadowChannel)?c:Qe.shadowChannel)} / 0.12)`,sm:`${Ue("shadowRing",null!=(p=null==(h=He.colorSchemes)||null==(m=h.light)?void 0:m.shadowRing)?p:Qe.shadowRing)}, 0.3px 0.8px 1.1px rgba(${Ue("shadowChannel",null!=(g=null==(v=He.colorSchemes)||null==(b=v.light)?void 0:b.shadowChannel)?g:Qe.shadowChannel)} / 0.11), 0.5px 1.3px 1.8px -0.6px rgba(${Ue("shadowChannel",null!=(S=null==(x=He.colorSchemes)||null==(k=x.light)?void 0:k.shadowChannel)?S:Qe.shadowChannel)} / 0.18), 1.1px 2.7px 3.8px -1.2px rgba(${Ue("shadowChannel",null!=(C=null==(E=He.colorSchemes)||null==(_=E.light)?void 0:_.shadowChannel)?C:Qe.shadowChannel)} / 0.26)`,md:`${Ue("shadowRing",null!=($=null==(P=He.colorSchemes)||null==(T=P.light)?void 0:T.shadowRing)?$:Qe.shadowRing)}, 0.3px 0.8px 1.1px rgba(${Ue("shadowChannel",null!=(O=null==(R=He.colorSchemes)||null==(A=R.light)?void 0:A.shadowChannel)?O:Qe.shadowChannel)} / 0.12), 1.1px 2.8px 3.9px -0.4px rgba(${Ue("shadowChannel",null!=(D=null==(I=He.colorSchemes)||null==(N=I.light)?void 0:N.shadowChannel)?D:Qe.shadowChannel)} / 0.17), 2.4px 6.1px 8.6px -0.8px rgba(${Ue("shadowChannel",null!=(F=null==(L=He.colorSchemes)||null==(B=L.light)?void 0:B.shadowChannel)?F:Qe.shadowChannel)} / 0.23), 5.3px 13.3px 18.8px -1.2px rgba(${Ue("shadowChannel",null!=(M=null==(z=He.colorSchemes)||null==(j=z.light)?void 0:j.shadowChannel)?M:Qe.shadowChannel)} / 0.29)`,lg:`${Ue("shadowRing",null!=(V=null==(U=He.colorSchemes)||null==(W=U.light)?void 0:W.shadowRing)?V:Qe.shadowRing)}, 0.3px 0.8px 1.1px rgba(${Ue("shadowChannel",null!=(K=null==(q=He.colorSchemes)||null==(G=q.light)?void 0:G.shadowChannel)?K:Qe.shadowChannel)} / 0.11), 1.8px 4.5px 6.4px -0.2px rgba(${Ue("shadowChannel",null!=(Q=null==(Y=He.colorSchemes)||null==(X=Y.light)?void 0:X.shadowChannel)?Q:Qe.shadowChannel)} / 0.13), 3.2px 7.9px 11.2px -0.4px rgba(${Ue("shadowChannel",null!=(J=null==(Z=He.colorSchemes)||null==(ee=Z.light)?void 0:ee.shadowChannel)?J:Qe.shadowChannel)} / 0.16), 4.8px 12px 17px -0.5px rgba(${Ue("shadowChannel",null!=(te=null==(ne=He.colorSchemes)||null==(re=ne.light)?void 0:re.shadowChannel)?te:Qe.shadowChannel)} / 0.19), 7px 17.5px 24.7px -0.7px rgba(${Ue("shadowChannel",null!=(oe=null==(ae=He.colorSchemes)||null==(ie=ae.light)?void 0:ie.shadowChannel)?oe:Qe.shadowChannel)} / 0.21)`,xl:`${Ue("shadowRing",null!=(le=null==(se=He.colorSchemes)||null==(ue=se.light)?void 0:ue.shadowRing)?le:Qe.shadowRing)}, 0.3px 0.8px 1.1px rgba(${Ue("shadowChannel",null!=(ce=null==(de=He.colorSchemes)||null==(fe=de.light)?void 0:fe.shadowChannel)?ce:Qe.shadowChannel)} / 0.11), 1.8px 4.5px 6.4px -0.2px rgba(${Ue("shadowChannel",null!=(pe=null==(he=He.colorSchemes)||null==(me=he.light)?void 0:me.shadowChannel)?pe:Qe.shadowChannel)} / 0.13), 3.2px 7.9px 11.2px -0.4px rgba(${Ue("shadowChannel",null!=(ve=null==(ye=He.colorSchemes)||null==(be=ye.light)?void 0:be.shadowChannel)?ve:Qe.shadowChannel)} / 0.16), 4.8px 12px 17px -0.5px rgba(${Ue("shadowChannel",null!=(we=null==(Se=He.colorSchemes)||null==(xe=Se.light)?void 0:xe.shadowChannel)?we:Qe.shadowChannel)} / 0.19), 7px 17.5px 24.7px -0.7px rgba(${Ue("shadowChannel",null!=(ke=null==(Ce=He.colorSchemes)||null==(Ee=Ce.light)?void 0:Ee.shadowChannel)?ke:Qe.shadowChannel)} / 0.21), 10.2px 25.5px 36px -0.9px rgba(${Ue("shadowChannel",null!=(_e=null==($e=He.colorSchemes)||null==(Pe=$e.light)?void 0:Pe.shadowChannel)?_e:Qe.shadowChannel)} / 0.24), 14.8px 36.8px 52.1px -1.1px rgba(${Ue("shadowChannel",null!=(Te=null==(Oe=He.colorSchemes)||null==(Re=Oe.light)?void 0:Re.shadowChannel)?Te:Qe.shadowChannel)} / 0.27), 21px 52.3px 74px -1.2px rgba(${Ue("shadowChannel",null!=(Ae=null==(De=He.colorSchemes)||null==(Ie=De.light)?void 0:Ie.shadowChannel)?Ae:Qe.shadowChannel)} / 0.29)`},zIndex:{badge:1,table:10,popup:1e3,modal:1300,tooltip:1500},typography:{display1:{fontFamily:Ue("fontFamily-display",Je.display),fontWeight:Ue("fontWeight-xl",Ze.xl.toString()),fontSize:Ue("fontSize-xl7",et.xl7),lineHeight:Ue("lineHeight-sm",tt.sm.toString()),letterSpacing:Ue("letterSpacing-sm",nt.sm),color:Ue("palette-text-primary",Qe.palette.text.primary)},display2:{fontFamily:Ue("fontFamily-display",Je.display),fontWeight:Ue("fontWeight-xl",Ze.xl.toString()),fontSize:Ue("fontSize-xl6",et.xl6),lineHeight:Ue("lineHeight-sm",tt.sm.toString()),letterSpacing:Ue("letterSpacing-sm",nt.sm),color:Ue("palette-text-primary",Qe.palette.text.primary)},h1:{fontFamily:Ue("fontFamily-display",Je.display),fontWeight:Ue("fontWeight-lg",Ze.lg.toString()),fontSize:Ue("fontSize-xl5",et.xl5),lineHeight:Ue("lineHeight-sm",tt.sm.toString()),letterSpacing:Ue("letterSpacing-sm",nt.sm),color:Ue("palette-text-primary",Qe.palette.text.primary)},h2:{fontFamily:Ue("fontFamily-display",Je.display),fontWeight:Ue("fontWeight-lg",Ze.lg.toString()),fontSize:Ue("fontSize-xl4",et.xl4),lineHeight:Ue("lineHeight-sm",tt.sm.toString()),letterSpacing:Ue("letterSpacing-sm",nt.sm),color:Ue("palette-text-primary",Qe.palette.text.primary)},h3:{fontFamily:Ue("fontFamily-body",Je.body),fontWeight:Ue("fontWeight-md",Ze.md.toString()),fontSize:Ue("fontSize-xl3",et.xl3),lineHeight:Ue("lineHeight-sm",tt.sm.toString()),color:Ue("palette-text-primary",Qe.palette.text.primary)},h4:{fontFamily:Ue("fontFamily-body",Je.body),fontWeight:Ue("fontWeight-md",Ze.md.toString()),fontSize:Ue("fontSize-xl2",et.xl2),lineHeight:Ue("lineHeight-md",tt.md.toString()),color:Ue("palette-text-primary",Qe.palette.text.primary)},h5:{fontFamily:Ue("fontFamily-body",Je.body),fontWeight:Ue("fontWeight-md",Ze.md.toString()),fontSize:Ue("fontSize-xl",et.xl),lineHeight:Ue("lineHeight-md",tt.md.toString()),color:Ue("palette-text-primary",Qe.palette.text.primary)},h6:{fontFamily:Ue("fontFamily-body",Je.body),fontWeight:Ue("fontWeight-md",Ze.md.toString()),fontSize:Ue("fontSize-lg",et.lg),lineHeight:Ue("lineHeight-md",tt.md.toString()),color:Ue("palette-text-primary",Qe.palette.text.primary)},body1:{fontFamily:Ue("fontFamily-body",Je.body),fontSize:Ue("fontSize-md",et.md),lineHeight:Ue("lineHeight-md",tt.md.toString()),color:Ue("palette-text-primary",Qe.palette.text.primary)},body2:{fontFamily:Ue("fontFamily-body",Je.body),fontSize:Ue("fontSize-sm",et.sm),lineHeight:Ue("lineHeight-md",tt.md.toString()),color:Ue("palette-text-secondary",Qe.palette.text.secondary)},body3:{fontFamily:Ue("fontFamily-body",Je.body),fontSize:Ue("fontSize-xs",et.xs),lineHeight:Ue("lineHeight-md",tt.md.toString()),color:Ue("palette-text-tertiary",Qe.palette.text.tertiary)},body4:{fontFamily:Ue("fontFamily-body",Je.body),fontSize:Ue("fontSize-xs2",et.xs2),lineHeight:Ue("lineHeight-md",tt.md.toString()),color:Ue("palette-text-tertiary",Qe.palette.text.tertiary)},body5:{fontFamily:Ue("fontFamily-body",Je.body),fontSize:Ue("fontSize-xs3",et.xs3),lineHeight:Ue("lineHeight-md",tt.md.toString()),color:Ue("palette-text-tertiary",Qe.palette.text.tertiary)}}},ot=He?y(rt,He):rt,{colorSchemes:at}=ot,it=i(ot,mn),lt=l({colorSchemes:at},it,{breakpoints:w(null!=Le?Le:{}),components:y({MuiSvgIcon:{defaultProps:{fontSize:"xl"},styleOverrides:{root:({ownerState:e,theme:t})=>{var n;const r=e.instanceFontSize;return l({color:"var(--Icon-color)",margin:"var(--Icon-margin)"},e.fontSize&&"inherit"!==e.fontSize&&{fontSize:`var(--Icon-fontSize, ${t.vars.fontSize[e.fontSize]})`},e.color&&"inherit"!==e.color&&"context"!==e.color&&t.vars.palette[e.color]&&{color:`rgba(${null==(n=t.vars.palette[e.color])?void 0:n.mainChannel} / 1)`},"context"===e.color&&{color:t.vars.palette.text.secondary},r&&"inherit"!==r&&{"--Icon-fontSize":t.vars.fontSize[r]})}}}},Me),cssVarPrefix:Fe,getCssVar:Ue,spacing:H(Be),colorInversionConfig:{soft:["plain","outlined","soft","solid"],solid:["plain","outlined","soft","solid"]}});Object.entries(lt.colorSchemes).forEach((([e,t])=>{!function(e,t){Object.keys(t).forEach((n=>{const r={main:"500",light:"200",dark:"800"};"dark"===e&&(r.main=400),!t[n].mainChannel&&t[n][r.main]&&(t[n].mainChannel=Vt(t[n][r.main])),!t[n].lightChannel&&t[n][r.light]&&(t[n].lightChannel=Vt(t[n][r.light])),!t[n].darkChannel&&t[n][r.dark]&&(t[n].darkChannel=Vt(t[n][r.dark]))}))}(e,t.palette)}));const st={prefix:Fe,shouldSkipGeneratingVar:Ve},{vars:ut,generateCssVars:ct}=function(e,t){const{colorSchemes:n={}}=e,r=i(e,Qt),{vars:o,css:a,varsWithDefaults:s}=Gt(r,t);let u=s;const c={},{light:d}=n,f=i(n,Yt);if(Object.entries(f||{}).forEach((([e,n])=>{const{vars:r,css:o,varsWithDefaults:a}=Gt(n,t);u=y(u,a),c[e]={css:o,vars:r}})),d){const{css:e,vars:n,varsWithDefaults:r}=Gt(d,t);u=y(u,r),c.light={css:e,vars:n}}return{vars:u,generateCssVars:e=>e?{css:l({},c[e].css),vars:c[e].vars}:{css:l({},a),vars:o}}}(l({colorSchemes:at},it),st);lt.vars=ut,lt.generateCssVars=ct,lt.unstable_sxConfig=l({},Xt,void 0),lt.unstable_sx=function(e){return ge({sx:e,theme:this})},lt.getColorSchemeSelector=e=>"light"===e?"&":`&[data-joy-color-scheme="${e}"], [data-joy-color-scheme="${e}"] &`;const dt={getCssVar:Ue,palette:lt.colorSchemes.light.palette};return lt.variants=y({plain:dn("plain",dt),plainHover:dn("plainHover",dt),plainActive:dn("plainActive",dt),plainDisabled:dn("plainDisabled",dt),outlined:dn("outlined",dt),outlinedHover:dn("outlinedHover",dt),outlinedActive:dn("outlinedActive",dt),outlinedDisabled:dn("outlinedDisabled",dt),soft:dn("soft",dt),softHover:dn("softHover",dt),softActive:dn("softActive",dt),softDisabled:dn("softDisabled",dt),solid:dn("solid",dt),solidHover:dn("solidHover",dt),solidActive:dn("solidActive",dt),solidDisabled:dn("solidDisabled",dt)},ze),lt.palette=l({},lt.colorSchemes.light.palette,{colorScheme:"light"}),lt.shouldSkipGeneratingVar=Ve,lt.colorInversion="function"==typeof je?je:y({soft:fn(lt,!0),solid:pn(lt,!0)},je||{},{clone:!1}),lt}(),vn=gn,yn="$$joy";function bn({props:e,name:t}){return Bt({props:e,name:t,defaultTheme:l({},vn,{components:{}}),themeId:yn})}var wn=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/,Sn=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},xn=St((function(e){return wn.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91})),kn=function(e){return"theme"!==e},Cn=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?xn:kn},En=function(e,t,n){var r;if(t){var o=t.shouldForwardProp;r=e.__emotion_forwardProp&&o?function(t){return e.__emotion_forwardProp(t)&&o(t)}:o}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},_n=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return Sn(t,n,r),Dt((function(){return function(e,t,n){Sn(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var o=t;do{e.insert(t===o?"."+r:"",o,e.sheet,!0),o=o.next}while(void 0!==o)}}(t,n,r)})),null},$n=function e(t,n){var o,a,i=t.__emotion_real===t,s=i&&t.__emotion_base||t;void 0!==n&&(o=n.label,a=n.target);var u=En(t,n,i),c=u||Cn(s),d=!c("as");return function(){var f=arguments,p=i&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==o&&p.push("label:"+o+";"),null==f[0]||void 0===f[0].raw)p.push.apply(p,f);else{p.push(f[0][0]);for(var h=f.length,m=1;m<h;m++)p.push(f[m],f[0][m])}var g,v=(g=function(e,t,n){var o,i,l,f,h=d&&e.as||s,m="",g=[],v=e;if(null==e.theme){for(var y in v={},e)v[y]=e[y];v.theme=r.useContext(Nt)}"string"==typeof e.className?(o=t.registered,i=g,l=e.className,f="",l.split(" ").forEach((function(e){void 0!==o[e]?i.push(o[e]+";"):f+=e+" "})),m=f):null!=e.className&&(m=e.className+" ");var b=Rt(p.concat(g),t.registered,v);m+=t.key+"-"+b.name,void 0!==a&&(m+=" "+a);var w=d&&void 0===u?Cn(h):c,S={};for(var x in e)d&&"as"===x||w(x)&&(S[x]=e[x]);return S.className=m,S.ref=n,r.createElement(r.Fragment,null,r.createElement(_n,{cache:t,serialized:b,isStringTag:"string"==typeof h}),r.createElement(h,S))},(0,r.forwardRef)((function(e,t){var n=(0,r.useContext)(It);return g(e,n,t)})));return v.displayName=void 0!==o?o:"Styled("+("string"==typeof s?s:s.displayName||s.name||"Component")+")",v.defaultProps=t.defaultProps,v.__emotion_real=v,v.__emotion_base=s,v.__emotion_styles=p,v.__emotion_forwardProp=u,Object.defineProperty(v,"toString",{value:function(){return"."+a}}),v.withComponent=function(t,r){return e(t,l({},n,r,{shouldForwardProp:En(v,r,!0)})).apply(void 0,p)},v}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){$n[e]=$n(e)}));const Pn=["variant"];function Tn(e){return 0===e.length}function On(e){const{variant:t}=e,n=i(e,Pn);let r=t||"";return Object.keys(n).sort().forEach((t=>{r+="color"===t?Tn(r)?e[t]:f(e[t]):`${Tn(r)?t:f(t)}${f(e[t].toString())}`})),r}const Rn=["name","slot","skipVariantsResolver","skipSx","overridesResolver"];function An(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const Dn=ye();function In({defaultTheme:e,theme:t,themeId:n}){return r=t,0===Object.keys(r).length?e:t[n]||t;var r}function Nn(e={}){const{themeId:t,defaultTheme:n=Dn,rootShouldForwardProp:r=An,slotShouldForwardProp:o=An}=e,a=e=>ge(l({},e,{theme:In(l({},e,{defaultTheme:n,themeId:t}))}));return a.__mui_systemSx=!0,(e,s={})=>{((e,t)=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx))))(e.__emotion_styles))})(e);const{name:u,slot:c,skipVariantsResolver:d,skipSx:f,overridesResolver:p}=s,h=i(s,Rn),m=void 0!==d?d:c&&"Root"!==c||!1,g=f||!1;let v=An;"Root"===c?v=r:c?v=o:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(v=void 0);const y=function(e,t){return $n(e,t)}(e,l({shouldForwardProp:v,label:void 0},h)),b=(r,...o)=>{const i=o?o.map((e=>"function"==typeof e&&e.__emotion_real!==e?r=>e(l({},r,{theme:In(l({},r,{defaultTheme:n,themeId:t}))})):e)):[];let s=r;u&&p&&i.push((e=>{const r=In(l({},e,{defaultTheme:n,themeId:t})),o=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(u,r);if(o){const t={};return Object.entries(o).forEach((([n,o])=>{t[n]="function"==typeof o?o(l({},e,{theme:r})):o})),p(e,t)}return null})),u&&!m&&i.push((e=>{const r=In(l({},e,{defaultTheme:n,themeId:t}));return((e,t,n,r)=>{var o,a;const{ownerState:i={}}=e,l=[],s=null==n||null==(o=n.components)||null==(a=o[r])?void 0:a.variants;return s&&s.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{i[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&l.push(t[On(n.props)])})),l})(e,((e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=On(e.props);r[t]=e.style})),r})(u,r),r,u)})),g||i.push(a);const c=i.length-o.length;if(Array.isArray(r)&&c>0){const e=new Array(c).fill("");s=[...r,...e],s.raw=[...r.raw,...e]}else"function"==typeof r&&r.__emotion_real!==r&&(s=e=>r(l({},e,{theme:In(l({},e,{defaultTheme:n,themeId:t}))})));const d=y(s,...i);return e.muiName&&(d.muiName=e.muiName),d};return y.withConfig&&(b.withConfig=y.withConfig),b}}const Fn=Nn({defaultTheme:vn,themeId:yn});var Ln=n(893);const Bn=r.createContext(void 0),Mn=e=>{const t=r.useContext(Bn);return{getColor:(n,r)=>t&&e&&t.includes(e)?n||"context":n||r}};function zn({children:e,variant:t}){var n;const r=(()=>{const e=Lt(vn);return e[yn]||e})();return(0,Ln.jsx)(Bn.Provider,{value:t?(null!=(n=r.colorInversionConfig)?n:vn.colorInversionConfig)[t]:void 0,children:e})}function jn(e){return an("MuiCard",e)}ln("MuiCard",["root","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantOutlined","variantSoft","variantSolid","sizeSm","sizeMd","sizeLg","horizontal","vertical"]);const Vn=({theme:e,ownerState:t},n,r)=>{let o,a={};if(t.sx){!function t(n){"function"==typeof n?t(n(e)):Array.isArray(n)?n.forEach((e=>{"boolean"!=typeof e&&t(e)})):"object"==typeof n&&(a=l({},a,n))}(t.sx);const r=a[n];if("string"==typeof r||"number"==typeof r)if("borderRadius"===n){var i;if("number"==typeof r)return`${r}px`;o=(null==(i=e.vars)?void 0:i.radius[r])||r}else o=r;"function"==typeof r&&(o=r(e))}return o||r};function Hn(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function Un(...e){return r.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{Hn(e,t)}))}),e)}function Wn(e,t){return"function"==typeof e?e(t):e}function Kn(e){if(void 0===e)return{};const t={};return Object.keys(e).filter((t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t]))).forEach((n=>{t[n]=e[n]})),t}function qn(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:r,externalForwardedProps:o,className:a}=e;if(!t){const e=u(null==o?void 0:o.className,null==r?void 0:r.className,a,null==n?void 0:n.className),t=l({},null==n?void 0:n.style,null==o?void 0:o.style,null==r?void 0:r.style),i=l({},n,o,r);return e.length>0&&(i.className=e),Object.keys(t).length>0&&(i.style=t),{props:i,internalRef:void 0}}const i=function(e,t=[]){if(void 0===e)return{};const n={};return Object.keys(e).filter((n=>n.match(/^on[A-Z]/)&&"function"==typeof e[n]&&!t.includes(n))).forEach((t=>{n[t]=e[t]})),n}(l({},o,r)),s=Kn(r),c=Kn(o),d=t(i),f=u(null==d?void 0:d.className,null==n?void 0:n.className,a,null==o?void 0:o.className,null==r?void 0:r.className),p=l({},null==d?void 0:d.style,null==n?void 0:n.style,null==o?void 0:o.style,null==r?void 0:r.style),h=l({},d,n,c,s);return f.length>0&&(h.className=f),Object.keys(p).length>0&&(h.style=p),{props:h,internalRef:d.ref}}function Gn(e){return"string"==typeof e}function Qn(e,t,n){return void 0===e||Gn(e)?t:l({},t,{ownerState:l({},t.ownerState,n)})}const Yn=["className","elementType","ownerState","externalForwardedProps","getSlotOwnerState","internalForwardedProps"],Xn=["component","slots","slotProps"],Jn=["component"],Zn=["disableColorInversion"];function er(e,t){const{className:n,elementType:r,ownerState:o,externalForwardedProps:a,getSlotOwnerState:s,internalForwardedProps:u}=t,c=i(t,Yn),{component:d,slots:f={[e]:void 0},slotProps:p={[e]:void 0}}=a,h=i(a,Xn),m=f[e]||r,g=Wn(p[e],o),v=qn(l({className:n},c,{externalForwardedProps:"root"===e?h:void 0,externalSlotProps:g})),{props:{component:y},internalRef:b}=v,w=i(v.props,Jn),S=Un(b,null==g?void 0:g.ref,t.ref),x=s?s(w):{},{disableColorInversion:k=!1}=x,C=i(x,Zn),E=l({},o,C),{getColor:_}=Mn(E.variant);var $;"root"===e?E.color=null!=($=w.color)?$:o.color:k||(E.color=_(w.color,E.color));const P="root"===e?y||d:y,T=Qn(m,l({},"root"===e&&!d&&!f[e]&&u,"root"!==e&&!f[e]&&u,w,P&&{as:P},{ref:S}),E);return Object.keys(C).forEach((e=>{delete T[e]})),[m,T]}const tr=["className","color","component","invertedColors","size","variant","children","orientation","slots","slotProps"],nr=Fn("div",{name:"JoyCard",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n,r;return[l({"--Card-childRadius":"max((var(--Card-radius) - var(--variant-borderWidth, 0px)) - var(--Card-padding), min(var(--Card-padding) / 2, (var(--Card-radius) - var(--variant-borderWidth, 0px)) / 2))","--AspectRatio-radius":"var(--Card-childRadius)","--unstable_actionMargin":"calc(-1 * var(--variant-borderWidth, 0px))","--unstable_actionRadius":Vn({theme:e,ownerState:t},"borderRadius","var(--Card-radius)"),"--CardCover-radius":"calc(var(--Card-radius) - var(--variant-borderWidth, 0px))","--CardOverflow-offset":"calc(-1 * var(--Card-padding))","--CardOverflow-radius":"calc(var(--Card-radius) - var(--variant-borderWidth, 0px))","--Divider-inset":"calc(-1 * var(--Card-padding))"},"sm"===t.size&&{"--Card-radius":e.vars.radius.sm,"--Card-padding":"0.5rem",gap:"0.375rem 0.5rem"},"md"===t.size&&{"--Card-radius":e.vars.radius.md,"--Card-padding":"1rem",gap:"0.75rem 1rem"},"lg"===t.size&&{"--Card-radius":e.vars.radius.lg,"--Card-padding":"1.5rem",gap:"1rem 1.5rem"},{padding:"var(--Card-padding)",borderRadius:"var(--Card-radius)",boxShadow:e.shadow.sm,backgroundColor:e.vars.palette.background.surface,fontFamily:e.vars.fontFamily.body,fontSize:e.vars.fontSize.md,position:"relative",display:"flex",flexDirection:"horizontal"===t.orientation?"row":"column"}),null==(n=e.variants[t.variant])?void 0:n[t.color],"context"!==t.color&&t.invertedColors&&(null==(r=e.colorInversion[t.variant])?void 0:r[t.color])]})),rr=r.forwardRef((function(e,t){const n=bn({props:e,name:"JoyCard"}),{className:o,color:a="neutral",component:s="div",invertedColors:d=!1,size:h="md",variant:m="plain",children:g,orientation:v="vertical",slots:y={},slotProps:b={}}=n,w=i(n,tr),{getColor:S}=Mn(m),x=l({},n,{color:S(e.color,a),component:s,orientation:v,size:h,variant:m}),k=(e=>{const{size:t,variant:n,color:r,orientation:o}=e;return c({root:["root",o,n&&`variant${f(n)}`,r&&`color${f(r)}`,t&&`size${f(t)}`]},jn,{})})(x),C=l({},w,{component:s,slots:y,slotProps:b}),[E,_]=er("root",{ref:t,className:u(k.root,o),elementType:nr,externalForwardedProps:C,ownerState:x}),$=(0,Ln.jsx)(E,l({},_,{children:r.Children.map(g,((e,t)=>{if(!r.isValidElement(e))return e;const n={};if(p(e,["Divider"])){n.inset="inset"in e.props?e.props.inset:"context";const t="vertical"===v?"horizontal":"vertical";n.orientation="orientation"in e.props?e.props.orientation:t}return p(e,["CardOverflow"])&&("horizontal"===v&&(n["data-parent"]="Card-horizontal"),"vertical"===v&&(n["data-parent"]="Card-vertical")),0===t&&(n["data-first-child"]=""),t===r.Children.count(g)-1&&(n["data-last-child"]=""),r.cloneElement(e,n)}))}));return d?(0,Ln.jsx)(zn,{variant:m,children:$}):$}));function or(e){return an("MuiCardContent",e)}function ar(e){return an("MuiCardOverflow",e)}ln("MuiCardContent",["root"]);const ir=ln("MuiCardOverflow",["root","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantOutlined","variantSoft","variantSolid"]),lr=["className","component","children","orientation","slots","slotProps"],sr=Fn("div",{name:"JoyCardContent",slot:"Root",overridesResolver:(e,t)=>t.root})((({ownerState:e})=>({display:"flex",flexDirection:"horizontal"===e.orientation?"row":"column",flex:1,zIndex:1,columnGap:"calc(0.75 * var(--Card-padding))",padding:"var(--unstable_padding)",[`.${ir.root} > &`]:{"--unstable_padding":"calc(var(--Card-padding) * 0.75) 0px"}}))),ur=r.forwardRef((function(e,t){const n=bn({props:e,name:"JoyCardContent"}),{className:r,component:o="div",children:a,orientation:s="vertical",slots:d={},slotProps:f={}}=n,p=l({},i(n,lr),{component:o,slots:d,slotProps:f}),h=l({},n,{component:o,orientation:s}),m=c({root:["root"]},or,{}),[g,v]=er("root",{ref:t,className:u(m.root,r),elementType:sr,externalForwardedProps:p,ownerState:h});return(0,Ln.jsx)(g,l({},v,{children:a}))})),cr=ln("MuiButton",["root","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantOutlined","variantSoft","variantSolid","focusVisible","disabled","sizeSm","sizeMd","sizeLg","fullWidth","startDecorator","endDecorator","loading","loadingIndicatorCenter"]),dr=["className","component","children","color","variant","slots","slotProps"],fr=Fn("div",{name:"JoyCardOverflow",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n;const r="calc(var(--CardOverflow-radius) - var(--variant-borderWidth, 0px))";return l({alignSelf:"stretch",borderRadius:"var(--CardOverflow-radius)",position:"relative"},"Card-horizontal"===t["data-parent"]&&l({"--AspectRatio-margin":"calc(-1 * var(--Card-padding)) 0px",marginTop:"var(--CardOverflow-offset)",marginBottom:"var(--CardOverflow-offset)",padding:"var(--Card-padding) 0px"},void 0!==t["data-first-child"]&&{"--AspectRatio-radius":`${r} 0 0 ${r}`,borderTopRightRadius:0,borderBottomRightRadius:0,marginLeft:"var(--CardOverflow-offset)"},void 0!==t["data-last-child"]&&{"--AspectRatio-radius":`0 ${r} ${r} 0`,borderTopLeftRadius:0,borderBottomLeftRadius:0,marginRight:"var(--CardOverflow-offset)"},void 0!==t["data-first-child"]&&void 0!==t["data-last-child"]&&{"--AspectRatio-radius":r},{[`& > .${cr.root}:only-child`]:{height:"calc(100% + -2 * var(--CardOverflow-offset))","--Button-margin":"var(--CardOverflow-offset) 0","--Button-radius":"0 var(--CardOverflow-radius) var(--CardOverflow-radius) 0"}}),"Card-vertical"===t["data-parent"]&&l({"--AspectRatio-margin":"0px calc(-1 * var(--Card-padding))",marginLeft:"var(--CardOverflow-offset)",marginRight:"var(--CardOverflow-offset)",padding:"0px var(--Card-padding)"},void 0!==t["data-first-child"]&&{"--AspectRatio-radius":`${r} ${r} 0 0`,borderBottomLeftRadius:0,borderBottomRightRadius:0,marginTop:"var(--CardOverflow-offset)"},void 0!==t["data-last-child"]&&{"--AspectRatio-radius":`0 0 ${r} ${r}`,borderTopLeftRadius:0,borderTopRightRadius:0,marginBottom:"var(--CardOverflow-offset)"},void 0!==t["data-first-child"]&&void 0!==t["data-last-child"]&&{"--AspectRatio-radius":r},{[`& > .${cr.root}:only-child`]:{zIndex:1,width:"calc(100% + -2 * var(--CardOverflow-offset))","--Button-margin":"0 var(--CardOverflow-offset)","--Button-radius":"0 0 var(--CardOverflow-radius) var(--CardOverflow-radius)"}}),null==(n=e.variants[t.variant])?void 0:n[t.color])})),pr=r.forwardRef((function(e,t){const n=bn({props:e,name:"JoyCardOverflow"}),{className:r,component:o="div",children:a,color:s="neutral",variant:d="plain",slots:p={},slotProps:h={}}=n,m=i(n,dr),{getColor:g}=Mn(d),v=l({},n,{component:o,color:g(e.color,s),variant:d}),y=(e=>{const{variant:t,color:n}=e;return c({root:["root",t&&`variant${f(t)}`,n&&`color${f(n)}`]},ar,{})})(v),b=l({},m,{component:o,slots:p,slotProps:h}),[w,S]=er("root",{ref:t,className:u(y.root,r),elementType:fr,externalForwardedProps:b,ownerState:v});return(0,Ln.jsx)(w,l({},S,{children:a}))}));pr.muiName="CardOverflow";const hr=pr,mr=["sx"];function gr(e){return an("MuiTypography",e)}ln("MuiTypography",["root","h1","h2","h3","h4","h5","h6","body1","body2","body3","noWrap","gutterBottom","startDecorator","endDecorator","colorPrimary","colorNeutral","colorDanger","colorInfo","colorSuccess","colorWarning","colorContext","variantPlain","variantOutlined","variantSoft","variantSolid"]);const vr=["color","textColor"],yr=["component","gutterBottom","noWrap","level","levelMapping","children","endDecorator","startDecorator","variant","slots","slotProps"],br=r.createContext(!1),wr=r.createContext(!1),Sr=Fn("span",{name:"JoyTypography",slot:"StartDecorator",overridesResolver:(e,t)=>t.startDecorator})((({ownerState:e})=>{var t;return l({display:"inline-flex",marginInlineEnd:"clamp(4px, var(--Typography-gap, 0.375em), 0.75rem)"},"string"!=typeof e.startDecorator&&("flex-start"===e.alignItems||"flex-start"===(null==(t=e.sx)?void 0:t.alignItems))&&{marginTop:"2px"})})),xr=Fn("span",{name:"JoyTypography",slot:"endDecorator",overridesResolver:(e,t)=>t.endDecorator})((({ownerState:e})=>{var t;return l({display:"inline-flex",marginInlineStart:"clamp(4px, var(--Typography-gap, 0.375em), 0.75rem)"},"string"!=typeof e.endDecorator&&("flex-start"===e.alignItems||"flex-start"===(null==(t=e.sx)?void 0:t.alignItems))&&{marginTop:"2px"})})),kr=Fn("span",{name:"JoyTypography",slot:"Root",overridesResolver:(e,t)=>t.root})((({theme:e,ownerState:t})=>{var n,r,o,a;return l({"--Icon-fontSize":"1.25em",margin:"var(--Typography-margin, 0px)"},t.nesting?{display:"inline"}:{fontFamily:e.vars.fontFamily.body,display:"block"},(t.startDecorator||t.endDecorator)&&l({display:"flex",alignItems:"center"},t.nesting&&l({display:"inline-flex"},t.startDecorator&&{verticalAlign:"bottom"})),t.level&&"inherit"!==t.level&&e.typography[t.level],{fontSize:`var(--Typography-fontSize, ${t.level&&"inherit"!==t.level&&null!=(n=null==(r=e.typography[t.level])?void 0:r.fontSize)?n:"inherit"})`},t.noWrap&&{overflow:"hidden",textOverflow:"ellipsis",whiteSpace:"nowrap"},t.gutterBottom&&{marginBottom:"0.35em"},t.color&&"context"!==t.color&&{color:`rgba(${null==(o=e.vars.palette[t.color])?void 0:o.mainChannel} / 1)`},t.variant&&l({borderRadius:e.vars.radius.xs,paddingBlock:"min(0.15em, 4px)",paddingInline:"0.375em"},!t.nesting&&{marginInline:"-0.375em"},null==(a=e.variants[t.variant])?void 0:a[t.color]))})),Cr={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",display1:"h1",display2:"h2",body1:"p",body2:"p",body3:"span",body4:"span",body5:"span",inherit:"p"},Er=r.forwardRef((function(e,t){const n=bn({props:e,name:"JoyTypography"}),{color:o,textColor:a}=n,s=i(n,vr),u=r.useContext(br),d=r.useContext(wr),p=function(e){const{sx:t}=e,n=i(e,mr),{systemProps:r,otherProps:o}=(e=>{var t,n;const r={systemProps:{},otherProps:{}},o=null!=(t=null==e||null==(n=e.theme)?void 0:n.unstable_sxConfig)?t:he;return Object.keys(e).forEach((t=>{o[t]?r.systemProps[t]=e[t]:r.otherProps[t]=e[t]})),r})(n);let a;return a=Array.isArray(t)?[r,...t]:"function"==typeof t?(...e)=>{const n=t(...e);return g(n)?l({},r,n):r}:l({},r,t),l({},o,{sx:a})}(l({},s,{color:a})),{component:h,gutterBottom:m=!1,noWrap:v=!1,level:y="body1",levelMapping:b={h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",body1:"p",body2:"p",body3:"p",inherit:"p"},children:w,endDecorator:S,startDecorator:x,variant:k,slots:C={},slotProps:E={}}=p,_=i(p,yr),{getColor:$}=Mn(k),P=$(e.color,k?null!=o?o:"neutral":o),T=u||d?e.level||"inherit":y,O=h||(u?"span":b[T]||Cr[T]||"span"),R=l({},p,{level:T,component:O,color:P,gutterBottom:m,noWrap:v,nesting:u,variant:k}),A=(e=>{const{gutterBottom:t,noWrap:n,level:r,color:o,variant:a}=e;return c({root:["root",r,t&&"gutterBottom",n&&"noWrap",o&&`color${f(o)}`,a&&`variant${f(a)}`],startDecorator:["startDecorator"],endDecorator:["endDecorator"]},gr,{})})(R),D=l({},_,{component:O,slots:C,slotProps:E}),[I,N]=er("root",{ref:t,className:A.root,elementType:kr,externalForwardedProps:D,ownerState:R}),[F,L]=er("startDecorator",{className:A.startDecorator,elementType:Sr,externalForwardedProps:D,ownerState:R}),[B,M]=er("endDecorator",{className:A.endDecorator,elementType:xr,externalForwardedProps:D,ownerState:R});return(0,Ln.jsx)(br.Provider,{value:!0,children:(0,Ln.jsxs)(I,l({},N,{children:[x&&(0,Ln.jsx)(F,l({},L,{children:x})),w,S&&(0,Ln.jsx)(B,l({},M,{children:S}))]}))})}));function _r(e){var t=e.character;return r.createElement(rr,{orientation:"horizontal",variant:"outlined",sx:{width:150,bgcolor:"#404040",border:"none",padding:0}},r.createElement("div",{className:"w-full flex flex-row items-center justify-between"},r.createElement(hr,{sx:{width:"30%"}},r.createElement("img",{className:"w-16 h-auto rounded-full",src:t.img,loading:"lazy"})),r.createElement(ur,null,r.createElement(Er,{fontWeight:"md",mb:.5},r.createElement("span",{className:"text-white"},t.name)))))}function $r(e){return e&&e.ownerDocument||document}n(326),n.p,n.p,n.p,n.p,n(864);const Pr=$r;const Tr={black:"#000",white:"#fff"},Or={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},Rr={50:"#f3e5f5",100:"#e1bee7",200:"#ce93d8",300:"#ba68c8",400:"#ab47bc",500:"#9c27b0",600:"#8e24aa",700:"#7b1fa2",800:"#6a1b9a",900:"#4a148c",A100:"#ea80fc",A200:"#e040fb",A400:"#d500f9",A700:"#aa00ff"},Ar={50:"#ffebee",100:"#ffcdd2",200:"#ef9a9a",300:"#e57373",400:"#ef5350",500:"#f44336",600:"#e53935",700:"#d32f2f",800:"#c62828",900:"#b71c1c",A100:"#ff8a80",A200:"#ff5252",A400:"#ff1744",A700:"#d50000"},Dr={50:"#fff3e0",100:"#ffe0b2",200:"#ffcc80",300:"#ffb74d",400:"#ffa726",500:"#ff9800",600:"#fb8c00",700:"#f57c00",800:"#ef6c00",900:"#e65100",A100:"#ffd180",A200:"#ffab40",A400:"#ff9100",A700:"#ff6d00"},Ir={50:"#e3f2fd",100:"#bbdefb",200:"#90caf9",300:"#64b5f6",400:"#42a5f5",500:"#2196f3",600:"#1e88e5",700:"#1976d2",800:"#1565c0",900:"#0d47a1",A100:"#82b1ff",A200:"#448aff",A400:"#2979ff",A700:"#2962ff"},Nr={50:"#e1f5fe",100:"#b3e5fc",200:"#81d4fa",300:"#4fc3f7",400:"#29b6f6",500:"#03a9f4",600:"#039be5",700:"#0288d1",800:"#0277bd",900:"#01579b",A100:"#80d8ff",A200:"#40c4ff",A400:"#00b0ff",A700:"#0091ea"},Fr={50:"#e8f5e9",100:"#c8e6c9",200:"#a5d6a7",300:"#81c784",400:"#66bb6a",500:"#4caf50",600:"#43a047",700:"#388e3c",800:"#2e7d32",900:"#1b5e20",A100:"#b9f6ca",A200:"#69f0ae",A400:"#00e676",A700:"#00c853"},Lr=["mode","contrastThreshold","tonalOffset"],Br={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:Tr.white,default:Tr.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},Mr={text:{primary:Tr.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:Tr.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function zr(e,t,n,r){const o=r.light||r,a=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=jt(e),t=zt(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return Ht(e)}(e.main,o):"dark"===t&&(e.dark=function(e,t){if(e=jt(e),t=zt(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return Ht(e)}(e.main,a)))}const jr=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],Vr={textTransform:"uppercase"},Hr='"Roboto", "Helvetica", "Arial", sans-serif';function Ur(e,t){const n="function"==typeof t?t(e):t,{fontFamily:r=Hr,fontSize:o=14,fontWeightLight:a=300,fontWeightRegular:s=400,fontWeightMedium:u=500,fontWeightBold:c=700,htmlFontSize:d=16,allVariants:f,pxToRem:p}=n,h=i(n,jr),m=o/14,g=p||(e=>e/d*m+"rem"),v=(e,t,n,o,a)=>{return l({fontFamily:r,fontWeight:e,fontSize:g(t),lineHeight:n},r===Hr?{letterSpacing:(i=o/t,Math.round(1e5*i)/1e5+"em")}:{},a,f);var i},b={h1:v(a,96,1.167,-1.5),h2:v(a,60,1.2,-.5),h3:v(s,48,1.167,0),h4:v(s,34,1.235,.25),h5:v(s,24,1.334,0),h6:v(u,20,1.6,.15),subtitle1:v(s,16,1.75,.15),subtitle2:v(u,14,1.57,.1),body1:v(s,16,1.5,.15),body2:v(s,14,1.43,.15),button:v(u,14,1.75,.4,Vr),caption:v(s,12,1.66,.4),overline:v(s,12,2.66,1,Vr),inherit:{fontFamily:"inherit",fontWeight:"inherit",fontSize:"inherit",lineHeight:"inherit",letterSpacing:"inherit"}};return y(l({htmlFontSize:d,pxToRem:g,fontFamily:r,fontSize:o,fontWeightLight:a,fontWeightRegular:s,fontWeightMedium:u,fontWeightBold:c},b),h,{clone:!1})}function Wr(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const Kr=["none",Wr(0,2,1,-1,0,1,1,0,0,1,3,0),Wr(0,3,1,-2,0,2,2,0,0,1,5,0),Wr(0,3,3,-2,0,3,4,0,0,1,8,0),Wr(0,2,4,-1,0,4,5,0,0,1,10,0),Wr(0,3,5,-1,0,5,8,0,0,1,14,0),Wr(0,3,5,-1,0,6,10,0,0,1,18,0),Wr(0,4,5,-2,0,7,10,1,0,2,16,1),Wr(0,5,5,-3,0,8,10,1,0,3,14,2),Wr(0,5,6,-3,0,9,12,1,0,3,16,2),Wr(0,6,6,-3,0,10,14,1,0,4,18,3),Wr(0,6,7,-4,0,11,15,1,0,4,20,3),Wr(0,7,8,-4,0,12,17,2,0,5,22,4),Wr(0,7,8,-4,0,13,19,2,0,5,24,4),Wr(0,7,9,-4,0,14,21,2,0,5,26,4),Wr(0,8,9,-5,0,15,22,2,0,6,28,5),Wr(0,8,10,-5,0,16,24,2,0,6,30,5),Wr(0,8,11,-5,0,17,26,2,0,6,32,5),Wr(0,9,11,-5,0,18,28,2,0,7,34,6),Wr(0,9,12,-6,0,19,29,2,0,7,36,6),Wr(0,10,13,-6,0,20,31,3,0,8,38,7),Wr(0,10,13,-6,0,21,33,3,0,8,40,7),Wr(0,10,14,-6,0,22,35,3,0,8,42,7),Wr(0,11,14,-7,0,23,36,3,0,9,44,8),Wr(0,11,15,-7,0,24,38,3,0,9,46,8)],qr=["duration","easing","delay"],Gr={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},Qr={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function Yr(e){return`${Math.round(e)}ms`}function Xr(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function Jr(e){const t=l({},Gr,e.easing),n=l({},Qr,e.duration);return l({getAutoHeightDuration:Xr,create:(e=["all"],r={})=>{const{duration:o=n.standard,easing:a=t.easeInOut,delay:l=0}=r;return i(r,qr),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:Yr(o)} ${a} ${"string"==typeof l?l:Yr(l)}`)).join(",")}},e,{easing:t,duration:n})}const Zr={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},eo=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const to=function(e={},...t){const{mixins:n={},palette:r={},transitions:o={},typography:a={}}=e,s=i(e,eo);if(e.vars)throw new Error(d(18));const u=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:r=.2}=e,o=i(e,Lr),a=e.primary||function(e="light"){return"dark"===e?{main:Ir[200],light:Ir[50],dark:Ir[400]}:{main:Ir[700],light:Ir[400],dark:Ir[800]}}(t),s=e.secondary||function(e="light"){return"dark"===e?{main:Rr[200],light:Rr[50],dark:Rr[400]}:{main:Rr[500],light:Rr[300],dark:Rr[700]}}(t),u=e.error||function(e="light"){return"dark"===e?{main:Ar[500],light:Ar[300],dark:Ar[700]}:{main:Ar[700],light:Ar[400],dark:Ar[800]}}(t),c=e.info||function(e="light"){return"dark"===e?{main:Nr[400],light:Nr[300],dark:Nr[700]}:{main:Nr[700],light:Nr[500],dark:Nr[900]}}(t),f=e.success||function(e="light"){return"dark"===e?{main:Fr[400],light:Fr[300],dark:Fr[700]}:{main:Fr[800],light:Fr[500],dark:Fr[900]}}(t),p=e.warning||function(e="light"){return"dark"===e?{main:Dr[400],light:Dr[300],dark:Dr[700]}:{main:"#ed6c02",light:Dr[500],dark:Dr[900]}}(t);function h(e){const t=function(e,t){const n=Ut(e),r=Ut(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,Mr.text.primary)>=n?Mr.text.primary:Br.text.primary;return t}const m=({color:e,name:t,mainShade:n=500,lightShade:o=300,darkShade:a=700})=>{if(!(e=l({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(d(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(d(12,t?` (${t})`:"",JSON.stringify(e.main)));return zr(e,"light",o,r),zr(e,"dark",a,r),e.contrastText||(e.contrastText=h(e.main)),e},g={dark:Mr,light:Br};return y(l({common:l({},Tr),mode:t,primary:m({color:a,name:"primary"}),secondary:m({color:s,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:m({color:u,name:"error"}),warning:m({color:p,name:"warning"}),info:m({color:c,name:"info"}),success:m({color:f,name:"success"}),grey:Or,contrastThreshold:n,getContrastText:h,augmentColor:m,tonalOffset:r},g[t]),o)}(r),c=ye(e);let f=y(c,{mixins:(p=c.breakpoints,h=n,l({toolbar:{minHeight:56,[p.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[p.up("sm")]:{minHeight:64}}},h)),palette:u,shadows:Kr.slice(),typography:Ur(u,a),transitions:Jr(o),zIndex:l({},Zr)});var p,h;return f=y(f,s),f=t.reduce(((e,t)=>y(e,t)),f),f.unstable_sxConfig=l({},he,null==s?void 0:s.unstable_sxConfig),f.unstable_sx=function(e){return ge({sx:e,theme:this})},f}(),no="$$material",ro=e=>An(e)&&"classes"!==e,oo=Nn({themeId:no,defaultTheme:to,rootShouldForwardProp:ro});function ao({props:e,name:t}){return Bt({props:e,name:t,defaultTheme:to,themeId:no})}const io=r.createContext({});function lo(e){return rn("MuiList",e)}on("MuiList",["root","padding","dense","subheader"]);const so=["children","className","component","dense","disablePadding","subheader"],uo=oo("ul",{name:"MuiList",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.disablePadding&&t.padding,n.dense&&t.dense,n.subheader&&t.subheader]}})((({ownerState:e})=>l({listStyle:"none",margin:0,padding:0,position:"relative"},!e.disablePadding&&{paddingTop:8,paddingBottom:8},e.subheader&&{paddingTop:0}))),co=r.forwardRef((function(e,t){const n=ao({props:e,name:"MuiList"}),{children:o,className:a,component:s="ul",dense:d=!1,disablePadding:f=!1,subheader:p}=n,h=i(n,so),m=r.useMemo((()=>({dense:d})),[d]),g=l({},n,{component:s,dense:d,disablePadding:f}),v=(e=>{const{classes:t,disablePadding:n,dense:r,subheader:o}=e;return c({root:["root",!n&&"padding",r&&"dense",o&&"subheader"]},lo,t)})(g);return(0,Ln.jsx)(io.Provider,{value:m,children:(0,Ln.jsxs)(uo,l({as:s,className:u(v.root,a),ref:t,ownerState:g},h,{children:[p,o]}))})}));function fo(e){const t=e.documentElement.clientWidth;return Math.abs(window.innerWidth-t)}const po=fo,ho=Un,mo="undefined"!=typeof window?r.useLayoutEffect:r.useEffect,go=mo,vo=["actions","autoFocus","autoFocusItem","children","className","disabledItemsFocusable","disableListWrap","onKeyDown","variant"];function yo(e,t,n){return e===t?e.firstChild:t&&t.nextElementSibling?t.nextElementSibling:n?null:e.firstChild}function bo(e,t,n){return e===t?n?e.firstChild:e.lastChild:t&&t.previousElementSibling?t.previousElementSibling:n?null:e.lastChild}function wo(e,t){if(void 0===t)return!0;let n=e.innerText;return void 0===n&&(n=e.textContent),n=n.trim().toLowerCase(),0!==n.length&&(t.repeating?n[0]===t.keys[0]:0===n.indexOf(t.keys.join("")))}function So(e,t,n,r,o,a){let i=!1,l=o(e,t,!!t&&n);for(;l;){if(l===e.firstChild){if(i)return!1;i=!0}const t=!r&&(l.disabled||"true"===l.getAttribute("aria-disabled"));if(l.hasAttribute("tabindex")&&wo(l,a)&&!t)return l.focus(),!0;l=o(e,l,n)}return!1}const xo=r.forwardRef((function(e,t){const{actions:n,autoFocus:o=!1,autoFocusItem:a=!1,children:s,className:u,disabledItemsFocusable:c=!1,disableListWrap:d=!1,onKeyDown:f,variant:p="selectedMenu"}=e,h=i(e,vo),m=r.useRef(null),g=r.useRef({keys:[],repeating:!0,previousKeyMatched:!0,lastTime:null});go((()=>{o&&m.current.focus()}),[o]),r.useImperativeHandle(n,(()=>({adjustStyleForScrollbar:(e,t)=>{const n=!m.current.style.width;if(e.clientHeight<m.current.clientHeight&&n){const n=`${po(Pr(e))}px`;m.current.style["rtl"===t.direction?"paddingLeft":"paddingRight"]=n,m.current.style.width=`calc(100% + ${n})`}return m.current}})),[]);const v=ho(m,t);let y=-1;r.Children.forEach(s,((e,t)=>{r.isValidElement(e)?(e.props.disabled||("selectedMenu"===p&&e.props.selected||-1===y)&&(y=t),y===t&&(e.props.disabled||e.props.muiSkipListHighlight||e.type.muiSkipListHighlight)&&(y+=1,y>=s.length&&(y=-1))):y===t&&(y+=1,y>=s.length&&(y=-1))}));const b=r.Children.map(s,((e,t)=>{if(t===y){const t={};return a&&(t.autoFocus=!0),void 0===e.props.tabIndex&&"selectedMenu"===p&&(t.tabIndex=0),r.cloneElement(e,t)}return e}));return(0,Ln.jsx)(co,l({role:"menu",ref:v,className:u,onKeyDown:e=>{const t=m.current,n=e.key,r=Pr(t).activeElement;if("ArrowDown"===n)e.preventDefault(),So(t,r,d,c,yo);else if("ArrowUp"===n)e.preventDefault(),So(t,r,d,c,bo);else if("Home"===n)e.preventDefault(),So(t,null,d,c,yo);else if("End"===n)e.preventDefault(),So(t,null,d,c,bo);else if(1===n.length){const o=g.current,a=n.toLowerCase(),i=performance.now();o.keys.length>0&&(i-o.lastTime>500?(o.keys=[],o.repeating=!0,o.previousKeyMatched=!0):o.repeating&&a!==o.keys[0]&&(o.repeating=!1)),o.lastTime=i,o.keys.push(a);const l=r&&!o.repeating&&wo(r,o);o.previousKeyMatched&&(l||So(t,r,!1,c,yo,o))?e.preventDefault():o.previousKeyMatched=!1}f&&f(e)},tabIndex:o?0:-1},h,{children:b}))})),ko=["elementType","externalSlotProps","ownerState"];function Co(e){var t;const{elementType:n,externalSlotProps:r,ownerState:o}=e,a=i(e,ko),s=Wn(r,o),{props:u,internalRef:c}=qn(l({},a,{externalSlotProps:s}));return Qn(n,l({},u,{ref:Un(c,null==s?void 0:s.ref,null==(t=e.additionalProps)?void 0:t.ref)}),o)}function Eo(e){return $r(e).defaultView||window}const _o=Eo;function $o(e,t){return $o=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},$o(e,t)}function Po(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,$o(e,t)}var To=n(935);const Oo=r.createContext(null);var Ro="unmounted",Ao="exited",Do="entering",Io="entered",No="exiting",Fo=function(e){function t(t,n){var r;r=e.call(this,t,n)||this;var o,a=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?a?(o=Ao,r.appearStatus=Do):o=Io:o=t.unmountOnExit||t.mountOnEnter?Ro:Ao,r.state={status:o},r.nextCallback=null,r}Po(t,e),t.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Ro?{status:Ao}:null};var n=t.prototype;return n.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},n.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Do&&n!==Io&&(t=Do):n!==Do&&n!==Io||(t=No)}this.updateStatus(!1,t)},n.componentWillUnmount=function(){this.cancelNextCallback()},n.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},n.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===Do){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:To.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Ao&&this.setState({status:Ro})},n.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,o=this.props.nodeRef?[r]:[To.findDOMNode(this),r],a=o[0],i=o[1],l=this.getTimeouts(),s=r?l.appear:l.enter;e||n?(this.props.onEnter(a,i),this.safeSetState({status:Do},(function(){t.props.onEntering(a,i),t.onTransitionEnd(s,(function(){t.safeSetState({status:Io},(function(){t.props.onEntered(a,i)}))}))}))):this.safeSetState({status:Io},(function(){t.props.onEntered(a)}))},n.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:To.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:No},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:Ao},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:Ao},(function(){e.props.onExited(r)}))},n.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},n.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},n.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},n.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:To.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var o=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],a=o[0],i=o[1];this.props.addEndListener(a,i)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},n.render=function(){var e=this.state.status;if(e===Ro)return null;var t=this.props,n=t.children,o=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,i(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return r.createElement(Oo.Provider,{value:null},"function"==typeof n?n(e,o):r.cloneElement(r.Children.only(n),o))},t}(r.Component);function Lo(){}Fo.contextType=Oo,Fo.propTypes={},Fo.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Lo,onEntering:Lo,onEntered:Lo,onExit:Lo,onExiting:Lo,onExited:Lo},Fo.UNMOUNTED=Ro,Fo.EXITED=Ao,Fo.ENTERING=Do,Fo.ENTERED=Io,Fo.EXITING=No;const Bo=Fo;function Mo(){const e=Lt(to);return e[no]||e}const zo=e=>e.scrollTop;function jo(e,t){var n,r;const{timeout:o,easing:a,style:i={}}=e;return{duration:null!=(n=i.transitionDuration)?n:"number"==typeof o?o:o[t.mode]||0,easing:null!=(r=i.transitionTimingFunction)?r:"object"==typeof a?a[t.mode]:a,delay:i.transitionDelay}}const Vo=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function Ho(e){return`scale(${e}, ${e**2})`}const Uo={entering:{opacity:1,transform:Ho(1)},entered:{opacity:1,transform:"none"}},Wo="undefined"!=typeof navigator&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),Ko=r.forwardRef((function(e,t){const{addEndListener:n,appear:o=!0,children:a,easing:s,in:u,onEnter:c,onEntered:d,onEntering:f,onExit:p,onExited:h,onExiting:m,style:g,timeout:v="auto",TransitionComponent:y=Bo}=e,b=i(e,Vo),w=r.useRef(),S=r.useRef(),x=Mo(),k=r.useRef(null),C=ho(k,a.ref,t),E=e=>t=>{if(e){const n=k.current;void 0===t?e(n):e(n,t)}},_=E(f),$=E(((e,t)=>{zo(e);const{duration:n,delay:r,easing:o}=jo({style:g,timeout:v,easing:s},{mode:"enter"});let a;"auto"===v?(a=x.transitions.getAutoHeightDuration(e.clientHeight),S.current=a):a=n,e.style.transition=[x.transitions.create("opacity",{duration:a,delay:r}),x.transitions.create("transform",{duration:Wo?a:.666*a,delay:r,easing:o})].join(","),c&&c(e,t)})),P=E(d),T=E(m),O=E((e=>{const{duration:t,delay:n,easing:r}=jo({style:g,timeout:v,easing:s},{mode:"exit"});let o;"auto"===v?(o=x.transitions.getAutoHeightDuration(e.clientHeight),S.current=o):o=t,e.style.transition=[x.transitions.create("opacity",{duration:o,delay:n}),x.transitions.create("transform",{duration:Wo?o:.666*o,delay:Wo?n:n||.333*o,easing:r})].join(","),e.style.opacity=0,e.style.transform=Ho(.75),p&&p(e)})),R=E(h);return r.useEffect((()=>()=>{clearTimeout(w.current)}),[]),(0,Ln.jsx)(y,l({appear:o,in:u,nodeRef:k,onEnter:$,onEntered:P,onEntering:_,onExit:O,onExited:R,onExiting:T,addEndListener:e=>{"auto"===v&&(w.current=setTimeout(e,S.current||0)),n&&n(k.current,e)},timeout:"auto"===v?null:v},b,{children:(e,t)=>r.cloneElement(a,l({style:l({opacity:0,transform:Ho(.75),visibility:"exited"!==e||u?void 0:"hidden"},Uo[e],g,a.props.style),ref:C},t))}))}));Ko.muiSupportAuto=!0;const qo=Ko;function Go(e){const t=r.useRef(e);return mo((()=>{t.current=e})),r.useCallback(((...e)=>(0,t.current)(...e)),[])}function Qo(...e){return e.reduce(((e,t)=>null==t?e:function(...n){e.apply(this,n),t.apply(this,n)}),(()=>{}))}const Yo=r.forwardRef((function(e,t){const{children:n,container:o,disablePortal:a=!1}=e,[i,l]=r.useState(null),s=Un(r.isValidElement(n)?n.ref:null,t);if(mo((()=>{a||l(function(e){return"function"==typeof e?e():e}(o)||document.body)}),[o,a]),mo((()=>{if(i&&!a)return Hn(t,i),()=>{Hn(t,null)}}),[t,i,a]),a){if(r.isValidElement(n)){const e={ref:s};return r.cloneElement(n,e)}return(0,Ln.jsx)(r.Fragment,{children:n})}return(0,Ln.jsx)(r.Fragment,{children:i?To.createPortal(n,i):i})}));function Xo(e,t){t?e.setAttribute("aria-hidden","true"):e.removeAttribute("aria-hidden")}function Jo(e){return parseInt(Eo(e).getComputedStyle(e).paddingRight,10)||0}function Zo(e,t,n,r,o){const a=[t,n,...r];[].forEach.call(e.children,(e=>{const t=-1===a.indexOf(e),n=!function(e){const t=-1!==["TEMPLATE","SCRIPT","STYLE","LINK","MAP","META","NOSCRIPT","PICTURE","COL","COLGROUP","PARAM","SLOT","SOURCE","TRACK"].indexOf(e.tagName),n="INPUT"===e.tagName&&"hidden"===e.getAttribute("type");return t||n}(e);t&&n&&Xo(e,o)}))}function ea(e,t){let n=-1;return e.some(((e,r)=>!!t(e)&&(n=r,!0))),n}const ta=["input","select","textarea","a[href]","button","[tabindex]","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'].join(",");function na(e){const t=[],n=[];return Array.from(e.querySelectorAll(ta)).forEach(((e,r)=>{const o=function(e){const t=parseInt(e.getAttribute("tabindex")||"",10);return Number.isNaN(t)?"true"===e.contentEditable||("AUDIO"===e.nodeName||"VIDEO"===e.nodeName||"DETAILS"===e.nodeName)&&null===e.getAttribute("tabindex")?0:e.tabIndex:t}(e);-1!==o&&function(e){return!(e.disabled||"INPUT"===e.tagName&&"hidden"===e.type||function(e){if("INPUT"!==e.tagName||"radio"!==e.type)return!1;if(!e.name)return!1;const t=t=>e.ownerDocument.querySelector(`input[type="radio"]${t}`);let n=t(`[name="${e.name}"]:checked`);return n||(n=t(`[name="${e.name}"]`)),n!==e}(e))}(e)&&(0===o?t.push(e):n.push({documentOrder:r,tabIndex:o,node:e}))})),n.sort(((e,t)=>e.tabIndex===t.tabIndex?e.documentOrder-t.documentOrder:e.tabIndex-t.tabIndex)).map((e=>e.node)).concat(t)}function ra(){return!0}const oa=function(e){const{children:t,disableAutoFocus:n=!1,disableEnforceFocus:o=!1,disableRestoreFocus:a=!1,getTabbable:i=na,isEnabled:l=ra,open:s}=e,u=r.useRef(!1),c=r.useRef(null),d=r.useRef(null),f=r.useRef(null),p=r.useRef(null),h=r.useRef(!1),m=r.useRef(null),g=Un(t.ref,m),v=r.useRef(null);r.useEffect((()=>{s&&m.current&&(h.current=!n)}),[n,s]),r.useEffect((()=>{if(!s||!m.current)return;const e=$r(m.current);return m.current.contains(e.activeElement)||(m.current.hasAttribute("tabIndex")||m.current.setAttribute("tabIndex","-1"),h.current&&m.current.focus()),()=>{a||(f.current&&f.current.focus&&(u.current=!0,f.current.focus()),f.current=null)}}),[s]),r.useEffect((()=>{if(!s||!m.current)return;const e=$r(m.current),t=t=>{const{current:n}=m;if(null!==n)if(e.hasFocus()&&!o&&l()&&!u.current){if(!n.contains(e.activeElement)){if(t&&p.current!==t.target||e.activeElement!==p.current)p.current=null;else if(null!==p.current)return;if(!h.current)return;let o=[];if(e.activeElement!==c.current&&e.activeElement!==d.current||(o=i(m.current)),o.length>0){var r,a;const e=Boolean((null==(r=v.current)?void 0:r.shiftKey)&&"Tab"===(null==(a=v.current)?void 0:a.key)),t=o[0],n=o[o.length-1];"string"!=typeof t&&"string"!=typeof n&&(e?n.focus():t.focus())}else n.focus()}}else u.current=!1},n=t=>{v.current=t,!o&&l()&&"Tab"===t.key&&e.activeElement===m.current&&t.shiftKey&&(u.current=!0,d.current&&d.current.focus())};e.addEventListener("focusin",t),e.addEventListener("keydown",n,!0);const r=setInterval((()=>{e.activeElement&&"BODY"===e.activeElement.tagName&&t(null)}),50);return()=>{clearInterval(r),e.removeEventListener("focusin",t),e.removeEventListener("keydown",n,!0)}}),[n,o,a,l,s,i]);const y=e=>{null===f.current&&(f.current=e.relatedTarget),h.current=!0};return(0,Ln.jsxs)(r.Fragment,{children:[(0,Ln.jsx)("div",{tabIndex:s?0:-1,onFocus:y,ref:c,"data-testid":"sentinelStart"}),r.cloneElement(t,{ref:g,onFocus:e=>{null===f.current&&(f.current=e.relatedTarget),h.current=!0,p.current=e.target;const n=t.props.onFocus;n&&n(e)}}),(0,Ln.jsx)("div",{tabIndex:s?0:-1,onFocus:y,ref:d,"data-testid":"sentinelEnd"})]})};function aa(e){return rn("MuiModal",e)}on("MuiModal",["root","hidden","backdrop"]);const ia={disableDefaultClasses:!1},la=r.createContext(ia),sa=["children","closeAfterTransition","container","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","manager","onBackdropClick","onClose","onKeyDown","open","onTransitionEnter","onTransitionExited","slotProps","slots"],ua=new class{constructor(){this.containers=void 0,this.modals=void 0,this.modals=[],this.containers=[]}add(e,t){let n=this.modals.indexOf(e);if(-1!==n)return n;n=this.modals.length,this.modals.push(e),e.modalRef&&Xo(e.modalRef,!1);const r=function(e){const t=[];return[].forEach.call(e.children,(e=>{"true"===e.getAttribute("aria-hidden")&&t.push(e)})),t}(t);Zo(t,e.mount,e.modalRef,r,!0);const o=ea(this.containers,(e=>e.container===t));return-1!==o?(this.containers[o].modals.push(e),n):(this.containers.push({modals:[e],container:t,restore:null,hiddenSiblings:r}),n)}mount(e,t){const n=ea(this.containers,(t=>-1!==t.modals.indexOf(e))),r=this.containers[n];r.restore||(r.restore=function(e,t){const n=[],r=e.container;if(!t.disableScrollLock){if(function(e){const t=$r(e);return t.body===e?Eo(e).innerWidth>t.documentElement.clientWidth:e.scrollHeight>e.clientHeight}(r)){const e=fo($r(r));n.push({value:r.style.paddingRight,property:"padding-right",el:r}),r.style.paddingRight=`${Jo(r)+e}px`;const t=$r(r).querySelectorAll(".mui-fixed");[].forEach.call(t,(t=>{n.push({value:t.style.paddingRight,property:"padding-right",el:t}),t.style.paddingRight=`${Jo(t)+e}px`}))}let e;if(r.parentNode instanceof DocumentFragment)e=$r(r).body;else{const t=r.parentElement,n=Eo(r);e="HTML"===(null==t?void 0:t.nodeName)&&"scroll"===n.getComputedStyle(t).overflowY?t:r}n.push({value:e.style.overflow,property:"overflow",el:e},{value:e.style.overflowX,property:"overflow-x",el:e},{value:e.style.overflowY,property:"overflow-y",el:e}),e.style.overflow="hidden"}return()=>{n.forEach((({value:e,el:t,property:n})=>{e?t.style.setProperty(n,e):t.style.removeProperty(n)}))}}(r,t))}remove(e,t=!0){const n=this.modals.indexOf(e);if(-1===n)return n;const r=ea(this.containers,(t=>-1!==t.modals.indexOf(e))),o=this.containers[r];if(o.modals.splice(o.modals.indexOf(e),1),this.modals.splice(n,1),0===o.modals.length)o.restore&&o.restore(),e.modalRef&&Xo(e.modalRef,t),Zo(o.container,e.mount,e.modalRef,o.hiddenSiblings,!1),this.containers.splice(r,1);else{const e=o.modals[o.modals.length-1];e.modalRef&&Xo(e.modalRef,!1)}return n}isTopModal(e){return this.modals.length>0&&this.modals[this.modals.length-1]===e}},ca=r.forwardRef((function(e,t){var n,o;const{children:a,closeAfterTransition:s=!1,container:u,disableAutoFocus:d=!1,disableEnforceFocus:f=!1,disableEscapeKeyDown:p=!1,disablePortal:h=!1,disableRestoreFocus:m=!1,disableScrollLock:g=!1,hideBackdrop:v=!1,keepMounted:y=!1,manager:b=ua,onBackdropClick:w,onClose:S,onKeyDown:x,open:k,onTransitionEnter:C,onTransitionExited:E,slotProps:_={},slots:$={}}=e,P=i(e,sa),T=b,[O,R]=r.useState(!k),A=r.useRef({}),D=r.useRef(null),I=r.useRef(null),N=Un(I,t),F=function(e){return!!e&&e.props.hasOwnProperty("in")}(a),L=null==(n=e["aria-hidden"])||n,B=()=>(A.current.modalRef=I.current,A.current.mountNode=D.current,A.current),M=()=>{T.mount(B(),{disableScrollLock:g}),I.current&&(I.current.scrollTop=0)},z=Go((()=>{const e=function(e){return"function"==typeof e?e():e}(u)||$r(D.current).body;T.add(B(),e),I.current&&M()})),j=r.useCallback((()=>T.isTopModal(B())),[T]),V=Go((e=>{D.current=e,e&&I.current&&(k&&j()?M():Xo(I.current,L))})),H=r.useCallback((()=>{T.remove(B(),L)}),[T,L]);r.useEffect((()=>()=>{H()}),[H]),r.useEffect((()=>{k?z():F&&s||H()}),[k,H,F,s,z]);const U=l({},e,{closeAfterTransition:s,disableAutoFocus:d,disableEnforceFocus:f,disableEscapeKeyDown:p,disablePortal:h,disableRestoreFocus:m,disableScrollLock:g,exited:O,hideBackdrop:v,keepMounted:y}),W=(e=>{const{open:t,exited:n}=e;return c({root:["root",!t&&n&&"hidden"],backdrop:["backdrop"]},function(e){const{disableDefaultClasses:t}=r.useContext(la);return n=>t?"":e(n)}(aa))})(U),K={};void 0===a.props.tabIndex&&(K.tabIndex="-1"),F&&(K.onEnter=Qo((()=>{R(!1),C&&C()}),a.props.onEnter),K.onExited=Qo((()=>{R(!0),E&&E(),s&&H()}),a.props.onExited));const q=null!=(o=$.root)?o:"div",G=Co({elementType:q,externalSlotProps:_.root,externalForwardedProps:P,additionalProps:{ref:N,role:"presentation",onKeyDown:e=>{x&&x(e),"Escape"===e.key&&j()&&(p||(e.stopPropagation(),S&&S(e,"escapeKeyDown")))}},className:W.root,ownerState:U}),Q=$.backdrop,Y=Co({elementType:Q,externalSlotProps:_.backdrop,additionalProps:{"aria-hidden":!0,onClick:e=>{e.target===e.currentTarget&&(w&&w(e),S&&S(e,"backdropClick"))},open:k},className:W.backdrop,ownerState:U});return y||k||F&&!O?(0,Ln.jsx)(Yo,{ref:V,container:u,disablePortal:h,children:(0,Ln.jsxs)(q,l({},G,{children:[!v&&Q?(0,Ln.jsx)(Q,l({},Y)):null,(0,Ln.jsx)(oa,{disableEnforceFocus:f,disableAutoFocus:d,disableRestoreFocus:m,isEnabled:j,open:k,children:r.cloneElement(a,K)})]}))}):null})),da=ca,fa=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"],pa={entering:{opacity:1},entered:{opacity:1}},ha=r.forwardRef((function(e,t){const n=Mo(),o={enter:n.transitions.duration.enteringScreen,exit:n.transitions.duration.leavingScreen},{addEndListener:a,appear:s=!0,children:u,easing:c,in:d,onEnter:f,onEntered:p,onEntering:h,onExit:m,onExited:g,onExiting:v,style:y,timeout:b=o,TransitionComponent:w=Bo}=e,S=i(e,fa),x=r.useRef(null),k=ho(x,u.ref,t),C=e=>t=>{if(e){const n=x.current;void 0===t?e(n):e(n,t)}},E=C(h),_=C(((e,t)=>{zo(e);const r=jo({style:y,timeout:b,easing:c},{mode:"enter"});e.style.webkitTransition=n.transitions.create("opacity",r),e.style.transition=n.transitions.create("opacity",r),f&&f(e,t)})),$=C(p),P=C(v),T=C((e=>{const t=jo({style:y,timeout:b,easing:c},{mode:"exit"});e.style.webkitTransition=n.transitions.create("opacity",t),e.style.transition=n.transitions.create("opacity",t),m&&m(e)})),O=C(g);return(0,Ln.jsx)(w,l({appear:s,in:d,nodeRef:x,onEnter:_,onEntered:$,onEntering:E,onExit:T,onExited:O,onExiting:P,addEndListener:e=>{a&&a(x.current,e)},timeout:b},S,{children:(e,t)=>r.cloneElement(u,l({style:l({opacity:0,visibility:"exited"!==e||d?void 0:"hidden"},pa[e],y,u.props.style),ref:k},t))}))})),ma=ha;function ga(e){return rn("MuiBackdrop",e)}on("MuiBackdrop",["root","invisible"]);const va=["children","className","component","components","componentsProps","invisible","open","slotProps","slots","TransitionComponent","transitionDuration"],ya=oo("div",{name:"MuiBackdrop",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.invisible&&t.invisible]}})((({ownerState:e})=>l({position:"fixed",display:"flex",alignItems:"center",justifyContent:"center",right:0,bottom:0,top:0,left:0,backgroundColor:"rgba(0, 0, 0, 0.5)",WebkitTapHighlightColor:"transparent"},e.invisible&&{backgroundColor:"transparent"}))),ba=r.forwardRef((function(e,t){var n,r,o;const a=ao({props:e,name:"MuiBackdrop"}),{children:s,className:d,component:f="div",components:p={},componentsProps:h={},invisible:m=!1,open:g,slotProps:v={},slots:y={},TransitionComponent:b=ma,transitionDuration:w}=a,S=i(a,va),x=l({},a,{component:f,invisible:m}),k=(e=>{const{classes:t,invisible:n}=e;return c({root:["root",n&&"invisible"]},ga,t)})(x),C=null!=(n=v.root)?n:h.root;return(0,Ln.jsx)(b,l({in:g,timeout:w},S,{children:(0,Ln.jsx)(ya,l({"aria-hidden":!0},C,{as:null!=(r=null!=(o=y.root)?o:p.Root)?r:f,className:u(k.root,d,null==C?void 0:C.className),ownerState:l({},x,null==C?void 0:C.ownerState),classes:k,ref:t,children:s}))}))})),wa=["BackdropComponent","BackdropProps","classes","className","closeAfterTransition","children","container","component","components","componentsProps","disableAutoFocus","disableEnforceFocus","disableEscapeKeyDown","disablePortal","disableRestoreFocus","disableScrollLock","hideBackdrop","keepMounted","onBackdropClick","onClose","open","slotProps","slots","theme"],Sa=oo("div",{name:"MuiModal",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,!n.open&&n.exited&&t.hidden]}})((({theme:e,ownerState:t})=>l({position:"fixed",zIndex:(e.vars||e).zIndex.modal,right:0,bottom:0,top:0,left:0},!t.open&&t.exited&&{visibility:"hidden"}))),xa=oo(ba,{name:"MuiModal",slot:"Backdrop",overridesResolver:(e,t)=>t.backdrop})({zIndex:-1}),ka=r.forwardRef((function(e,t){var n,o,a,s,c,d;const f=ao({name:"MuiModal",props:e}),{BackdropComponent:p=xa,BackdropProps:h,classes:m,className:g,closeAfterTransition:v=!1,children:y,container:b,component:w,components:S={},componentsProps:x={},disableAutoFocus:k=!1,disableEnforceFocus:C=!1,disableEscapeKeyDown:E=!1,disablePortal:_=!1,disableRestoreFocus:$=!1,disableScrollLock:P=!1,hideBackdrop:T=!1,keepMounted:O=!1,onBackdropClick:R,onClose:A,open:D,slotProps:I,slots:N,theme:F}=f,L=i(f,wa),[B,M]=r.useState(!0),z={container:b,closeAfterTransition:v,disableAutoFocus:k,disableEnforceFocus:C,disableEscapeKeyDown:E,disablePortal:_,disableRestoreFocus:$,disableScrollLock:P,hideBackdrop:T,keepMounted:O,onBackdropClick:R,onClose:A,open:D},j=l({},f,z,{exited:B}),V=null!=(n=null!=(o=null==N?void 0:N.root)?o:S.Root)?n:Sa,H=null!=(a=null!=(s=null==N?void 0:N.backdrop)?s:S.Backdrop)?a:p,U=null!=(c=null==I?void 0:I.root)?c:x.root,W=null!=(d=null==I?void 0:I.backdrop)?d:x.backdrop;return(0,Ln.jsx)(da,l({slots:{root:V,backdrop:H},slotProps:{root:()=>l({},Wn(U,j),!Gn(V)&&{as:w,theme:F},{className:u(g,null==U?void 0:U.className,null==m?void 0:m.root,!j.open&&j.exited&&(null==m?void 0:m.hidden))}),backdrop:()=>l({},h,Wn(W,j),{className:u(null==W?void 0:W.className,null==h?void 0:h.className,null==m?void 0:m.backdrop)})},onTransitionEnter:()=>M(!1),onTransitionExited:()=>M(!0),ref:t},L,z,{children:y}))})),Ca=e=>{let t;return t=e<1?5.11916*e**2:4.5*Math.log(e+1)+2,(t/100).toFixed(2)};function Ea(e){return rn("MuiPaper",e)}on("MuiPaper",["root","rounded","outlined","elevation","elevation0","elevation1","elevation2","elevation3","elevation4","elevation5","elevation6","elevation7","elevation8","elevation9","elevation10","elevation11","elevation12","elevation13","elevation14","elevation15","elevation16","elevation17","elevation18","elevation19","elevation20","elevation21","elevation22","elevation23","elevation24"]);const _a=["className","component","elevation","square","variant"],$a=oo("div",{name:"MuiPaper",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,t[n.variant],!n.square&&t.rounded,"elevation"===n.variant&&t[`elevation${n.elevation}`]]}})((({theme:e,ownerState:t})=>{var n;return l({backgroundColor:(e.vars||e).palette.background.paper,color:(e.vars||e).palette.text.primary,transition:e.transitions.create("box-shadow")},!t.square&&{borderRadius:e.shape.borderRadius},"outlined"===t.variant&&{border:`1px solid ${(e.vars||e).palette.divider}`},"elevation"===t.variant&&l({boxShadow:(e.vars||e).shadows[t.elevation]},!e.vars&&"dark"===e.palette.mode&&{backgroundImage:`linear-gradient(${Wt("#fff",Ca(t.elevation))}, ${Wt("#fff",Ca(t.elevation))})`},e.vars&&{backgroundImage:null==(n=e.vars.overlays)?void 0:n[t.elevation]}))})),Pa=r.forwardRef((function(e,t){const n=ao({props:e,name:"MuiPaper"}),{className:r,component:o="div",elevation:a=1,square:s=!1,variant:d="elevation"}=n,f=i(n,_a),p=l({},n,{component:o,elevation:a,square:s,variant:d}),h=(e=>{const{square:t,elevation:n,variant:r,classes:o}=e;return c({root:["root",r,!t&&"rounded","elevation"===r&&`elevation${n}`]},Ea,o)})(p);return(0,Ln.jsx)($a,l({as:o,ownerState:p,className:u(h.root,r),ref:t},f))}));function Ta(e){return rn("MuiPopover",e)}on("MuiPopover",["root","paper"]);const Oa=["onEntering"],Ra=["action","anchorEl","anchorOrigin","anchorPosition","anchorReference","children","className","container","elevation","marginThreshold","open","PaperProps","slots","slotProps","transformOrigin","TransitionComponent","transitionDuration","TransitionProps"],Aa=["slotProps"];function Da(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.height/2:"bottom"===t&&(n=e.height),n}function Ia(e,t){let n=0;return"number"==typeof t?n=t:"center"===t?n=e.width/2:"right"===t&&(n=e.width),n}function Na(e){return[e.horizontal,e.vertical].map((e=>"number"==typeof e?`${e}px`:e)).join(" ")}function Fa(e){return"function"==typeof e?e():e}const La=oo(ka,{name:"MuiPopover",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Ba=oo(Pa,{name:"MuiPopover",slot:"Paper",overridesResolver:(e,t)=>t.paper})({position:"absolute",overflowY:"auto",overflowX:"hidden",minWidth:16,minHeight:16,maxWidth:"calc(100% - 32px)",maxHeight:"calc(100% - 32px)",outline:0}),Ma=r.forwardRef((function(e,t){var n,o,a;const s=ao({props:e,name:"MuiPopover"}),{action:d,anchorEl:f,anchorOrigin:p={vertical:"top",horizontal:"left"},anchorPosition:h,anchorReference:m="anchorEl",children:g,className:v,container:y,elevation:b=8,marginThreshold:w=16,open:S,PaperProps:x={},slots:k,slotProps:C,transformOrigin:E={vertical:"top",horizontal:"left"},TransitionComponent:_=qo,transitionDuration:$="auto",TransitionProps:{onEntering:P}={}}=s,T=i(s.TransitionProps,Oa),O=i(s,Ra),R=null!=(n=null==C?void 0:C.paper)?n:x,A=r.useRef(),D=ho(A,R.ref),I=l({},s,{anchorOrigin:p,anchorReference:m,elevation:b,marginThreshold:w,externalPaperSlotProps:R,transformOrigin:E,TransitionComponent:_,transitionDuration:$,TransitionProps:T}),N=(e=>{const{classes:t}=e;return c({root:["root"],paper:["paper"]},Ta,t)})(I),F=r.useCallback((()=>{if("anchorPosition"===m)return h;const e=Fa(f),t=(e&&1===e.nodeType?e:Pr(A.current).body).getBoundingClientRect();return{top:t.top+Da(t,p.vertical),left:t.left+Ia(t,p.horizontal)}}),[f,p.horizontal,p.vertical,h,m]),L=r.useCallback((e=>({vertical:Da(e,E.vertical),horizontal:Ia(e,E.horizontal)})),[E.horizontal,E.vertical]),B=r.useCallback((e=>{const t={width:e.offsetWidth,height:e.offsetHeight},n=L(t);if("none"===m)return{top:null,left:null,transformOrigin:Na(n)};const r=F();let o=r.top-n.vertical,a=r.left-n.horizontal;const i=o+t.height,l=a+t.width,s=_o(Fa(f)),u=s.innerHeight-w,c=s.innerWidth-w;if(o<w){const e=o-w;o-=e,n.vertical+=e}else if(i>u){const e=i-u;o-=e,n.vertical+=e}if(a<w){const e=a-w;a-=e,n.horizontal+=e}else if(l>c){const e=l-c;a-=e,n.horizontal+=e}return{top:`${Math.round(o)}px`,left:`${Math.round(a)}px`,transformOrigin:Na(n)}}),[f,m,F,L,w]),[M,z]=r.useState(S),j=r.useCallback((()=>{const e=A.current;if(!e)return;const t=B(e);null!==t.top&&(e.style.top=t.top),null!==t.left&&(e.style.left=t.left),e.style.transformOrigin=t.transformOrigin,z(!0)}),[B]);r.useEffect((()=>{S&&j()})),r.useImperativeHandle(d,(()=>S?{updatePosition:()=>{j()}}:null),[S,j]),r.useEffect((()=>{if(!S)return;const e=function(e,t=166){let n;function r(...r){clearTimeout(n),n=setTimeout((()=>{e.apply(this,r)}),t)}return r.clear=()=>{clearTimeout(n)},r}((()=>{j()})),t=_o(f);return t.addEventListener("resize",e),()=>{e.clear(),t.removeEventListener("resize",e)}}),[f,S,j]);let V=$;"auto"!==$||_.muiSupportAuto||(V=void 0);const H=y||(f?Pr(Fa(f)).body:void 0),U=null!=(o=null==k?void 0:k.root)?o:La,W=null!=(a=null==k?void 0:k.paper)?a:Ba,K=Co({elementType:W,externalSlotProps:l({},R,{style:M?R.style:l({},R.style,{opacity:0})}),additionalProps:{elevation:b,ref:D},ownerState:I,className:u(N.paper,null==R?void 0:R.className)}),q=Co({elementType:U,externalSlotProps:(null==C?void 0:C.root)||{},externalForwardedProps:O,additionalProps:{ref:t,slotProps:{backdrop:{invisible:!0}},container:H,open:S},ownerState:I,className:u(N.root,v)}),{slotProps:G}=q,Q=i(q,Aa);return(0,Ln.jsx)(U,l({},Q,!Gn(U)&&{slotProps:G},{children:(0,Ln.jsx)(_,l({appear:!0,in:S,onEntering:(e,t)=>{P&&P(e,t),j()},onExited:()=>{z(!1)},timeout:V},T,{children:(0,Ln.jsx)(W,l({},K,{children:g}))}))}))}));function za(e){return rn("MuiMenu",e)}on("MuiMenu",["root","paper","list"]);const ja=["onEntering"],Va=["autoFocus","children","disableAutoFocusItem","MenuListProps","onClose","open","PaperProps","PopoverClasses","transitionDuration","TransitionProps","variant"],Ha={vertical:"top",horizontal:"right"},Ua={vertical:"top",horizontal:"left"},Wa=oo(Ma,{shouldForwardProp:e=>ro(e)||"classes"===e,name:"MuiMenu",slot:"Root",overridesResolver:(e,t)=>t.root})({}),Ka=oo(Ba,{name:"MuiMenu",slot:"Paper",overridesResolver:(e,t)=>t.paper})({maxHeight:"calc(100% - 96px)",WebkitOverflowScrolling:"touch"}),qa=oo(xo,{name:"MuiMenu",slot:"List",overridesResolver:(e,t)=>t.list})({outline:0}),Ga=r.forwardRef((function(e,t){const n=ao({props:e,name:"MuiMenu"}),{autoFocus:o=!0,children:a,disableAutoFocusItem:s=!1,MenuListProps:d={},onClose:f,open:p,PaperProps:h={},PopoverClasses:m,transitionDuration:g="auto",TransitionProps:{onEntering:v}={},variant:y="selectedMenu"}=n,b=i(n.TransitionProps,ja),w=i(n,Va),S=Mo(),x="rtl"===S.direction,k=l({},n,{autoFocus:o,disableAutoFocusItem:s,MenuListProps:d,onEntering:v,PaperProps:h,transitionDuration:g,TransitionProps:b,variant:y}),C=(e=>{const{classes:t}=e;return c({root:["root"],paper:["paper"],list:["list"]},za,t)})(k),E=o&&!s&&p,_=r.useRef(null);let $=-1;return r.Children.map(a,((e,t)=>{r.isValidElement(e)&&(e.props.disabled||("selectedMenu"===y&&e.props.selected||-1===$)&&($=t))})),(0,Ln.jsx)(Wa,l({onClose:f,anchorOrigin:{vertical:"bottom",horizontal:x?"right":"left"},transformOrigin:x?Ha:Ua,slots:{paper:Ka},slotProps:{paper:l({},h,{classes:l({},h.classes,{root:C.paper})})},className:C.root,open:p,ref:t,transitionDuration:g,TransitionProps:l({onEntering:(e,t)=>{_.current&&_.current.adjustStyleForScrollbar(e,S),v&&v(e,t)}},b),ownerState:k},w,{classes:m,children:(0,Ln.jsx)(qa,l({onKeyDown:e=>{"Tab"===e.key&&(e.preventDefault(),f&&f(e,"tabKeyDown"))},actions:_,autoFocus:o&&(-1===$||s),autoFocusItem:E,variant:y},d,{className:u(C.list,d.className),children:a}))}))})),Qa=Go;let Ya,Xa=!0,Ja=!1;const Za={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function ei(e){e.metaKey||e.altKey||e.ctrlKey||(Xa=!0)}function ti(){Xa=!1}function ni(){"hidden"===this.visibilityState&&Ja&&(Xa=!0)}const ri=function(){const e=r.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",ei,!0),t.addEventListener("mousedown",ti,!0),t.addEventListener("pointerdown",ti,!0),t.addEventListener("touchstart",ti,!0),t.addEventListener("visibilitychange",ni,!0))}),[]),t=r.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return Xa||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!Za[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(Ja=!0,window.clearTimeout(Ya),Ya=window.setTimeout((()=>{Ja=!1}),100),t.current=!1,!0)},ref:e}};function oi(e,t){var n=Object.create(null);return e&&r.Children.map(e,(function(e){return e})).forEach((function(e){n[e.key]=function(e){return t&&(0,r.isValidElement)(e)?t(e):e}(e)})),n}function ai(e,t,n){return null!=n[t]?n[t]:e.props[t]}function ii(e,t,n){var o=oi(e.children),a=function(e,t){function n(n){return n in t?t[n]:e[n]}e=e||{},t=t||{};var r,o=Object.create(null),a=[];for(var i in e)i in t?a.length&&(o[i]=a,a=[]):a.push(i);var l={};for(var s in t){if(o[s])for(r=0;r<o[s].length;r++){var u=o[s][r];l[o[s][r]]=n(u)}l[s]=n(s)}for(r=0;r<a.length;r++)l[a[r]]=n(a[r]);return l}(t,o);return Object.keys(a).forEach((function(i){var l=a[i];if((0,r.isValidElement)(l)){var s=i in t,u=i in o,c=t[i],d=(0,r.isValidElement)(c)&&!c.props.in;!u||s&&!d?u||!s||d?u&&s&&(0,r.isValidElement)(c)&&(a[i]=(0,r.cloneElement)(l,{onExited:n.bind(null,l),in:c.props.in,exit:ai(l,"exit",e),enter:ai(l,"enter",e)})):a[i]=(0,r.cloneElement)(l,{in:!1}):a[i]=(0,r.cloneElement)(l,{onExited:n.bind(null,l),in:!0,exit:ai(l,"exit",e),enter:ai(l,"enter",e)})}})),a}var li=Object.values||function(e){return Object.keys(e).map((function(t){return e[t]}))},si=function(e){function t(t,n){var r,o=(r=e.call(this,t,n)||this).handleExited.bind(function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(r));return r.state={contextValue:{isMounting:!0},handleExited:o,firstRender:!0},r}Po(t,e);var n=t.prototype;return n.componentDidMount=function(){this.mounted=!0,this.setState({contextValue:{isMounting:!1}})},n.componentWillUnmount=function(){this.mounted=!1},t.getDerivedStateFromProps=function(e,t){var n,o,a=t.children,i=t.handleExited;return{children:t.firstRender?(n=e,o=i,oi(n.children,(function(e){return(0,r.cloneElement)(e,{onExited:o.bind(null,e),in:!0,appear:ai(e,"appear",n),enter:ai(e,"enter",n),exit:ai(e,"exit",n)})}))):ii(e,a,i),firstRender:!1}},n.handleExited=function(e,t){var n=oi(this.props.children);e.key in n||(e.props.onExited&&e.props.onExited(t),this.mounted&&this.setState((function(t){var n=l({},t.children);return delete n[e.key],{children:n}})))},n.render=function(){var e=this.props,t=e.component,n=e.childFactory,o=i(e,["component","childFactory"]),a=this.state.contextValue,l=li(this.state.children).map(n);return delete o.appear,delete o.enter,delete o.exit,null===t?r.createElement(Oo.Provider,{value:a},l):r.createElement(Oo.Provider,{value:a},r.createElement(t,o,l))},t}(r.Component);si.propTypes={},si.defaultProps={component:"div",childFactory:function(e){return e}};const ui=si;function ci(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Rt(t)}n(679);var di=function(){var e=ci.apply(void 0,arguments),t="animation-"+e.name;return{name:t,styles:"@keyframes "+t+"{"+e.styles+"}",anim:1,toString:function(){return"_EMO_"+this.name+"_"+this.styles+"_EMO_"}}};const fi=on("MuiTouchRipple",["root","ripple","rippleVisible","ripplePulsate","child","childLeaving","childPulsate"]),pi=["center","classes","className"];let hi,mi,gi,vi,yi=e=>e;const bi=di(hi||(hi=yi`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`)),wi=di(mi||(mi=yi`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`)),Si=di(gi||(gi=yi`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`)),xi=oo("span",{name:"MuiTouchRipple",slot:"Root"})({overflow:"hidden",pointerEvents:"none",position:"absolute",zIndex:0,top:0,right:0,bottom:0,left:0,borderRadius:"inherit"}),ki=oo((function(e){const{className:t,classes:n,pulsate:o=!1,rippleX:a,rippleY:i,rippleSize:l,in:s,onExited:c,timeout:d}=e,[f,p]=r.useState(!1),h=u(t,n.ripple,n.rippleVisible,o&&n.ripplePulsate),m={width:l,height:l,top:-l/2+i,left:-l/2+a},g=u(n.child,f&&n.childLeaving,o&&n.childPulsate);return s||f||p(!0),r.useEffect((()=>{if(!s&&null!=c){const e=setTimeout(c,d);return()=>{clearTimeout(e)}}}),[c,s,d]),(0,Ln.jsx)("span",{className:h,style:m,children:(0,Ln.jsx)("span",{className:g})})}),{name:"MuiTouchRipple",slot:"Ripple"})(vi||(vi=yi`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`),fi.rippleVisible,bi,550,(({theme:e})=>e.transitions.easing.easeInOut),fi.ripplePulsate,(({theme:e})=>e.transitions.duration.shorter),fi.child,fi.childLeaving,wi,550,(({theme:e})=>e.transitions.easing.easeInOut),fi.childPulsate,Si,(({theme:e})=>e.transitions.easing.easeInOut)),Ci=r.forwardRef((function(e,t){const n=ao({props:e,name:"MuiTouchRipple"}),{center:o=!1,classes:a={},className:s}=n,c=i(n,pi),[d,f]=r.useState([]),p=r.useRef(0),h=r.useRef(null);r.useEffect((()=>{h.current&&(h.current(),h.current=null)}),[d]);const m=r.useRef(!1),g=r.useRef(0),v=r.useRef(null),y=r.useRef(null);r.useEffect((()=>()=>{g.current&&clearTimeout(g.current)}),[]);const b=r.useCallback((e=>{const{pulsate:t,rippleX:n,rippleY:r,rippleSize:o,cb:i}=e;f((e=>[...e,(0,Ln.jsx)(ki,{classes:{ripple:u(a.ripple,fi.ripple),rippleVisible:u(a.rippleVisible,fi.rippleVisible),ripplePulsate:u(a.ripplePulsate,fi.ripplePulsate),child:u(a.child,fi.child),childLeaving:u(a.childLeaving,fi.childLeaving),childPulsate:u(a.childPulsate,fi.childPulsate)},timeout:550,pulsate:t,rippleX:n,rippleY:r,rippleSize:o},p.current)])),p.current+=1,h.current=i}),[a]),w=r.useCallback(((e={},t={},n=(()=>{}))=>{const{pulsate:r=!1,center:a=o||t.pulsate,fakeElement:i=!1}=t;if("mousedown"===(null==e?void 0:e.type)&&m.current)return void(m.current=!1);"touchstart"===(null==e?void 0:e.type)&&(m.current=!0);const l=i?null:y.current,s=l?l.getBoundingClientRect():{width:0,height:0,left:0,top:0};let u,c,d;if(a||void 0===e||0===e.clientX&&0===e.clientY||!e.clientX&&!e.touches)u=Math.round(s.width/2),c=Math.round(s.height/2);else{const{clientX:t,clientY:n}=e.touches&&e.touches.length>0?e.touches[0]:e;u=Math.round(t-s.left),c=Math.round(n-s.top)}if(a)d=Math.sqrt((2*s.width**2+s.height**2)/3),d%2==0&&(d+=1);else{const e=2*Math.max(Math.abs((l?l.clientWidth:0)-u),u)+2,t=2*Math.max(Math.abs((l?l.clientHeight:0)-c),c)+2;d=Math.sqrt(e**2+t**2)}null!=e&&e.touches?null===v.current&&(v.current=()=>{b({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})},g.current=setTimeout((()=>{v.current&&(v.current(),v.current=null)}),80)):b({pulsate:r,rippleX:u,rippleY:c,rippleSize:d,cb:n})}),[o,b]),S=r.useCallback((()=>{w({},{pulsate:!0})}),[w]),x=r.useCallback(((e,t)=>{if(clearTimeout(g.current),"touchend"===(null==e?void 0:e.type)&&v.current)return v.current(),v.current=null,void(g.current=setTimeout((()=>{x(e,t)})));v.current=null,f((e=>e.length>0?e.slice(1):e)),h.current=t}),[]);return r.useImperativeHandle(t,(()=>({pulsate:S,start:w,stop:x})),[S,w,x]),(0,Ln.jsx)(xi,l({className:u(fi.root,a.root,s),ref:y},c,{children:(0,Ln.jsx)(ui,{component:null,exit:!0,children:d})}))}));function Ei(e){return rn("MuiButtonBase",e)}const _i=on("MuiButtonBase",["root","disabled","focusVisible"]),$i=["action","centerRipple","children","className","component","disabled","disableRipple","disableTouchRipple","focusRipple","focusVisibleClassName","LinkComponent","onBlur","onClick","onContextMenu","onDragLeave","onFocus","onFocusVisible","onKeyDown","onKeyUp","onMouseDown","onMouseLeave","onMouseUp","onTouchEnd","onTouchMove","onTouchStart","tabIndex","TouchRippleProps","touchRippleRef","type"],Pi=oo("button",{name:"MuiButtonBase",slot:"Root",overridesResolver:(e,t)=>t.root})({display:"inline-flex",alignItems:"center",justifyContent:"center",position:"relative",boxSizing:"border-box",WebkitTapHighlightColor:"transparent",backgroundColor:"transparent",outline:0,border:0,margin:0,borderRadius:0,padding:0,cursor:"pointer",userSelect:"none",verticalAlign:"middle",MozAppearance:"none",WebkitAppearance:"none",textDecoration:"none",color:"inherit","&::-moz-focus-inner":{borderStyle:"none"},[`&.${_i.disabled}`]:{pointerEvents:"none",cursor:"default"},"@media print":{colorAdjust:"exact"}}),Ti=r.forwardRef((function(e,t){const n=ao({props:e,name:"MuiButtonBase"}),{action:o,centerRipple:a=!1,children:s,className:d,component:f="button",disabled:p=!1,disableRipple:h=!1,disableTouchRipple:m=!1,focusRipple:g=!1,LinkComponent:v="a",onBlur:y,onClick:b,onContextMenu:w,onDragLeave:S,onFocus:x,onFocusVisible:k,onKeyDown:C,onKeyUp:E,onMouseDown:_,onMouseLeave:$,onMouseUp:P,onTouchEnd:T,onTouchMove:O,onTouchStart:R,tabIndex:A=0,TouchRippleProps:D,touchRippleRef:I,type:N}=n,F=i(n,$i),L=r.useRef(null),B=r.useRef(null),M=ho(B,I),{isFocusVisibleRef:z,onFocus:j,onBlur:V,ref:H}=ri(),[U,W]=r.useState(!1);p&&U&&W(!1),r.useImperativeHandle(o,(()=>({focusVisible:()=>{W(!0),L.current.focus()}})),[]);const[K,q]=r.useState(!1);r.useEffect((()=>{q(!0)}),[]);const G=K&&!h&&!p;function Q(e,t,n=m){return Qa((r=>(t&&t(r),!n&&B.current&&B.current[e](r),!0)))}r.useEffect((()=>{U&&g&&!h&&K&&B.current.pulsate()}),[h,g,U,K]);const Y=Q("start",_),X=Q("stop",w),J=Q("stop",S),Z=Q("stop",P),ee=Q("stop",(e=>{U&&e.preventDefault(),$&&$(e)})),te=Q("start",R),ne=Q("stop",T),re=Q("stop",O),oe=Q("stop",(e=>{V(e),!1===z.current&&W(!1),y&&y(e)}),!1),ae=Qa((e=>{L.current||(L.current=e.currentTarget),j(e),!0===z.current&&(W(!0),k&&k(e)),x&&x(e)})),ie=()=>{const e=L.current;return f&&"button"!==f&&!("A"===e.tagName&&e.href)},le=r.useRef(!1),se=Qa((e=>{g&&!le.current&&U&&B.current&&" "===e.key&&(le.current=!0,B.current.stop(e,(()=>{B.current.start(e)}))),e.target===e.currentTarget&&ie()&&" "===e.key&&e.preventDefault(),C&&C(e),e.target===e.currentTarget&&ie()&&"Enter"===e.key&&!p&&(e.preventDefault(),b&&b(e))})),ue=Qa((e=>{g&&" "===e.key&&B.current&&U&&!e.defaultPrevented&&(le.current=!1,B.current.stop(e,(()=>{B.current.pulsate(e)}))),E&&E(e),b&&e.target===e.currentTarget&&ie()&&" "===e.key&&!e.defaultPrevented&&b(e)}));let ce=f;"button"===ce&&(F.href||F.to)&&(ce=v);const de={};"button"===ce?(de.type=void 0===N?"button":N,de.disabled=p):(F.href||F.to||(de.role="button"),p&&(de["aria-disabled"]=p));const fe=ho(t,H,L),pe=l({},n,{centerRipple:a,component:f,disabled:p,disableRipple:h,disableTouchRipple:m,focusRipple:g,tabIndex:A,focusVisible:U}),he=(e=>{const{disabled:t,focusVisible:n,focusVisibleClassName:r,classes:o}=e,a=c({root:["root",t&&"disabled",n&&"focusVisible"]},Ei,o);return n&&r&&(a.root+=` ${r}`),a})(pe);return(0,Ln.jsxs)(Pi,l({as:ce,className:u(he.root,d),ownerState:pe,onBlur:oe,onClick:b,onContextMenu:X,onFocus:ae,onKeyDown:se,onKeyUp:ue,onMouseDown:Y,onMouseLeave:ee,onMouseUp:Z,onDragLeave:J,onTouchEnd:ne,onTouchMove:re,onTouchStart:te,ref:fe,tabIndex:p?-1:A,type:N},de,F,{children:[s,G?(0,Ln.jsx)(Ci,l({ref:M,center:a},D)):null]}))})),Oi=Ti,Ri=on("MuiDivider",["root","absolute","fullWidth","inset","middle","flexItem","light","vertical","withChildren","withChildrenVertical","textAlignRight","textAlignLeft","wrapper","wrapperVertical"]),Ai=on("MuiListItemIcon",["root","alignItemsFlexStart"]),Di=on("MuiListItemText",["root","multiline","dense","inset","primary","secondary"]);function Ii(e){return rn("MuiMenuItem",e)}const Ni=on("MuiMenuItem",["root","focusVisible","dense","disabled","divider","gutters","selected"]),Fi=["autoFocus","component","dense","divider","disableGutters","focusVisibleClassName","role","tabIndex","className"],Li=oo(Oi,{shouldForwardProp:e=>ro(e)||"classes"===e,name:"MuiMenuItem",slot:"Root",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.root,n.dense&&t.dense,n.divider&&t.divider,!n.disableGutters&&t.gutters]}})((({theme:e,ownerState:t})=>l({},e.typography.body1,{display:"flex",justifyContent:"flex-start",alignItems:"center",position:"relative",textDecoration:"none",minHeight:48,paddingTop:6,paddingBottom:6,boxSizing:"border-box",whiteSpace:"nowrap"},!t.disableGutters&&{paddingLeft:16,paddingRight:16},t.divider&&{borderBottom:`1px solid ${(e.vars||e).palette.divider}`,backgroundClip:"padding-box"},{"&:hover":{textDecoration:"none",backgroundColor:(e.vars||e).palette.action.hover,"@media (hover: none)":{backgroundColor:"transparent"}},[`&.${Ni.selected}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:Wt(e.palette.primary.main,e.palette.action.selectedOpacity),[`&.${Ni.focusVisible}`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.focusOpacity}))`:Wt(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.focusOpacity)}},[`&.${Ni.selected}:hover`]:{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / calc(${e.vars.palette.action.selectedOpacity} + ${e.vars.palette.action.hoverOpacity}))`:Wt(e.palette.primary.main,e.palette.action.selectedOpacity+e.palette.action.hoverOpacity),"@media (hover: none)":{backgroundColor:e.vars?`rgba(${e.vars.palette.primary.mainChannel} / ${e.vars.palette.action.selectedOpacity})`:Wt(e.palette.primary.main,e.palette.action.selectedOpacity)}},[`&.${Ni.focusVisible}`]:{backgroundColor:(e.vars||e).palette.action.focus},[`&.${Ni.disabled}`]:{opacity:(e.vars||e).palette.action.disabledOpacity},[`& + .${Ri.root}`]:{marginTop:e.spacing(1),marginBottom:e.spacing(1)},[`& + .${Ri.inset}`]:{marginLeft:52},[`& .${Di.root}`]:{marginTop:0,marginBottom:0},[`& .${Di.inset}`]:{paddingLeft:36},[`& .${Ai.root}`]:{minWidth:36}},!t.dense&&{[e.breakpoints.up("sm")]:{minHeight:"auto"}},t.dense&&l({minHeight:32,paddingTop:4,paddingBottom:4},e.typography.body2,{[`& .${Ai.root} svg`]:{fontSize:"1.25rem"}})))),Bi=r.forwardRef((function(e,t){const n=ao({props:e,name:"MuiMenuItem"}),{autoFocus:o=!1,component:a="li",dense:s=!1,divider:d=!1,disableGutters:f=!1,focusVisibleClassName:p,role:h="menuitem",tabIndex:m,className:g}=n,v=i(n,Fi),y=r.useContext(io),b=r.useMemo((()=>({dense:s||y.dense||!1,disableGutters:f})),[y.dense,s,f]),w=r.useRef(null);go((()=>{o&&w.current&&w.current.focus()}),[o]);const S=l({},n,{dense:b.dense,divider:d,disableGutters:f}),x=(e=>{const{disabled:t,dense:n,divider:r,disableGutters:o,selected:a,classes:i}=e;return l({},i,c({root:["root",n&&"dense",t&&"disabled",!o&&"gutters",r&&"divider",a&&"selected"]},Ii,i))})(n),k=ho(w,t);let C;return n.disabled||(C=void 0!==m?m:-1),(0,Ln.jsx)(io.Provider,{value:b,children:(0,Ln.jsx)(Li,l({ref:k,role:h,tabIndex:C,component:a,focusVisibleClassName:u(x.focusVisible,p),className:u(x.root,g)},v,{ownerState:S,classes:x}))})}));function Mi(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||zi(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function zi(e,t){if(e){if("string"==typeof e)return ji(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ji(e,t):void 0}}function ji(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Vi=function(e){var t,n=(0,r.useContext)(a.w),o=n.characters,i=n.setCharacters,l=o.filter((function(e){return!e.found})),s=Mi((0,r.useState)(null),2),u=s[0],c=s[1],d=function(t){var n={center:[t.xCoord,t.yCoord],radius:1};i(o.filter((function(r){return r.name===t.name&&(r.found=e.verifyCharacter(n)),r}))),c(null)},f=(t=o,function(e){if(Array.isArray(e))return ji(e)}(t)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||zi(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()).filter((function(e){return!e.found})).map((function(e){return r.createElement(Bi,{sx:{bgcolor:"black"},key:""+e.xCoord+e.yCoord,onClick:function(){return d(e)}}," ",r.createElement(_r,{character:e}))}));return r.createElement("div",{onClick:function(t){t.target.getBoundingClientRect();var n=Mi(e.getClickCoords(t),2);n[0],n[1],t.preventDefault(),c(null===u?{mouseX:t.clientX+2+e.radius,mouseY:t.clientY-6}:null)},style:{cursor:"context-menu"}},e.children,l.length>0&&r.createElement(Ga,{disableAutoFocusItem:!0,open:null!==u,onClose:d,anchorReference:"anchorPosition",anchorPosition:null!==u?{top:u.mouseY,left:u.mouseX}:void 0},f))};n.p;var Hi=n(305);function Ui(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a,i,l=[],s=!0,u=!1;try{if(a=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;s=!1}else for(;!(s=(r=a.call(n)).done)&&(l.push(r.value),l.length!==t);s=!0);}catch(e){u=!0,o=e}finally{try{if(!s&&null!=n.return&&(i=n.return(),Object(i)!==i))return}finally{if(u)throw o}}return l}}(e,t)||function(e,t){if(e){if("string"==typeof e)return Wi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Wi(e,t):void 0}}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Wi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}const Ki=function(e){var t=Ui((0,r.useState)(null),2),n=t[0],o=t[1],i=Ui((0,r.useState)([]),2),l=i[0],s=i[1],u=(0,r.useContext)(a.w),c=u.characters,d=(u.setCharacters,u.setGameEnd,c.filter((function(e){return!e.found})));(0,r.useEffect)((function(){0===d.length&&e.endGame()}),[d]);var f=.032552*window.innerWidth/2,p=(screen.height,function(e){if(null!=e){var t=e.target.getBoundingClientRect();return[e.clientX-t.left,e.clientY-t.top]}}),h=function(e){var t=Ui(p(e),2),n=t[0],o=t[1],a=window.innerWidth,i=.032552*a/2,l=-1.25*i+.07*screen.height;return s(r.createElement("div",{className:"absolute rounded-full opacity-50 bg-red-600 z-10",style:{width:2*i,height:2*i,top:o+l,left:n-i}})),{center:[(n+i)/(a/1920),(o-i)/(a/1920)],radius:70}};(0,r.useEffect)((function(){null!==n&&h(n)}),[n]);var m=function(e,t){return parseInt(Math.sqrt((e.center[0]-t.center[0])*(e.center[0]-t.center[0])+(e.center[1]-t.center[1])*(e.center[1]-t.center[1])))+t.radius<=e.radius};return r.createElement(r.Fragment,null,r.createElement(Vi,{radius:f,getClickCoords:p,verifyCharacter:function(e){var t=h(n);return console.log(m(t,e)),m(t,e)}},r.createElement("div",{className:"w-full"},d.length>0&&l,r.createElement("img",{src:Hi,id:"image",onClick:function(e){return function(e){o(e)}(e)},className:"relative",style:{width:"100vw",height:"auto"}}))))}},9:(e,t,n)=>{n.a(e,(async(e,r)=>{try{n.d(t,{Y:()=>d});var o=n(977),a=n(650);function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function u(){u=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function d(e,t,n,o){var a=t&&t.prototype instanceof h?t:h,i=Object.create(a.prototype),l=new $(o||[]);return r(i,"_invoke",{value:k(e,n,l)}),i}function f(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=d;var p={};function h(){}function m(){}function g(){}var v={};c(v,a,(function(){return this}));var y=Object.getPrototypeOf,b=y&&y(y(P([])));b&&b!==t&&n.call(b,a)&&(v=b);var w=g.prototype=h.prototype=Object.create(v);function S(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function x(e,t){function o(r,a,i,l){var u=f(e[r],e,a);if("throw"!==u.type){var c=u.arg,d=c.value;return d&&"object"==s(d)&&n.call(d,"__await")?t.resolve(d.__await).then((function(e){o("next",e,i,l)}),(function(e){o("throw",e,i,l)})):t.resolve(d).then((function(e){c.value=e,i(c)}),(function(e){return o("throw",e,i,l)}))}l(u.arg)}var a;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return a=a?a.then(r,r):r()}})}function k(e,t,n){var r="suspendedStart";return function(o,a){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw a;return{value:void 0,done:!0}}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var l=C(i,n);if(l){if(l===p)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var s=f(e,t,n);if("normal"===s.type){if(r=n.done?"completed":"suspendedYield",s.arg===p)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r="completed",n.method="throw",n.arg=s.arg)}}}function C(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,C(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),p;var o=f(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,p;var a=o.arg;return a?a.done?(t[e.resultName]=a.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):a:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function $(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function P(e){if(e){var t=e[a];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:T}}function T(){return{value:void 0,done:!0}}return m.prototype=g,r(w,"constructor",{value:g,configurable:!0}),r(g,"constructor",{value:m,configurable:!0}),m.displayName=c(g,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,c(e,l,"GeneratorFunction")),e.prototype=Object.create(w),e},e.awrap=function(e){return{__await:e}},S(x.prototype),c(x.prototype,i,(function(){return this})),e.AsyncIterator=x,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new x(d(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},S(w),c(w,l,"Generator"),c(w,a,(function(){return this})),c(w,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=P,$.prototype={constructor:$,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(_),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return i.type="throw",i.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],i=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var l=n.call(a,"catchLoc"),s=n.call(a,"finallyLoc");if(l&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(l){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,p):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),_(n),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;_(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:P(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),p}},e}function c(e,t,n,r,o,a,i){try{var l=e[a](i),s=l.value}catch(e){return void n(e)}l.done?t(s):Promise.resolve(s).then(r,o)}var i=(0,o.ZF)({apiKey:"AIzaSyAYaXPXeZciV1L1_tWaPbvxFhgDc0S7-pk",authDomain:"phototagging-a690c.firebaseapp.com",projectId:"phototagging-a690c",storageBucket:"phototagging-a690c.appspot.com",messagingSenderId:"361105991825",appId:"1:361105991825:web:9a74eef4e9fbdc16c23730"}),l=(0,a.ad)(i);function d(e){return f.apply(this,arguments)}function f(){var e;return e=u().mark((function e(t){var n,r,o;return u().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=(0,a.hJ)(l,t),e.next=3,(0,a.PL)(n);case 3:return r=e.sent,o=r.docs.map((function(e){return e.data()})),e.abrupt("return",o);case 6:case"end":return e.stop()}}),e)})),f=function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function i(e){c(a,r,o,i,l,"next",e)}function l(e){c(a,r,o,i,l,"throw",e)}i(void 0)}))},f.apply(this,arguments)}await d("characters"),r()}catch(p){r(p)}}),1)},579:(e,t,n)=>{n.a(e,(async(e,t)=>{try{var r=n(294),o=n(745),a=n(96),i=e([a]);a=(i.then?(await i)():i)[0],o.createRoot(document.getElementById("root")).render(r.createElement(r.StrictMode,null,r.createElement(a.Z,null))),t()}catch(e){t(e)}}))},679:(e,t,n)=>{var r=n(296),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},a={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function s(e){return r.isMemo(e)?i:l[e.$$typeof]||o}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var u=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var i=c(n);d&&(i=i.concat(d(n)));for(var l=s(t),m=s(n),g=0;g<i.length;++g){var v=i[g];if(!(a[v]||r&&r[v]||m&&m[v]||l&&l[v])){var y=f(n,v);try{u(t,v,y)}catch(e){}}}}return t}},103:(e,t)=>{var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,s=n?Symbol.for("react.provider"):60109,u=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function S(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case a:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case u:case f:case g:case m:case s:return e;default:return t}}case o:return t}}}function x(e){return S(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=u,t.ContextProvider=s,t.Element=r,t.ForwardRef=f,t.Fragment=a,t.Lazy=g,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return x(e)||S(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return S(e)===u},t.isContextProvider=function(e){return S(e)===s},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return S(e)===f},t.isFragment=function(e){return S(e)===a},t.isLazy=function(e){return S(e)===g},t.isMemo=function(e){return S(e)===m},t.isPortal=function(e){return S(e)===o},t.isProfiler=function(e){return S(e)===l},t.isStrictMode=function(e){return S(e)===i},t.isSuspense=function(e){return S(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===i||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===m||e.$$typeof===s||e.$$typeof===u||e.$$typeof===f||e.$$typeof===y||e.$$typeof===b||e.$$typeof===w||e.$$typeof===v)},t.typeOf=S},296:(e,t,n)=>{e.exports=n(103)},448:(e,t,n)=>{var r=n(294),o=n(840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var i=new Set,l={};function s(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)i.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p={},h={};function m(e,t,n,r,o,a,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=i}var g={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){g[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];g[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){g[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){g[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){g[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){g[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){g[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){g[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){g[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var v=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function b(e,t,n,r){var o=g.hasOwnProperty(t)?g[t]:null;(null!==o?0!==o.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!d.call(h,e)||!d.call(p,e)&&(f.test(e)?h[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(v,y);g[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),g.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){g[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),x=Symbol.for("react.portal"),k=Symbol.for("react.fragment"),C=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),_=Symbol.for("react.provider"),$=Symbol.for("react.context"),P=Symbol.for("react.forward_ref"),T=Symbol.for("react.suspense"),O=Symbol.for("react.suspense_list"),R=Symbol.for("react.memo"),A=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var D=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var I=Symbol.iterator;function N(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=I&&e[I]||e["@@iterator"])?e:null}var F,L=Object.assign;function B(e){if(void 0===F)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);F=t&&t[1]||""}return"\n"+F+e}var M=!1;function z(e,t){if(!e||M)return"";M=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var o=t.stack.split("\n"),a=r.stack.split("\n"),i=o.length-1,l=a.length-1;1<=i&&0<=l&&o[i]!==a[l];)l--;for(;1<=i&&0<=l;i--,l--)if(o[i]!==a[l]){if(1!==i||1!==l)do{if(i--,0>--l||o[i]!==a[l]){var s="\n"+o[i].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=i&&0<=l);break}}}finally{M=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?B(e):""}function j(e){switch(e.tag){case 5:return B(e.type);case 16:return B("Lazy");case 13:return B("Suspense");case 19:return B("SuspenseList");case 0:case 2:case 15:return z(e.type,!1);case 11:return z(e.type.render,!1);case 1:return z(e.type,!0);default:return""}}function V(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case x:return"Portal";case E:return"Profiler";case C:return"StrictMode";case T:return"Suspense";case O:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case $:return(e.displayName||"Context")+".Consumer";case _:return(e._context.displayName||"Context")+".Provider";case P:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case R:return null!==(t=e.displayName||null)?t:V(e.type)||"Memo";case A:t=e._payload,e=e._init;try{return V(e(t))}catch(e){}}return null}function H(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return V(t);case 8:return t===C?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function U(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function W(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=W(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=W(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function G(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Q(e,t){var n=t.checked;return L({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Y(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=U(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&b(e,"checked",t,!1)}function J(e,t){X(e,t);var n=U(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,U(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Z(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&G(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+U(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return L({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function oe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:U(n)}}function ae(e,t){var n=U(t.value),r=U(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ie(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function le(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?le(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ue,ce,de=(ce=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ue=ue||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ue.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ce(e,t)}))}:ce);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var pe={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},he=["Webkit","ms","Moz","O"];function me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||pe.hasOwnProperty(e)&&pe[e]?(""+t).trim():t+"px"}function ge(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(pe).forEach((function(e){he.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),pe[t]=pe[e]}))}));var ve=L({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(ve[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function be(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var xe=null,ke=null,Ce=null;function Ee(e){if(e=wo(e)){if("function"!=typeof xe)throw Error(a(280));var t=e.stateNode;t&&(t=xo(t),xe(e.stateNode,e.type,t))}}function _e(e){ke?Ce?Ce.push(e):Ce=[e]:ke=e}function $e(){if(ke){var e=ke,t=Ce;if(Ce=ke=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Pe(e,t){return e(t)}function Te(){}var Oe=!1;function Re(e,t,n){if(Oe)return e(t,n);Oe=!0;try{return Pe(e,t,n)}finally{Oe=!1,(null!==ke||null!==Ce)&&(Te(),$e())}}function Ae(e,t){var n=e.stateNode;if(null===n)return null;var r=xo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var De=!1;if(c)try{var Ie={};Object.defineProperty(Ie,"passive",{get:function(){De=!0}}),window.addEventListener("test",Ie,Ie),window.removeEventListener("test",Ie,Ie)}catch(ce){De=!1}function Ne(e,t,n,r,o,a,i,l,s){var u=Array.prototype.slice.call(arguments,3);try{t.apply(n,u)}catch(e){this.onError(e)}}var Fe=!1,Le=null,Be=!1,Me=null,ze={onError:function(e){Fe=!0,Le=e}};function je(e,t,n,r,o,a,i,l,s){Fe=!1,Le=null,Ne.apply(ze,arguments)}function Ve(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function He(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ue(e){if(Ve(e)!==e)throw Error(a(188))}function We(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ve(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ue(o),e;if(i===r)return Ue(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,s=o.child;s;){if(s===n){l=!0,n=o,r=i;break}if(s===r){l=!0,r=o,n=i;break}s=s.sibling}if(!l){for(s=i.child;s;){if(s===n){l=!0,n=i,r=o;break}if(s===r){l=!0,r=i,n=o;break}s=s.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ke(e):null}function Ke(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ke(e);if(null!==t)return t;e=e.sibling}return null}var qe=o.unstable_scheduleCallback,Ge=o.unstable_cancelCallback,Qe=o.unstable_shouldYield,Ye=o.unstable_requestPaint,Xe=o.unstable_now,Je=o.unstable_getCurrentPriorityLevel,Ze=o.unstable_ImmediatePriority,et=o.unstable_UserBlockingPriority,tt=o.unstable_NormalPriority,nt=o.unstable_LowPriority,rt=o.unstable_IdlePriority,ot=null,at=null,it=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(lt(e)/st|0)|0},lt=Math.log,st=Math.LN2,ut=64,ct=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,a=e.pingedLanes,i=268435455&n;if(0!==i){var l=i&~o;0!==l?r=dt(l):0!=(a&=i)&&(r=dt(a))}else 0!=(i=n&~o)?r=dt(i):0!==a&&(r=dt(a));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(a=t&-t)||16===o&&0!=(4194240&a)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-it(t)),r|=e[n],t&=~o;return r}function pt(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function ht(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function mt(){var e=ut;return 0==(4194240&(ut<<=1))&&(ut=64),e}function gt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function vt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-it(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-it(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var bt=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var St,xt,kt,Ct,Et,_t=!1,$t=[],Pt=null,Tt=null,Ot=null,Rt=new Map,At=new Map,Dt=[],It="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Nt(e,t){switch(e){case"focusin":case"focusout":Pt=null;break;case"dragenter":case"dragleave":Tt=null;break;case"mouseover":case"mouseout":Ot=null;break;case"pointerover":case"pointerout":Rt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":At.delete(t.pointerId)}}function Ft(e,t,n,r,o,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&xt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Lt(e){var t=bo(e.target);if(null!==t){var n=Ve(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=He(n)))return e.blockedOn=t,void Et(e.priority,(function(){kt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Bt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&xt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function Mt(e,t,n){Bt(e)&&n.delete(t)}function zt(){_t=!1,null!==Pt&&Bt(Pt)&&(Pt=null),null!==Tt&&Bt(Tt)&&(Tt=null),null!==Ot&&Bt(Ot)&&(Ot=null),Rt.forEach(Mt),At.forEach(Mt)}function jt(e,t){e.blockedOn===t&&(e.blockedOn=null,_t||(_t=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,zt)))}function Vt(e){function t(t){return jt(t,e)}if(0<$t.length){jt($t[0],e);for(var n=1;n<$t.length;n++){var r=$t[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Pt&&jt(Pt,e),null!==Tt&&jt(Tt,e),null!==Ot&&jt(Ot,e),Rt.forEach(t),At.forEach(t),n=0;n<Dt.length;n++)(r=Dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Dt.length&&null===(n=Dt[0]).blockedOn;)Lt(n),null===n.blockedOn&&Dt.shift()}var Ht=w.ReactCurrentBatchConfig,Ut=!0;function Wt(e,t,n,r){var o=bt,a=Ht.transition;Ht.transition=null;try{bt=1,qt(e,t,n,r)}finally{bt=o,Ht.transition=a}}function Kt(e,t,n,r){var o=bt,a=Ht.transition;Ht.transition=null;try{bt=4,qt(e,t,n,r)}finally{bt=o,Ht.transition=a}}function qt(e,t,n,r){if(Ut){var o=Qt(e,t,n,r);if(null===o)Ur(e,t,r,Gt,n),Nt(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Pt=Ft(Pt,e,t,n,r,o),!0;case"dragenter":return Tt=Ft(Tt,e,t,n,r,o),!0;case"mouseover":return Ot=Ft(Ot,e,t,n,r,o),!0;case"pointerover":var a=o.pointerId;return Rt.set(a,Ft(Rt.get(a)||null,e,t,n,r,o)),!0;case"gotpointercapture":return a=o.pointerId,At.set(a,Ft(At.get(a)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(Nt(e,r),4&t&&-1<It.indexOf(e)){for(;null!==o;){var a=wo(o);if(null!==a&&St(a),null===(a=Qt(e,t,n,r))&&Ur(e,t,r,Gt,n),a===o)break;o=a}null!==o&&r.stopPropagation()}else Ur(e,t,r,null,n)}}var Gt=null;function Qt(e,t,n,r){if(Gt=null,null!==(e=bo(e=Se(r))))if(null===(t=Ve(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=He(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Gt=e,null}function Yt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Je()){case Ze:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Xt=null,Jt=null,Zt=null;function en(){if(Zt)return Zt;var e,t,n=Jt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return Zt=o.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function on(e){function t(t,n,r,o,a){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(o):o[i]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return L(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var an,ln,sn,un={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=on(un),dn=L({},un,{view:0,detail:0}),fn=on(dn),pn=L({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(an=e.screenX-sn.screenX,ln=e.screenY-sn.screenY):ln=an=0,sn=e),an)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),hn=on(pn),mn=on(L({},pn,{dataTransfer:0})),gn=on(L({},dn,{relatedTarget:0})),vn=on(L({},un,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=L({},un,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),bn=on(yn),wn=on(L({},un,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},xn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},kn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=kn[e])&&!!t[e]}function En(){return Cn}var _n=L({},dn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?xn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),$n=on(_n),Pn=on(L({},pn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=on(L({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),On=on(L({},un,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=L({},pn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),An=on(Rn),Dn=[9,13,27,32],In=c&&"CompositionEvent"in window,Nn=null;c&&"documentMode"in document&&(Nn=document.documentMode);var Fn=c&&"TextEvent"in window&&!Nn,Ln=c&&(!In||Nn&&8<Nn&&11>=Nn),Bn=String.fromCharCode(32),Mn=!1;function zn(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function jn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Vn=!1,Hn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Un(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Hn[e.type]:"textarea"===t}function Wn(e,t,n,r){_e(r),0<(t=Kr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Kn=null,qn=null;function Gn(e){Br(e,0)}function Qn(e){if(q(So(e)))return e}function Yn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Jn;if(c){var Zn="oninput"in document;if(!Zn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Zn="function"==typeof er.oninput}Jn=Zn}else Jn=!1;Xn=Jn&&(!document.documentMode||9<document.documentMode)}function tr(){Kn&&(Kn.detachEvent("onpropertychange",nr),qn=Kn=null)}function nr(e){if("value"===e.propertyName&&Qn(qn)){var t=[];Wn(t,qn,e,Se(e)),Re(Gn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,(Kn=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function or(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Qn(qn)}function ar(e,t){if("click"===e)return Qn(t)}function ir(e,t){if("input"===e||"change"===e)return Qn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var o=n[r];if(!d.call(t,o)||!lr(e[o],t[o]))return!1}return!0}function ur(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function cr(e,t){var n,r=ur(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=ur(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=G();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=G((e=t.contentWindow).document)}return t}function pr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function hr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&pr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,a=Math.min(r.start,o);r=void 0===r.end?a:Math.min(r.end,o),!e.extend&&a>r&&(o=r,r=a,a=o),o=cr(n,a);var i=cr(n,r);o&&i&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var mr=c&&"documentMode"in document&&11>=document.documentMode,gr=null,vr=null,yr=null,br=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;br||null==gr||gr!==G(r)||(r="selectionStart"in(r=gr)&&pr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&sr(yr,r)||(yr=r,0<(r=Kr(vr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}function Sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var xr={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},kr={},Cr={};function Er(e){if(kr[e])return kr[e];if(!xr[e])return e;var t,n=xr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Cr)return kr[e]=n[t];return e}c&&(Cr=document.createElement("div").style,"AnimationEvent"in window||(delete xr.animationend.animation,delete xr.animationiteration.animation,delete xr.animationstart.animation),"TransitionEvent"in window||delete xr.transitionend.transition);var _r=Er("animationend"),$r=Er("animationiteration"),Pr=Er("animationstart"),Tr=Er("transitionend"),Or=new Map,Rr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Ar(e,t){Or.set(e,t),s(t,[e])}for(var Dr=0;Dr<Rr.length;Dr++){var Ir=Rr[Dr];Ar(Ir.toLowerCase(),"on"+(Ir[0].toUpperCase()+Ir.slice(1)))}Ar(_r,"onAnimationEnd"),Ar($r,"onAnimationIteration"),Ar(Pr,"onAnimationStart"),Ar("dblclick","onDoubleClick"),Ar("focusin","onFocus"),Ar("focusout","onBlur"),Ar(Tr,"onTransitionEnd"),u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Nr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Fr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Nr));function Lr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,s,u){if(je.apply(this,arguments),Fe){if(!Fe)throw Error(a(198));var c=Le;Fe=!1,Le=null,Be||(Be=!0,Me=c)}}(r,t,void 0,e),e.currentTarget=null}function Br(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],s=l.instance,u=l.currentTarget;if(l=l.listener,s!==a&&o.isPropagationStopped())break e;Lr(o,l,u),a=s}else for(i=0;i<r.length;i++){if(s=(l=r[i]).instance,u=l.currentTarget,l=l.listener,s!==a&&o.isPropagationStopped())break e;Lr(o,l,u),a=s}}}if(Be)throw e=Me,Be=!1,Me=null,e}function Mr(e,t){var n=t[go];void 0===n&&(n=t[go]=new Set);var r=e+"__bubble";n.has(r)||(Hr(t,e,2,!1),n.add(r))}function zr(e,t,n){var r=0;t&&(r|=4),Hr(n,e,r,t)}var jr="_reactListening"+Math.random().toString(36).slice(2);function Vr(e){if(!e[jr]){e[jr]=!0,i.forEach((function(t){"selectionchange"!==t&&(Fr.has(t)||zr(t,!1,e),zr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[jr]||(t[jr]=!0,zr("selectionchange",!1,t))}}function Hr(e,t,n,r){switch(Yt(t)){case 1:var o=Wt;break;case 4:o=Kt;break;default:o=qt}n=o.bind(null,t,n,e),o=void 0,!De||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Ur(e,t,n,r,o){var a=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===i)for(i=r.return;null!==i;){var s=i.tag;if((3===s||4===s)&&((s=i.stateNode.containerInfo)===o||8===s.nodeType&&s.parentNode===o))return;i=i.return}for(;null!==l;){if(null===(i=bo(l)))return;if(5===(s=i.tag)||6===s){r=a=i;continue e}l=l.parentNode}}r=r.return}Re((function(){var r=a,o=Se(n),i=[];e:{var l=Or.get(e);if(void 0!==l){var s=cn,u=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":s=$n;break;case"focusin":u="focus",s=gn;break;case"focusout":u="blur",s=gn;break;case"beforeblur":case"afterblur":s=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":s=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":s=mn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":s=Tn;break;case _r:case $r:case Pr:s=vn;break;case Tr:s=On;break;case"scroll":s=fn;break;case"wheel":s=An;break;case"copy":case"cut":case"paste":s=bn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":s=Pn}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==f&&null!=(m=Ae(h,f))&&c.push(Wr(h,m,p))),d)break;h=h.return}0<c.length&&(l=new s(l,u,null,n,o),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(s="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(u=n.relatedTarget||n.fromElement)||!bo(u)&&!u[mo])&&(s||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,s?(s=r,null!==(u=(u=n.relatedTarget||n.toElement)?bo(u):null)&&(u!==(d=Ve(u))||5!==u.tag&&6!==u.tag)&&(u=null)):(s=null,u=r),s!==u)){if(c=hn,m="onMouseLeave",f="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Pn,m="onPointerLeave",f="onPointerEnter",h="pointer"),d=null==s?l:So(s),p=null==u?l:So(u),(l=new c(m,h+"leave",s,n,o)).target=d,l.relatedTarget=p,m=null,bo(o)===r&&((c=new c(f,h+"enter",u,n,o)).target=p,c.relatedTarget=d,m=c),d=m,s&&u)e:{for(f=u,h=0,p=c=s;p;p=qr(p))h++;for(p=0,m=f;m;m=qr(m))p++;for(;0<h-p;)c=qr(c),h--;for(;0<p-h;)f=qr(f),p--;for(;h--;){if(c===f||null!==f&&c===f.alternate)break e;c=qr(c),f=qr(f)}c=null}else c=null;null!==s&&Gr(i,l,s,c,!1),null!==u&&null!==d&&Gr(i,d,u,c,!0)}if("select"===(s=(l=r?So(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===s&&"file"===l.type)var g=Yn;else if(Un(l))if(Xn)g=ir;else{g=or;var v=rr}else(s=l.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=ar);switch(g&&(g=g(e,r))?Wn(i,g,n,o):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ee(l,"number",l.value)),v=r?So(r):window,e){case"focusin":(Un(v)||"true"===v.contentEditable)&&(gr=v,vr=r,yr=null);break;case"focusout":yr=vr=gr=null;break;case"mousedown":br=!0;break;case"contextmenu":case"mouseup":case"dragend":br=!1,wr(i,n,o);break;case"selectionchange":if(mr)break;case"keydown":case"keyup":wr(i,n,o)}var y;if(In)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Vn?zn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Ln&&"ko"!==n.locale&&(Vn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Vn&&(y=en()):(Jt="value"in(Xt=o)?Xt.value:Xt.textContent,Vn=!0)),0<(v=Kr(r,b)).length&&(b=new wn(b,e,null,n,o),i.push({event:b,listeners:v}),(y||null!==(y=jn(n)))&&(b.data=y))),(y=Fn?function(e,t){switch(e){case"compositionend":return jn(t);case"keypress":return 32!==t.which?null:(Mn=!0,Bn);case"textInput":return(e=t.data)===Bn&&Mn?null:e;default:return null}}(e,n):function(e,t){if(Vn)return"compositionend"===e||!In&&zn(e,t)?(e=en(),Zt=Jt=Xt=null,Vn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Kr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),i.push({event:o,listeners:r}),o.data=y)}Br(i,t)}))}function Wr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Kr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,a=o.stateNode;5===o.tag&&null!==a&&(o=a,null!=(a=Ae(e,n))&&r.unshift(Wr(e,a,o)),null!=(a=Ae(e,t))&&r.push(Wr(e,a,o))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Gr(e,t,n,r,o){for(var a=t._reactName,i=[];null!==n&&n!==r;){var l=n,s=l.alternate,u=l.stateNode;if(null!==s&&s===r)break;5===l.tag&&null!==u&&(l=u,o?null!=(s=Ae(n,a))&&i.unshift(Wr(n,s,l)):o||null!=(s=Ae(n,a))&&i.push(Wr(n,s,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}var Qr=/\r\n?/g,Yr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Qr,"\n").replace(Yr,"")}function Jr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function Zr(){}var eo=null,to=null;function no(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ro="function"==typeof setTimeout?setTimeout:void 0,oo="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,io="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(lo)}:ro;function lo(e){setTimeout((function(){throw e}))}function so(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Vt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Vt(t)}function uo(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function co(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var fo=Math.random().toString(36).slice(2),po="__reactFiber$"+fo,ho="__reactProps$"+fo,mo="__reactContainer$"+fo,go="__reactEvents$"+fo,vo="__reactListeners$"+fo,yo="__reactHandles$"+fo;function bo(e){var t=e[po];if(t)return t;for(var n=e.parentNode;n;){if(t=n[mo]||n[po]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=co(e);null!==e;){if(n=e[po])return n;e=co(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[po]||e[mo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function So(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function xo(e){return e[ho]||null}var ko=[],Co=-1;function Eo(e){return{current:e}}function _o(e){0>Co||(e.current=ko[Co],ko[Co]=null,Co--)}function $o(e,t){Co++,ko[Co]=e.current,e.current=t}var Po={},To=Eo(Po),Oo=Eo(!1),Ro=Po;function Ao(e,t){var n=e.type.contextTypes;if(!n)return Po;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Do(e){return null!=e.childContextTypes}function Io(){_o(Oo),_o(To)}function No(e,t,n){if(To.current!==Po)throw Error(a(168));$o(To,t),$o(Oo,n)}function Fo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,H(e)||"Unknown",o));return L({},n,r)}function Lo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Po,Ro=To.current,$o(To,e),$o(Oo,Oo.current),!0}function Bo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Fo(e,t,Ro),r.__reactInternalMemoizedMergedChildContext=e,_o(Oo),_o(To),$o(To,e)):_o(Oo),$o(Oo,n)}var Mo=null,zo=!1,jo=!1;function Vo(e){null===Mo?Mo=[e]:Mo.push(e)}function Ho(){if(!jo&&null!==Mo){jo=!0;var e=0,t=bt;try{var n=Mo;for(bt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}Mo=null,zo=!1}catch(t){throw null!==Mo&&(Mo=Mo.slice(e+1)),qe(Ze,Ho),t}finally{bt=t,jo=!1}}return null}var Uo=[],Wo=0,Ko=null,qo=0,Go=[],Qo=0,Yo=null,Xo=1,Jo="";function Zo(e,t){Uo[Wo++]=qo,Uo[Wo++]=Ko,Ko=e,qo=t}function ea(e,t,n){Go[Qo++]=Xo,Go[Qo++]=Jo,Go[Qo++]=Yo,Yo=e;var r=Xo;e=Jo;var o=32-it(r)-1;r&=~(1<<o),n+=1;var a=32-it(t)+o;if(30<a){var i=o-o%5;a=(r&(1<<i)-1).toString(32),r>>=i,o-=i,Xo=1<<32-it(t)+o|n<<o|r,Jo=a+e}else Xo=1<<a|n<<o|r,Jo=e}function ta(e){null!==e.return&&(Zo(e,1),ea(e,1,0))}function na(e){for(;e===Ko;)Ko=Uo[--Wo],Uo[Wo]=null,qo=Uo[--Wo],Uo[Wo]=null;for(;e===Yo;)Yo=Go[--Qo],Go[Qo]=null,Jo=Go[--Qo],Go[Qo]=null,Xo=Go[--Qo],Go[Qo]=null}var ra=null,oa=null,aa=!1,ia=null;function la(e,t){var n=Au(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function sa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,ra=e,oa=uo(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,ra=e,oa=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Yo?{id:Xo,overflow:Jo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Au(18,null,null,0)).stateNode=t,n.return=e,e.child=n,ra=e,oa=null,!0);default:return!1}}function ua(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function ca(e){if(aa){var t=oa;if(t){var n=t;if(!sa(e,t)){if(ua(e))throw Error(a(418));t=uo(n.nextSibling);var r=ra;t&&sa(e,t)?la(r,n):(e.flags=-4097&e.flags|2,aa=!1,ra=e)}}else{if(ua(e))throw Error(a(418));e.flags=-4097&e.flags|2,aa=!1,ra=e}}}function da(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;ra=e}function fa(e){if(e!==ra)return!1;if(!aa)return da(e),aa=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!no(e.type,e.memoizedProps)),t&&(t=oa)){if(ua(e))throw pa(),Error(a(418));for(;t;)la(e,t),t=uo(t.nextSibling)}if(da(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){oa=uo(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}oa=null}}else oa=ra?uo(e.stateNode.nextSibling):null;return!0}function pa(){for(var e=oa;e;)e=uo(e.nextSibling)}function ha(){oa=ra=null,aa=!1}function ma(e){null===ia?ia=[e]:ia.push(e)}var ga=w.ReactCurrentBatchConfig;function va(e,t){if(e&&e.defaultProps){for(var n in t=L({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var ya=Eo(null),ba=null,wa=null,Sa=null;function xa(){Sa=wa=ba=null}function ka(e){var t=ya.current;_o(ya),e._currentValue=t}function Ca(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ea(e,t){ba=e,Sa=wa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function _a(e){var t=e._currentValue;if(Sa!==e)if(e={context:e,memoizedValue:t,next:null},null===wa){if(null===ba)throw Error(a(308));wa=e,ba.dependencies={lanes:0,firstContext:e}}else wa=wa.next=e;return t}var $a=null;function Pa(e){null===$a?$a=[e]:$a.push(e)}function Ta(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Pa(t)):(n.next=o.next,o.next=n),t.interleaved=n,Oa(e,r)}function Oa(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ra=!1;function Aa(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Da(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Ia(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Na(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Ts)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Oa(e,n)}return null===(o=r.interleaved)?(t.next=t,Pa(r)):(t.next=o.next,o.next=t),r.interleaved=t,Oa(e,n)}function Fa(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function La(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?o=a=i:a=a.next=i,n=n.next}while(null!==n);null===a?o=a=t:a=a.next=t}else o=a=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ba(e,t,n,r){var o=e.updateQueue;Ra=!1;var a=o.firstBaseUpdate,i=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var s=l,u=s.next;s.next=null,null===i?a=u:i.next=u,i=s;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==i&&(null===l?c.firstBaseUpdate=u:l.next=u,c.lastBaseUpdate=s)}if(null!==a){var d=o.baseState;for(i=0,c=u=s=null,l=a;;){var f=l.lane,p=l.eventTime;if((r&f)===f){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,m=l;switch(f=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,f);break e}d=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(f="function"==typeof(h=m.payload)?h.call(p,d,f):h))break e;d=L({},d,f);break e;case 2:Ra=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(f=o.effects)?o.effects=[l]:f.push(l))}else p={eventTime:p,lane:f,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(u=c=p,s=d):c=c.next=p,i|=f;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(f=l).next,f.next=null,o.lastBaseUpdate=f,o.shared.pending=null}}if(null===c&&(s=d),o.baseState=s,o.firstBaseUpdate=u,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{i|=o.lane,o=o.next}while(o!==t)}else null===a&&(o.shared.lanes=0);Ls|=i,e.lanes=i,e.memoizedState=d}}function Ma(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var za=(new r.Component).refs;function ja(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:L({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Va={isMounted:function(e){return!!(e=e._reactInternals)&&Ve(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),a=Ia(r,o);a.payload=t,null!=n&&(a.callback=n),null!==(t=Na(e,a,o))&&(ru(t,e,o,r),Fa(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=tu(),o=nu(e),a=Ia(r,o);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Na(e,a,o))&&(ru(t,e,o,r),Fa(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=tu(),r=nu(e),o=Ia(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Na(e,o,r))&&(ru(t,e,r,n),Fa(t,e,r))}};function Ha(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(o,a))}function Ua(e,t,n){var r=!1,o=Po,a=t.contextType;return"object"==typeof a&&null!==a?a=_a(a):(o=Do(t)?Ro:To.current,a=(r=null!=(r=t.contextTypes))?Ao(e,o):Po),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Va,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=a),t}function Wa(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Va.enqueueReplaceState(t,t.state,null)}function Ka(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=za,Aa(e);var a=t.contextType;"object"==typeof a&&null!==a?o.context=_a(a):(a=Do(t)?Ro:To.current,o.context=Ao(e,a)),o.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(ja(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&Va.enqueueReplaceState(o,o.state,null),Ba(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4194308)}function qa(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=r,i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=o.refs;t===za&&(t=o.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Ga(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Qa(e){return(0,e._init)(e._payload)}function Ya(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Iu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function l(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Bu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function u(e,t,n,r){var a=n.type;return a===k?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===A&&Qa(a)===t.type)?((r=o(t,n.props)).ref=qa(e,t,n),r.return=e,r):((r=Nu(n.type,n.key,n.props,null,e.mode,r)).ref=qa(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Mu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Fu(n,e.mode,r,a)).return=e,t):((t=o(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Bu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case S:return(n=Nu(t.type,t.key,t.props,null,e.mode,n)).ref=qa(e,null,t),n.return=e,n;case x:return(t=Mu(t,e.mode,n)).return=e,t;case A:return f(e,(0,t._init)(t._payload),n)}if(te(t)||N(t))return(t=Fu(t,e.mode,n,null)).return=e,t;Ga(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==o?null:s(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case S:return n.key===o?u(e,t,n,r):null;case x:return n.key===o?c(e,t,n,r):null;case A:return p(e,t,(o=n._init)(n._payload),r)}if(te(n)||N(n))return null!==o?null:d(e,t,n,r,null);Ga(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r&&""!==r||"number"==typeof r)return s(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case S:return u(t,e=e.get(null===r.key?n:r.key)||null,r,o);case x:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o);case A:return h(e,t,n,(0,r._init)(r._payload),o)}if(te(r)||N(r))return d(t,e=e.get(n)||null,r,o,null);Ga(t,r)}return null}function m(o,a,l,s){for(var u=null,c=null,d=a,m=a=0,g=null;null!==d&&m<l.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var v=p(o,d,l[m],s);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(o,d),a=i(v,a,m),null===c?u=v:c.sibling=v,c=v,d=g}if(m===l.length)return n(o,d),aa&&Zo(o,m),u;if(null===d){for(;m<l.length;m++)null!==(d=f(o,l[m],s))&&(a=i(d,a,m),null===c?u=d:c.sibling=d,c=d);return aa&&Zo(o,m),u}for(d=r(o,d);m<l.length;m++)null!==(g=h(d,o,m,l[m],s))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),a=i(g,a,m),null===c?u=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(o,e)})),aa&&Zo(o,m),u}function g(o,l,s,u){var c=N(s);if("function"!=typeof c)throw Error(a(150));if(null==(s=c.call(s)))throw Error(a(151));for(var d=c=null,m=l,g=l=0,v=null,y=s.next();null!==m&&!y.done;g++,y=s.next()){m.index>g?(v=m,m=null):v=m.sibling;var b=p(o,m,y.value,u);if(null===b){null===m&&(m=v);break}e&&m&&null===b.alternate&&t(o,m),l=i(b,l,g),null===d?c=b:d.sibling=b,d=b,m=v}if(y.done)return n(o,m),aa&&Zo(o,g),c;if(null===m){for(;!y.done;g++,y=s.next())null!==(y=f(o,y.value,u))&&(l=i(y,l,g),null===d?c=y:d.sibling=y,d=y);return aa&&Zo(o,g),c}for(m=r(o,m);!y.done;g++,y=s.next())null!==(y=h(m,o,g,y.value,u))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),l=i(y,l,g),null===d?c=y:d.sibling=y,d=y);return e&&m.forEach((function(e){return t(o,e)})),aa&&Zo(o,g),c}return function e(r,a,i,s){if("object"==typeof i&&null!==i&&i.type===k&&null===i.key&&(i=i.props.children),"object"==typeof i&&null!==i){switch(i.$$typeof){case S:e:{for(var u=i.key,c=a;null!==c;){if(c.key===u){if((u=i.type)===k){if(7===c.tag){n(r,c.sibling),(a=o(c,i.props.children)).return=r,r=a;break e}}else if(c.elementType===u||"object"==typeof u&&null!==u&&u.$$typeof===A&&Qa(u)===c.type){n(r,c.sibling),(a=o(c,i.props)).ref=qa(r,c,i),a.return=r,r=a;break e}n(r,c);break}t(r,c),c=c.sibling}i.type===k?((a=Fu(i.props.children,r.mode,s,i.key)).return=r,r=a):((s=Nu(i.type,i.key,i.props,null,r.mode,s)).ref=qa(r,a,i),s.return=r,r=s)}return l(r);case x:e:{for(c=i.key;null!==a;){if(a.key===c){if(4===a.tag&&a.stateNode.containerInfo===i.containerInfo&&a.stateNode.implementation===i.implementation){n(r,a.sibling),(a=o(a,i.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=Mu(i,r.mode,s)).return=r,r=a}return l(r);case A:return e(r,a,(c=i._init)(i._payload),s)}if(te(i))return m(r,a,i,s);if(N(i))return g(r,a,i,s);Ga(r,i)}return"string"==typeof i&&""!==i||"number"==typeof i?(i=""+i,null!==a&&6===a.tag?(n(r,a.sibling),(a=o(a,i)).return=r,r=a):(n(r,a),(a=Bu(i,r.mode,s)).return=r,r=a),l(r)):n(r,a)}}var Xa=Ya(!0),Ja=Ya(!1),Za={},ei=Eo(Za),ti=Eo(Za),ni=Eo(Za);function ri(e){if(e===Za)throw Error(a(174));return e}function oi(e,t){switch($o(ni,t),$o(ti,e),$o(ei,Za),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}_o(ei),$o(ei,t)}function ai(){_o(ei),_o(ti),_o(ni)}function ii(e){ri(ni.current);var t=ri(ei.current),n=se(t,e.type);t!==n&&($o(ti,e),$o(ei,n))}function li(e){ti.current===e&&(_o(ei),_o(ti))}var si=Eo(0);function ui(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var ci=[];function di(){for(var e=0;e<ci.length;e++)ci[e]._workInProgressVersionPrimary=null;ci.length=0}var fi=w.ReactCurrentDispatcher,pi=w.ReactCurrentBatchConfig,hi=0,mi=null,gi=null,vi=null,yi=!1,bi=!1,wi=0,Si=0;function xi(){throw Error(a(321))}function ki(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function Ci(e,t,n,r,o,i){if(hi=i,mi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,fi.current=null===e||null===e.memoizedState?ll:sl,e=n(r,o),bi){i=0;do{if(bi=!1,wi=0,25<=i)throw Error(a(301));i+=1,vi=gi=null,t.updateQueue=null,fi.current=ul,e=n(r,o)}while(bi)}if(fi.current=il,t=null!==gi&&null!==gi.next,hi=0,vi=gi=mi=null,yi=!1,t)throw Error(a(300));return e}function Ei(){var e=0!==wi;return wi=0,e}function _i(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===vi?mi.memoizedState=vi=e:vi=vi.next=e,vi}function $i(){if(null===gi){var e=mi.alternate;e=null!==e?e.memoizedState:null}else e=gi.next;var t=null===vi?mi.memoizedState:vi.next;if(null!==t)vi=t,gi=e;else{if(null===e)throw Error(a(310));e={memoizedState:(gi=e).memoizedState,baseState:gi.baseState,baseQueue:gi.baseQueue,queue:gi.queue,next:null},null===vi?mi.memoizedState=vi=e:vi=vi.next=e}return vi}function Pi(e,t){return"function"==typeof t?t(e):t}function Ti(e){var t=$i(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=gi,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var s=l=null,u=null,c=i;do{var d=c.lane;if((hi&d)===d)null!==u&&(u=u.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var f={lane:d,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===u?(s=u=f,l=r):u=u.next=f,mi.lanes|=d,Ls|=d}c=c.next}while(null!==c&&c!==i);null===u?l=r:u.next=s,lr(r,t.memoizedState)||(wl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=u,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,mi.lanes|=i,Ls|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Oi(e){var t=$i(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);lr(i,t.memoizedState)||(wl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Ri(){}function Ai(e,t){var n=mi,r=$i(),o=t(),i=!lr(r.memoizedState,o);if(i&&(r.memoizedState=o,wl=!0),r=r.queue,Ui(Ni.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==vi&&1&vi.memoizedState.tag){if(n.flags|=2048,Mi(9,Ii.bind(null,n,r,o,t),void 0,null),null===Os)throw Error(a(349));0!=(30&hi)||Di(n,t,o)}return o}function Di(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Ii(e,t,n,r){t.value=n,t.getSnapshot=r,Fi(t)&&Li(e)}function Ni(e,t,n){return n((function(){Fi(t)&&Li(e)}))}function Fi(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!lr(e,n)}catch(e){return!0}}function Li(e){var t=Oa(e,1);null!==t&&ru(t,e,1,-1)}function Bi(e){var t=_i();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Pi,lastRenderedState:e},t.queue=e,e=e.dispatch=nl.bind(null,mi,e),[t.memoizedState,e]}function Mi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=mi.updateQueue)?(t={lastEffect:null,stores:null},mi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function zi(){return $i().memoizedState}function ji(e,t,n,r){var o=_i();mi.flags|=e,o.memoizedState=Mi(1|t,n,void 0,void 0===r?null:r)}function Vi(e,t,n,r){var o=$i();r=void 0===r?null:r;var a=void 0;if(null!==gi){var i=gi.memoizedState;if(a=i.destroy,null!==r&&ki(r,i.deps))return void(o.memoizedState=Mi(t,n,a,r))}mi.flags|=e,o.memoizedState=Mi(1|t,n,a,r)}function Hi(e,t){return ji(8390656,8,e,t)}function Ui(e,t){return Vi(2048,8,e,t)}function Wi(e,t){return Vi(4,2,e,t)}function Ki(e,t){return Vi(4,4,e,t)}function qi(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Gi(e,t,n){return n=null!=n?n.concat([e]):null,Vi(4,4,qi.bind(null,t,e),n)}function Qi(){}function Yi(e,t){var n=$i();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xi(e,t){var n=$i();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ki(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ji(e,t,n){return 0==(21&hi)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=n):(lr(n,t)||(n=mt(),mi.lanes|=n,Ls|=n,e.baseState=!0),t)}function Zi(e,t){var n=bt;bt=0!==n&&4>n?n:4,e(!0);var r=pi.transition;pi.transition={};try{e(!1),t()}finally{bt=n,pi.transition=r}}function el(){return $i().memoizedState}function tl(e,t,n){var r=nu(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},rl(e)?ol(t,n):null!==(n=Ta(e,t,n,r))&&(ru(n,e,r,tu()),al(n,t,r))}function nl(e,t,n){var r=nu(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(rl(e))ol(t,o);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var i=t.lastRenderedState,l=a(i,n);if(o.hasEagerState=!0,o.eagerState=l,lr(l,i)){var s=t.interleaved;return null===s?(o.next=o,Pa(t)):(o.next=s.next,s.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ta(e,t,o,r))&&(ru(n,e,r,o=tu()),al(n,t,r))}}function rl(e){var t=e.alternate;return e===mi||null!==t&&t===mi}function ol(e,t){bi=yi=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function al(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var il={readContext:_a,useCallback:xi,useContext:xi,useEffect:xi,useImperativeHandle:xi,useInsertionEffect:xi,useLayoutEffect:xi,useMemo:xi,useReducer:xi,useRef:xi,useState:xi,useDebugValue:xi,useDeferredValue:xi,useTransition:xi,useMutableSource:xi,useSyncExternalStore:xi,useId:xi,unstable_isNewReconciler:!1},ll={readContext:_a,useCallback:function(e,t){return _i().memoizedState=[e,void 0===t?null:t],e},useContext:_a,useEffect:Hi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ji(4194308,4,qi.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ji(4194308,4,e,t)},useInsertionEffect:function(e,t){return ji(4,2,e,t)},useMemo:function(e,t){var n=_i();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=_i();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=tl.bind(null,mi,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},_i().memoizedState=e},useState:Bi,useDebugValue:Qi,useDeferredValue:function(e){return _i().memoizedState=e},useTransition:function(){var e=Bi(!1),t=e[0];return e=Zi.bind(null,e[1]),_i().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=mi,o=_i();if(aa){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Os)throw Error(a(349));0!=(30&hi)||Di(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,Hi(Ni.bind(null,r,i,e),[e]),r.flags|=2048,Mi(9,Ii.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=_i(),t=Os.identifierPrefix;if(aa){var n=Jo;t=":"+t+"R"+(n=(Xo&~(1<<32-it(Xo)-1)).toString(32)+n),0<(n=wi++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Si++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},sl={readContext:_a,useCallback:Yi,useContext:_a,useEffect:Ui,useImperativeHandle:Gi,useInsertionEffect:Wi,useLayoutEffect:Ki,useMemo:Xi,useReducer:Ti,useRef:zi,useState:function(){return Ti(Pi)},useDebugValue:Qi,useDeferredValue:function(e){return Ji($i(),gi.memoizedState,e)},useTransition:function(){return[Ti(Pi)[0],$i().memoizedState]},useMutableSource:Ri,useSyncExternalStore:Ai,useId:el,unstable_isNewReconciler:!1},ul={readContext:_a,useCallback:Yi,useContext:_a,useEffect:Ui,useImperativeHandle:Gi,useInsertionEffect:Wi,useLayoutEffect:Ki,useMemo:Xi,useReducer:Oi,useRef:zi,useState:function(){return Oi(Pi)},useDebugValue:Qi,useDeferredValue:function(e){var t=$i();return null===gi?t.memoizedState=e:Ji(t,gi.memoizedState,e)},useTransition:function(){return[Oi(Pi)[0],$i().memoizedState]},useMutableSource:Ri,useSyncExternalStore:Ai,useId:el,unstable_isNewReconciler:!1};function cl(e,t){try{var n="",r=t;do{n+=j(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function dl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function fl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var pl="function"==typeof WeakMap?WeakMap:Map;function hl(e,t,n){(n=Ia(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ws||(Ws=!0,Ks=r),fl(0,t)},n}function ml(e,t,n){(n=Ia(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){fl(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){fl(0,t),"function"!=typeof r&&(null===qs?qs=new Set([this]):qs.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gl(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new pl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=_u.bind(null,e,t,n),t.then(e,e))}function vl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function yl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Ia(-1,1)).tag=2,Na(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var bl=w.ReactCurrentOwner,wl=!1;function Sl(e,t,n,r){t.child=null===e?Ja(t,null,n,r):Xa(t,e.child,n,r)}function xl(e,t,n,r,o){n=n.render;var a=t.ref;return Ea(t,o),r=Ci(e,t,n,r,a,o),n=Ei(),null===e||wl?(aa&&n&&ta(t),t.flags|=1,Sl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Wl(e,t,o))}function kl(e,t,n,r,o){if(null===e){var a=n.type;return"function"!=typeof a||Du(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Nu(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Cl(e,t,a,r,o))}if(a=e.child,0==(e.lanes&o)){var i=a.memoizedProps;if((n=null!==(n=n.compare)?n:sr)(i,r)&&e.ref===t.ref)return Wl(e,t,o)}return t.flags|=1,(e=Iu(a,r)).ref=t.ref,e.return=t,t.child=e}function Cl(e,t,n,r,o){if(null!==e){var a=e.memoizedProps;if(sr(a,r)&&e.ref===t.ref){if(wl=!1,t.pendingProps=r=a,0==(e.lanes&o))return t.lanes=e.lanes,Wl(e,t,o);0!=(131072&e.flags)&&(wl=!0)}}return $l(e,t,n,r,o)}function El(e,t,n){var r=t.pendingProps,o=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},$o(Is,Ds),Ds|=n;else{if(0==(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,$o(Is,Ds),Ds|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,$o(Is,Ds),Ds|=r}else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,$o(Is,Ds),Ds|=r;return Sl(e,t,o,n),t.child}function _l(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function $l(e,t,n,r,o){var a=Do(n)?Ro:To.current;return a=Ao(t,a),Ea(t,o),n=Ci(e,t,n,r,a,o),r=Ei(),null===e||wl?(aa&&r&&ta(t),t.flags|=1,Sl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,Wl(e,t,o))}function Pl(e,t,n,r,o){if(Do(n)){var a=!0;Lo(t)}else a=!1;if(Ea(t,o),null===t.stateNode)Ul(e,t),Ua(t,n,r),Ka(t,n,r,o),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var s=i.context,u=n.contextType;u="object"==typeof u&&null!==u?_a(u):Ao(t,u=Do(n)?Ro:To.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||s!==u)&&Wa(t,i,r,u),Ra=!1;var f=t.memoizedState;i.state=f,Ba(t,r,i,o),s=t.memoizedState,l!==r||f!==s||Oo.current||Ra?("function"==typeof c&&(ja(t,n,c,r),s=t.memoizedState),(l=Ra||Ha(t,n,l,r,f,s,u))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4194308)):("function"==typeof i.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=s),i.props=r,i.state=s,i.context=u,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4194308),r=!1)}else{i=t.stateNode,Da(e,t),l=t.memoizedProps,u=t.type===t.elementType?l:va(t.type,l),i.props=u,d=t.pendingProps,f=i.context,s="object"==typeof(s=n.contextType)&&null!==s?_a(s):Ao(t,s=Do(n)?Ro:To.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==s)&&Wa(t,i,r,s),Ra=!1,f=t.memoizedState,i.state=f,Ba(t,r,i,o);var h=t.memoizedState;l!==d||f!==h||Oo.current||Ra?("function"==typeof p&&(ja(t,n,p,r),h=t.memoizedState),(u=Ra||Ha(t,n,u,r,f,h,s)||!1)?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,h,s),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,h,s)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=h),i.props=r,i.state=h,i.context=s,r=u):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Tl(e,t,n,r,a,o)}function Tl(e,t,n,r,o,a){_l(e,t);var i=0!=(128&t.flags);if(!r&&!i)return o&&Bo(t,n,!1),Wl(e,t,a);r=t.stateNode,bl.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Xa(t,e.child,null,a),t.child=Xa(t,null,l,a)):Sl(e,t,l,a),t.memoizedState=r.state,o&&Bo(t,n,!0),t.child}function Ol(e){var t=e.stateNode;t.pendingContext?No(0,t.pendingContext,t.pendingContext!==t.context):t.context&&No(0,t.context,!1),oi(e,t.containerInfo)}function Rl(e,t,n,r,o){return ha(),ma(o),t.flags|=256,Sl(e,t,n,r),t.child}var Al,Dl,Il,Nl,Fl={dehydrated:null,treeContext:null,retryLane:0};function Ll(e){return{baseLanes:e,cachePool:null,transitions:null}}function Bl(e,t,n){var r,o=t.pendingProps,i=si.current,l=!1,s=0!=(128&t.flags);if((r=s)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),$o(si,1&i),null===e)return ca(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(s=o.children,e=o.fallback,l?(o=t.mode,l=t.child,s={mode:"hidden",children:s},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=s):l=Lu(s,o,0,null),e=Fu(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Ll(n),t.memoizedState=Fl,e):Ml(t,s));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,zl(e,t,l,r=dl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Lu({mode:"visible",children:r.children},o,0,null),(i=Fu(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Xa(t,e.child,null,l),t.child.memoizedState=Ll(l),t.memoizedState=Fl,i);if(0==(1&t.mode))return zl(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var s=r.dgst;return r=s,zl(e,t,l,r=dl(i=Error(a(419)),r,void 0))}if(s=0!=(l&e.childLanes),wl||s){if(null!==(r=Os)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,Oa(e,o),ru(r,e,o,-1))}return gu(),zl(e,t,l,r=dl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Pu.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,oa=uo(o.nextSibling),ra=t,aa=!0,ia=null,null!==e&&(Go[Qo++]=Xo,Go[Qo++]=Jo,Go[Qo++]=Yo,Xo=e.id,Jo=e.overflow,Yo=t),(t=Ml(t,r.children)).flags|=4096,t)}(e,t,s,o,r,i,n);if(l){l=o.fallback,s=t.mode,r=(i=e.child).sibling;var u={mode:"hidden",children:o.children};return 0==(1&s)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=u,t.deletions=null):(o=Iu(i,u)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Iu(r,l):(l=Fu(l,s,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,s=null===(s=e.child.memoizedState)?Ll(n):{baseLanes:s.baseLanes|n,cachePool:null,transitions:s.transitions},l.memoizedState=s,l.childLanes=e.childLanes&~n,t.memoizedState=Fl,o}return e=(l=e.child).sibling,o=Iu(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function Ml(e,t){return(t=Lu({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function zl(e,t,n,r){return null!==r&&ma(r),Xa(t,e.child,null,n),(e=Ml(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function jl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ca(e.return,t,n)}function Vl(e,t,n,r,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o)}function Hl(e,t,n){var r=t.pendingProps,o=r.revealOrder,a=r.tail;if(Sl(e,t,r.children,n),0!=(2&(r=si.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&jl(e,n,t);else if(19===e.tag)jl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if($o(si,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ui(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Vl(t,!1,o,n,a);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ui(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Vl(t,!0,n,null,a);break;case"together":Vl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Ul(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Wl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ls|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Iu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Iu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Kl(e,t){if(!aa)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ql(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Gl(e,t,n){var r=t.pendingProps;switch(na(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return ql(t),null;case 1:case 17:return Do(t.type)&&Io(),ql(t),null;case 3:return r=t.stateNode,ai(),_o(Oo),_o(To),di(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(fa(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==ia&&(lu(ia),ia=null))),Dl(e,t),ql(t),null;case 5:li(t);var o=ri(ni.current);if(n=t.type,null!==e&&null!=t.stateNode)Il(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return ql(t),null}if(e=ri(ei.current),fa(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[po]=t,r[ho]=i,e=0!=(1&t.mode),n){case"dialog":Mr("cancel",r),Mr("close",r);break;case"iframe":case"object":case"embed":Mr("load",r);break;case"video":case"audio":for(o=0;o<Nr.length;o++)Mr(Nr[o],r);break;case"source":Mr("error",r);break;case"img":case"image":case"link":Mr("error",r),Mr("load",r);break;case"details":Mr("toggle",r);break;case"input":Y(r,i),Mr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},Mr("invalid",r);break;case"textarea":oe(r,i),Mr("invalid",r)}for(var s in ye(n,i),o=null,i)if(i.hasOwnProperty(s)){var u=i[s];"children"===s?"string"==typeof u?r.textContent!==u&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,u,e),o=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(!0!==i.suppressHydrationWarning&&Jr(r.textContent,u,e),o=["children",""+u]):l.hasOwnProperty(s)&&null!=u&&"onScroll"===s&&Mr("scroll",r)}switch(n){case"input":K(r),Z(r,i,!0);break;case"textarea":K(r),ie(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=Zr)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{s=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=le(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[po]=t,e[ho]=r,Al(e,t,!1,!1),t.stateNode=e;e:{switch(s=be(n,r),n){case"dialog":Mr("cancel",e),Mr("close",e),o=r;break;case"iframe":case"object":case"embed":Mr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Nr.length;o++)Mr(Nr[o],e);o=r;break;case"source":Mr("error",e),o=r;break;case"img":case"image":case"link":Mr("error",e),Mr("load",e),o=r;break;case"details":Mr("toggle",e),o=r;break;case"input":Y(e,r),o=Q(e,r),Mr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=L({},r,{value:void 0}),Mr("invalid",e);break;case"textarea":oe(e,r),o=re(e,r),Mr("invalid",e)}for(i in ye(n,o),u=o)if(u.hasOwnProperty(i)){var c=u[i];"style"===i?ge(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&fe(e,c):"number"==typeof c&&fe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(l.hasOwnProperty(i)?null!=c&&"onScroll"===i&&Mr("scroll",e):null!=c&&b(e,i,c,s))}switch(n){case"input":K(e),Z(e,r,!1);break;case"textarea":K(e),ie(e);break;case"option":null!=r.value&&e.setAttribute("value",""+U(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?ne(e,!!r.multiple,i,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Zr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return ql(t),null;case 6:if(e&&null!=t.stateNode)Nl(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=ri(ni.current),ri(ei.current),fa(t)){if(r=t.stateNode,n=t.memoizedProps,r[po]=t,(i=r.nodeValue!==n)&&null!==(e=ra))switch(e.tag){case 3:Jr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Jr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[po]=t,t.stateNode=r}return ql(t),null;case 13:if(_o(si),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(aa&&null!==oa&&0!=(1&t.mode)&&0==(128&t.flags))pa(),ha(),t.flags|=98560,i=!1;else if(i=fa(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[po]=t}else ha(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;ql(t),i=!1}else null!==ia&&(lu(ia),ia=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&si.current)?0===Ns&&(Ns=3):gu())),null!==t.updateQueue&&(t.flags|=4),ql(t),null);case 4:return ai(),Dl(e,t),null===e&&Vr(t.stateNode.containerInfo),ql(t),null;case 10:return ka(t.type._context),ql(t),null;case 19:if(_o(si),null===(i=t.memoizedState))return ql(t),null;if(r=0!=(128&t.flags),null===(s=i.rendering))if(r)Kl(i,!1);else{if(0!==Ns||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(s=ui(e))){for(t.flags|=128,Kl(i,!1),null!==(r=s.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(s=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=s.childLanes,i.lanes=s.lanes,i.child=s.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=s.memoizedProps,i.memoizedState=s.memoizedState,i.updateQueue=s.updateQueue,i.type=s.type,e=s.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return $o(si,1&si.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>Hs&&(t.flags|=128,r=!0,Kl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ui(s))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Kl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!s.alternate&&!aa)return ql(t),null}else 2*Xe()-i.renderingStartTime>Hs&&1073741824!==n&&(t.flags|=128,r=!0,Kl(i,!1),t.lanes=4194304);i.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=i.last)?n.sibling=s:t.child=s,i.last=s)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=si.current,$o(si,r?1&n|2:1&n),t):(ql(t),null);case 22:case 23:return fu(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ds)&&(ql(t),6&t.subtreeFlags&&(t.flags|=8192)):ql(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Ql(e,t){switch(na(t),t.tag){case 1:return Do(t.type)&&Io(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return ai(),_o(Oo),_o(To),di(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return li(t),null;case 13:if(_o(si),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return _o(si),null;case 4:return ai(),null;case 10:return ka(t.type._context),null;case 22:case 23:return fu(),null;default:return null}}Al=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Dl=function(){},Il=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,ri(ei.current);var a,i=null;switch(n){case"input":o=Q(e,o),r=Q(e,r),i=[];break;case"select":o=L({},o,{value:void 0}),r=L({},r,{value:void 0}),i=[];break;case"textarea":o=re(e,o),r=re(e,r),i=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Zr)}for(c in ye(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var s=o[c];for(a in s)s.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(l.hasOwnProperty(c)?i||(i=[]):(i=i||[]).push(c,null));for(c in r){var u=r[c];if(s=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&u!==s&&(null!=u||null!=s))if("style"===c)if(s){for(a in s)!s.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&s[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(i||(i=[]),i.push(c,n)),n=u;else"dangerouslySetInnerHTML"===c?(u=u?u.__html:void 0,s=s?s.__html:void 0,null!=u&&s!==u&&(i=i||[]).push(c,u)):"children"===c?"string"!=typeof u&&"number"!=typeof u||(i=i||[]).push(c,""+u):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(l.hasOwnProperty(c)?(null!=u&&"onScroll"===c&&Mr("scroll",e),i||s===u||(i=[])):(i=i||[]).push(c,u))}n&&(i=i||[]).push("style",n);var c=i;(t.updateQueue=c)&&(t.flags|=4)}},Nl=function(e,t,n,r){n!==r&&(t.flags|=4)};var Yl=!1,Xl=!1,Jl="function"==typeof WeakSet?WeakSet:Set,Zl=null;function es(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Eu(e,t,n)}else n.current=null}function ts(e,t,n){try{n()}catch(n){Eu(e,t,n)}}var ns=!1;function rs(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var a=o.destroy;o.destroy=void 0,void 0!==a&&ts(t,n,a)}o=o.next}while(o!==r)}}function os(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function as(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function is(e){var t=e.alternate;null!==t&&(e.alternate=null,is(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[po],delete t[ho],delete t[go],delete t[vo],delete t[yo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ls(e){return 5===e.tag||3===e.tag||4===e.tag}function ss(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ls(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function us(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Zr));else if(4!==r&&null!==(e=e.child))for(us(e,t,n),e=e.sibling;null!==e;)us(e,t,n),e=e.sibling}function cs(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cs(e,t,n),e=e.sibling;null!==e;)cs(e,t,n),e=e.sibling}var ds=null,fs=!1;function ps(e,t,n){for(n=n.child;null!==n;)hs(e,t,n),n=n.sibling}function hs(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(ot,n)}catch(e){}switch(n.tag){case 5:Xl||es(n,t);case 6:var r=ds,o=fs;ds=null,ps(e,t,n),fs=o,null!==(ds=r)&&(fs?(e=ds,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ds.removeChild(n.stateNode));break;case 18:null!==ds&&(fs?(e=ds,n=n.stateNode,8===e.nodeType?so(e.parentNode,n):1===e.nodeType&&so(e,n),Vt(e)):so(ds,n.stateNode));break;case 4:r=ds,o=fs,ds=n.stateNode.containerInfo,fs=!0,ps(e,t,n),ds=r,fs=o;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var a=o,i=a.destroy;a=a.tag,void 0!==i&&(0!=(2&a)||0!=(4&a))&&ts(n,t,i),o=o.next}while(o!==r)}ps(e,t,n);break;case 1:if(!Xl&&(es(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Eu(n,t,e)}ps(e,t,n);break;case 21:ps(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,ps(e,t,n),Xl=r):ps(e,t,n);break;default:ps(e,t,n)}}function ms(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Jl),t.forEach((function(t){var r=Tu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gs(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,s=l;e:for(;null!==s;){switch(s.tag){case 5:ds=s.stateNode,fs=!1;break e;case 3:case 4:ds=s.stateNode.containerInfo,fs=!0;break e}s=s.return}if(null===ds)throw Error(a(160));hs(i,l,o),ds=null,fs=!1;var u=o.alternate;null!==u&&(u.return=null),o.return=null}catch(e){Eu(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)vs(t,e),t=t.sibling}function vs(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gs(t,e),ys(e),4&r){try{rs(3,e,e.return),os(3,e)}catch(t){Eu(e,e.return,t)}try{rs(5,e,e.return)}catch(t){Eu(e,e.return,t)}}break;case 1:gs(t,e),ys(e),512&r&&null!==n&&es(n,n.return);break;case 5:if(gs(t,e),ys(e),512&r&&null!==n&&es(n,n.return),32&e.flags){var o=e.stateNode;try{fe(o,"")}catch(t){Eu(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,s=e.type,u=e.updateQueue;if(e.updateQueue=null,null!==u)try{"input"===s&&"radio"===i.type&&null!=i.name&&X(o,i),be(s,l);var c=be(s,i);for(l=0;l<u.length;l+=2){var d=u[l],f=u[l+1];"style"===d?ge(o,f):"dangerouslySetInnerHTML"===d?de(o,f):"children"===d?fe(o,f):b(o,d,f,c)}switch(s){case"input":J(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?ne(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?ne(o,!!i.multiple,i.defaultValue,!0):ne(o,!!i.multiple,i.multiple?[]:"",!1))}o[ho]=i}catch(t){Eu(e,e.return,t)}}break;case 6:if(gs(t,e),ys(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Eu(e,e.return,t)}}break;case 3:if(gs(t,e),ys(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Vt(t.containerInfo)}catch(t){Eu(e,e.return,t)}break;case 4:default:gs(t,e),ys(e);break;case 13:gs(t,e),ys(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Vs=Xe())),4&r&&ms(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(c=Xl)||d,gs(t,e),Xl=c):gs(t,e),ys(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!d&&0!=(1&e.mode))for(Zl=e,d=e.child;null!==d;){for(f=Zl=d;null!==Zl;){switch(h=(p=Zl).child,p.tag){case 0:case 11:case 14:case 15:rs(4,p,p.return);break;case 1:es(p,p.return);var m=p.stateNode;if("function"==typeof m.componentWillUnmount){r=p,n=p.return;try{t=r,m.props=t.memoizedProps,m.state=t.memoizedState,m.componentWillUnmount()}catch(e){Eu(r,n,e)}}break;case 5:es(p,p.return);break;case 22:if(null!==p.memoizedState){xs(f);continue}}null!==h?(h.return=p,Zl=h):xs(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{o=f.stateNode,c?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(s=f.stateNode,l=null!=(u=f.memoizedProps.style)&&u.hasOwnProperty("display")?u.display:null,s.style.display=me("display",l))}catch(t){Eu(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=c?"":f.memoizedProps}catch(t){Eu(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:gs(t,e),ys(e),4&r&&ms(e);case 21:}}function ys(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ls(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(fe(o,""),r.flags&=-33),cs(e,ss(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;us(e,ss(e),i);break;default:throw Error(a(161))}}catch(t){Eu(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function bs(e,t,n){Zl=e,ws(e,t,n)}function ws(e,t,n){for(var r=0!=(1&e.mode);null!==Zl;){var o=Zl,a=o.child;if(22===o.tag&&r){var i=null!==o.memoizedState||Yl;if(!i){var l=o.alternate,s=null!==l&&null!==l.memoizedState||Xl;l=Yl;var u=Xl;if(Yl=i,(Xl=s)&&!u)for(Zl=o;null!==Zl;)s=(i=Zl).child,22===i.tag&&null!==i.memoizedState?ks(o):null!==s?(s.return=i,Zl=s):ks(o);for(;null!==a;)Zl=a,ws(a,t,n),a=a.sibling;Zl=o,Yl=l,Xl=u}Ss(e)}else 0!=(8772&o.subtreeFlags)&&null!==a?(a.return=o,Zl=a):Ss(e)}}function Ss(e){for(;null!==Zl;){var t=Zl;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xl||os(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:va(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&Ma(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Ma(t,l,n)}break;case 5:var s=t.stateNode;if(null===n&&4&t.flags){n=s;var u=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":u.autoFocus&&n.focus();break;case"img":u.src&&(n.src=u.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var d=c.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Vt(f)}}}break;default:throw Error(a(163))}Xl||512&t.flags&&as(t)}catch(e){Eu(t,t.return,e)}}if(t===e){Zl=null;break}if(null!==(n=t.sibling)){n.return=t.return,Zl=n;break}Zl=t.return}}function xs(e){for(;null!==Zl;){var t=Zl;if(t===e){Zl=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Zl=n;break}Zl=t.return}}function ks(e){for(;null!==Zl;){var t=Zl;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{os(4,t)}catch(e){Eu(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Eu(t,o,e)}}var a=t.return;try{as(t)}catch(e){Eu(t,a,e)}break;case 5:var i=t.return;try{as(t)}catch(e){Eu(t,i,e)}}}catch(e){Eu(t,t.return,e)}if(t===e){Zl=null;break}var l=t.sibling;if(null!==l){l.return=t.return,Zl=l;break}Zl=t.return}}var Cs,Es=Math.ceil,_s=w.ReactCurrentDispatcher,$s=w.ReactCurrentOwner,Ps=w.ReactCurrentBatchConfig,Ts=0,Os=null,Rs=null,As=0,Ds=0,Is=Eo(0),Ns=0,Fs=null,Ls=0,Bs=0,Ms=0,zs=null,js=null,Vs=0,Hs=1/0,Us=null,Ws=!1,Ks=null,qs=null,Gs=!1,Qs=null,Ys=0,Xs=0,Js=null,Zs=-1,eu=0;function tu(){return 0!=(6&Ts)?Xe():-1!==Zs?Zs:Zs=Xe()}function nu(e){return 0==(1&e.mode)?1:0!=(2&Ts)&&0!==As?As&-As:null!==ga.transition?(0===eu&&(eu=mt()),eu):0!==(e=bt)?e:e=void 0===(e=window.event)?16:Yt(e.type)}function ru(e,t,n,r){if(50<Xs)throw Xs=0,Js=null,Error(a(185));vt(e,n,r),0!=(2&Ts)&&e===Os||(e===Os&&(0==(2&Ts)&&(Bs|=n),4===Ns&&su(e,As)),ou(e,r),1===n&&0===Ts&&0==(1&t.mode)&&(Hs=Xe()+500,zo&&Ho()))}function ou(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,a=e.pendingLanes;0<a;){var i=31-it(a),l=1<<i,s=o[i];-1===s?0!=(l&n)&&0==(l&r)||(o[i]=pt(l,t)):s<=t&&(e.expiredLanes|=l),a&=~l}}(e,t);var r=ft(e,e===Os?As:0);if(0===r)null!==n&&Ge(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Ge(n),1===t)0===e.tag?function(e){zo=!0,Vo(e)}(uu.bind(null,e)):Vo(uu.bind(null,e)),io((function(){0==(6&Ts)&&Ho()})),n=null;else{switch(wt(r)){case 1:n=Ze;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Ou(n,au.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function au(e,t){if(Zs=-1,eu=0,0!=(6&Ts))throw Error(a(327));var n=e.callbackNode;if(ku()&&e.callbackNode!==n)return null;var r=ft(e,e===Os?As:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=vu(e,r);else{t=r;var o=Ts;Ts|=2;var i=mu();for(Os===e&&As===t||(Us=null,Hs=Xe()+500,pu(e,t));;)try{bu();break}catch(t){hu(e,t)}xa(),_s.current=i,Ts=o,null!==Rs?t=0:(Os=null,As=0,t=Ns)}if(0!==t){if(2===t&&0!==(o=ht(e))&&(r=o,t=iu(e,o)),1===t)throw n=Fs,pu(e,0),su(e,r),ou(e,Xe()),n;if(6===t)su(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],a=o.getSnapshot;o=o.value;try{if(!lr(a(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=vu(e,r))&&0!==(i=ht(e))&&(r=i,t=iu(e,i)),1===t))throw n=Fs,pu(e,0),su(e,r),ou(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:xu(e,js,Us);break;case 3:if(su(e,r),(130023424&r)===r&&10<(t=Vs+500-Xe())){if(0!==ft(e,0))break;if(((o=e.suspendedLanes)&r)!==r){tu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=ro(xu.bind(null,e,js,Us),t);break}xu(e,js,Us);break;case 4:if(su(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-it(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Es(r/1960))-r)){e.timeoutHandle=ro(xu.bind(null,e,js,Us),r);break}xu(e,js,Us);break;default:throw Error(a(329))}}}return ou(e,Xe()),e.callbackNode===n?au.bind(null,e):null}function iu(e,t){var n=zs;return e.current.memoizedState.isDehydrated&&(pu(e,t).flags|=256),2!==(e=vu(e,t))&&(t=js,js=n,null!==t&&lu(t)),e}function lu(e){null===js?js=e:js.push.apply(js,e)}function su(e,t){for(t&=~Ms,t&=~Bs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-it(t),r=1<<n;e[n]=-1,t&=~r}}function uu(e){if(0!=(6&Ts))throw Error(a(327));ku();var t=ft(e,0);if(0==(1&t))return ou(e,Xe()),null;var n=vu(e,t);if(0!==e.tag&&2===n){var r=ht(e);0!==r&&(t=r,n=iu(e,r))}if(1===n)throw n=Fs,pu(e,0),su(e,t),ou(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,xu(e,js,Us),ou(e,Xe()),null}function cu(e,t){var n=Ts;Ts|=1;try{return e(t)}finally{0===(Ts=n)&&(Hs=Xe()+500,zo&&Ho())}}function du(e){null!==Qs&&0===Qs.tag&&0==(6&Ts)&&ku();var t=Ts;Ts|=1;var n=Ps.transition,r=bt;try{if(Ps.transition=null,bt=1,e)return e()}finally{bt=r,Ps.transition=n,0==(6&(Ts=t))&&Ho()}}function fu(){Ds=Is.current,_o(Is)}function pu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,oo(n)),null!==Rs)for(n=Rs.return;null!==n;){var r=n;switch(na(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Io();break;case 3:ai(),_o(Oo),_o(To),di();break;case 5:li(r);break;case 4:ai();break;case 13:case 19:_o(si);break;case 10:ka(r.type._context);break;case 22:case 23:fu()}n=n.return}if(Os=e,Rs=e=Iu(e.current,null),As=Ds=t,Ns=0,Fs=null,Ms=Bs=Ls=0,js=zs=null,null!==$a){for(t=0;t<$a.length;t++)if(null!==(r=(n=$a[t]).interleaved)){n.interleaved=null;var o=r.next,a=n.pending;if(null!==a){var i=a.next;a.next=o,r.next=i}n.pending=r}$a=null}return e}function hu(e,t){for(;;){var n=Rs;try{if(xa(),fi.current=il,yi){for(var r=mi.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}yi=!1}if(hi=0,vi=gi=mi=null,bi=!1,wi=0,$s.current=null,null===n||null===n.return){Ns=1,Fs=t,Rs=null;break}e:{var i=e,l=n.return,s=n,u=t;if(t=As,s.flags|=32768,null!==u&&"object"==typeof u&&"function"==typeof u.then){var c=u,d=s,f=d.tag;if(0==(1&d.mode)&&(0===f||11===f||15===f)){var p=d.alternate;p?(d.updateQueue=p.updateQueue,d.memoizedState=p.memoizedState,d.lanes=p.lanes):(d.updateQueue=null,d.memoizedState=null)}var h=vl(l);if(null!==h){h.flags&=-257,yl(h,l,s,0,t),1&h.mode&&gl(i,c,t),u=c;var m=(t=h).updateQueue;if(null===m){var g=new Set;g.add(u),t.updateQueue=g}else m.add(u);break e}if(0==(1&t)){gl(i,c,t),gu();break e}u=Error(a(426))}else if(aa&&1&s.mode){var v=vl(l);if(null!==v){0==(65536&v.flags)&&(v.flags|=256),yl(v,l,s,0,t),ma(cl(u,s));break e}}i=u=cl(u,s),4!==Ns&&(Ns=2),null===zs?zs=[i]:zs.push(i),i=l;do{switch(i.tag){case 3:i.flags|=65536,t&=-t,i.lanes|=t,La(i,hl(0,u,t));break e;case 1:s=u;var y=i.type,b=i.stateNode;if(0==(128&i.flags)&&("function"==typeof y.getDerivedStateFromError||null!==b&&"function"==typeof b.componentDidCatch&&(null===qs||!qs.has(b)))){i.flags|=65536,t&=-t,i.lanes|=t,La(i,ml(i,s,t));break e}}i=i.return}while(null!==i)}Su(n)}catch(e){t=e,Rs===n&&null!==n&&(Rs=n=n.return);continue}break}}function mu(){var e=_s.current;return _s.current=il,null===e?il:e}function gu(){0!==Ns&&3!==Ns&&2!==Ns||(Ns=4),null===Os||0==(268435455&Ls)&&0==(268435455&Bs)||su(Os,As)}function vu(e,t){var n=Ts;Ts|=2;var r=mu();for(Os===e&&As===t||(Us=null,pu(e,t));;)try{yu();break}catch(t){hu(e,t)}if(xa(),Ts=n,_s.current=r,null!==Rs)throw Error(a(261));return Os=null,As=0,Ns}function yu(){for(;null!==Rs;)wu(Rs)}function bu(){for(;null!==Rs&&!Qe();)wu(Rs)}function wu(e){var t=Cs(e.alternate,e,Ds);e.memoizedProps=e.pendingProps,null===t?Su(e):Rs=t,$s.current=null}function Su(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Gl(n,t,Ds)))return void(Rs=n)}else{if(null!==(n=Ql(n,t)))return n.flags&=32767,void(Rs=n);if(null===e)return Ns=6,void(Rs=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Rs=t);Rs=t=e}while(null!==t);0===Ns&&(Ns=5)}function xu(e,t,n){var r=bt,o=Ps.transition;try{Ps.transition=null,bt=1,function(e,t,n,r){do{ku()}while(null!==Qs);if(0!=(6&Ts))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-it(n),a=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~a}}(e,i),e===Os&&(Rs=Os=null,As=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Gs||(Gs=!0,Ou(tt,(function(){return ku(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Ps.transition,Ps.transition=null;var l=bt;bt=1;var s=Ts;Ts|=4,$s.current=null,function(e,t){if(eo=Ut,pr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,s=-1,u=-1,c=0,d=0,f=e,p=null;t:for(;;){for(var h;f!==n||0!==o&&3!==f.nodeType||(s=l+o),f!==i||0!==r&&3!==f.nodeType||(u=l+r),3===f.nodeType&&(l+=f.nodeValue.length),null!==(h=f.firstChild);)p=f,f=h;for(;;){if(f===e)break t;if(p===n&&++c===o&&(s=l),p===i&&++d===r&&(u=l),null!==(h=f.nextSibling))break;p=(f=p).parentNode}f=h}n=-1===s||-1===u?null:{start:s,end:u}}else n=null}n=n||{start:0,end:0}}else n=null;for(to={focusedElem:e,selectionRange:n},Ut=!1,Zl=t;null!==Zl;)if(e=(t=Zl).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,Zl=e;else for(;null!==Zl;){t=Zl;try{var m=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==m){var g=m.memoizedProps,v=m.memoizedState,y=t.stateNode,b=y.getSnapshotBeforeUpdate(t.elementType===t.type?g:va(t.type,g),v);y.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var w=t.stateNode.containerInfo;1===w.nodeType?w.textContent="":9===w.nodeType&&w.documentElement&&w.removeChild(w.documentElement);break;default:throw Error(a(163))}}catch(e){Eu(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Zl=e;break}Zl=t.return}m=ns,ns=!1}(e,n),vs(n,e),hr(to),Ut=!!eo,to=eo=null,e.current=n,bs(n,e,o),Ye(),Ts=s,bt=l,Ps.transition=i}else e.current=n;if(Gs&&(Gs=!1,Qs=e,Ys=o),0===(i=e.pendingLanes)&&(qs=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(ot,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),ou(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(Ws)throw Ws=!1,e=Ks,Ks=null,e;0!=(1&Ys)&&0!==e.tag&&ku(),0!=(1&(i=e.pendingLanes))?e===Js?Xs++:(Xs=0,Js=e):Xs=0,Ho()}(e,t,n,r)}finally{Ps.transition=o,bt=r}return null}function ku(){if(null!==Qs){var e=wt(Ys),t=Ps.transition,n=bt;try{if(Ps.transition=null,bt=16>e?16:e,null===Qs)var r=!1;else{if(e=Qs,Qs=null,Ys=0,0!=(6&Ts))throw Error(a(331));var o=Ts;for(Ts|=4,Zl=e.current;null!==Zl;){var i=Zl,l=i.child;if(0!=(16&Zl.flags)){var s=i.deletions;if(null!==s){for(var u=0;u<s.length;u++){var c=s[u];for(Zl=c;null!==Zl;){var d=Zl;switch(d.tag){case 0:case 11:case 15:rs(8,d,i)}var f=d.child;if(null!==f)f.return=d,Zl=f;else for(;null!==Zl;){var p=(d=Zl).sibling,h=d.return;if(is(d),d===c){Zl=null;break}if(null!==p){p.return=h,Zl=p;break}Zl=h}}}var m=i.alternate;if(null!==m){var g=m.child;if(null!==g){m.child=null;do{var v=g.sibling;g.sibling=null,g=v}while(null!==g)}}Zl=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,Zl=l;else e:for(;null!==Zl;){if(0!=(2048&(i=Zl).flags))switch(i.tag){case 0:case 11:case 15:rs(9,i,i.return)}var y=i.sibling;if(null!==y){y.return=i.return,Zl=y;break e}Zl=i.return}}var b=e.current;for(Zl=b;null!==Zl;){var w=(l=Zl).child;if(0!=(2064&l.subtreeFlags)&&null!==w)w.return=l,Zl=w;else e:for(l=b;null!==Zl;){if(0!=(2048&(s=Zl).flags))try{switch(s.tag){case 0:case 11:case 15:os(9,s)}}catch(e){Eu(s,s.return,e)}if(s===l){Zl=null;break e}var S=s.sibling;if(null!==S){S.return=s.return,Zl=S;break e}Zl=s.return}}if(Ts=o,Ho(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(ot,e)}catch(e){}r=!0}return r}finally{bt=n,Ps.transition=t}}return!1}function Cu(e,t,n){e=Na(e,t=hl(0,t=cl(n,t),1),1),t=tu(),null!==e&&(vt(e,1,t),ou(e,t))}function Eu(e,t,n){if(3===e.tag)Cu(e,e,n);else for(;null!==t;){if(3===t.tag){Cu(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===qs||!qs.has(r))){t=Na(t,e=ml(t,e=cl(n,e),1),1),e=tu(),null!==t&&(vt(t,1,e),ou(t,e));break}}t=t.return}}function _u(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=tu(),e.pingedLanes|=e.suspendedLanes&n,Os===e&&(As&n)===n&&(4===Ns||3===Ns&&(130023424&As)===As&&500>Xe()-Vs?pu(e,0):Ms|=n),ou(e,t)}function $u(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ct,0==(130023424&(ct<<=1))&&(ct=4194304)));var n=tu();null!==(e=Oa(e,t))&&(vt(e,t,n),ou(e,n))}function Pu(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),$u(e,n)}function Tu(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),$u(e,n)}function Ou(e,t){return qe(e,t)}function Ru(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Au(e,t,n,r){return new Ru(e,t,n,r)}function Du(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Iu(e,t){var n=e.alternate;return null===n?((n=Au(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Nu(e,t,n,r,o,i){var l=2;if(r=e,"function"==typeof e)Du(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case k:return Fu(n.children,o,i,t);case C:l=8,o|=8;break;case E:return(e=Au(12,n,t,2|o)).elementType=E,e.lanes=i,e;case T:return(e=Au(13,n,t,o)).elementType=T,e.lanes=i,e;case O:return(e=Au(19,n,t,o)).elementType=O,e.lanes=i,e;case D:return Lu(n,o,i,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case _:l=10;break e;case $:l=9;break e;case P:l=11;break e;case R:l=14;break e;case A:l=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Au(l,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function Fu(e,t,n,r){return(e=Au(7,e,r,t)).lanes=n,e}function Lu(e,t,n,r){return(e=Au(22,e,r,t)).elementType=D,e.lanes=n,e.stateNode={isHidden:!1},e}function Bu(e,t,n){return(e=Au(6,e,null,t)).lanes=n,e}function Mu(e,t,n){return(t=Au(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function zu(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=gt(0),this.expirationTimes=gt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=gt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function ju(e,t,n,r,o,a,i,l,s){return e=new zu(e,t,n,l,s),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Au(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Aa(a),e}function Vu(e){if(!e)return Po;e:{if(Ve(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Do(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Do(n))return Fo(e,n,t)}return t}function Hu(e,t,n,r,o,a,i,l,s){return(e=ju(n,r,!0,e,0,a,0,l,s)).context=Vu(null),n=e.current,(a=Ia(r=tu(),o=nu(n))).callback=null!=t?t:null,Na(n,a,o),e.current.lanes=o,vt(e,o,r),ou(e,r),e}function Uu(e,t,n,r){var o=t.current,a=tu(),i=nu(o);return n=Vu(n),null===t.context?t.context=n:t.pendingContext=n,(t=Ia(a,i)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Na(o,t,i))&&(ru(e,o,i,a),Fa(e,o,i)),i}function Wu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ku(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function qu(e,t){Ku(e,t),(e=e.alternate)&&Ku(e,t)}Cs=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Oo.current)wl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wl=!1,function(e,t,n){switch(t.tag){case 3:Ol(t),ha();break;case 5:ii(t);break;case 1:Do(t.type)&&Lo(t);break;case 4:oi(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;$o(ya,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?($o(si,1&si.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Bl(e,t,n):($o(si,1&si.current),null!==(e=Wl(e,t,n))?e.sibling:null);$o(si,1&si.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return Hl(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),$o(si,si.current),r)break;return null;case 22:case 23:return t.lanes=0,El(e,t,n)}return Wl(e,t,n)}(e,t,n);wl=0!=(131072&e.flags)}else wl=!1,aa&&0!=(1048576&t.flags)&&ea(t,qo,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ul(e,t),e=t.pendingProps;var o=Ao(t,To.current);Ea(t,n),o=Ci(null,t,r,e,o,n);var i=Ei();return t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Do(r)?(i=!0,Lo(t)):i=!1,t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,Aa(t),o.updater=Va,t.stateNode=o,o._reactInternals=t,Ka(t,r,e,n),t=Tl(null,t,r,!0,i,n)):(t.tag=0,aa&&i&&ta(t),Sl(null,t,o,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ul(e,t),e=t.pendingProps,r=(o=r._init)(r._payload),t.type=r,o=t.tag=function(e){if("function"==typeof e)return Du(e)?1:0;if(null!=e){if((e=e.$$typeof)===P)return 11;if(e===R)return 14}return 2}(r),e=va(r,e),o){case 0:t=$l(null,t,r,e,n);break e;case 1:t=Pl(null,t,r,e,n);break e;case 11:t=xl(null,t,r,e,n);break e;case 14:t=kl(null,t,r,va(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,o=t.pendingProps,$l(e,t,r,o=t.elementType===r?o:va(r,o),n);case 1:return r=t.type,o=t.pendingProps,Pl(e,t,r,o=t.elementType===r?o:va(r,o),n);case 3:e:{if(Ol(t),null===e)throw Error(a(387));r=t.pendingProps,o=(i=t.memoizedState).element,Da(e,t),Ba(t,r,null,n);var l=t.memoizedState;if(r=l.element,i.isDehydrated){if(i={element:r,isDehydrated:!1,cache:l.cache,pendingSuspenseBoundaries:l.pendingSuspenseBoundaries,transitions:l.transitions},t.updateQueue.baseState=i,t.memoizedState=i,256&t.flags){t=Rl(e,t,r,n,o=cl(Error(a(423)),t));break e}if(r!==o){t=Rl(e,t,r,n,o=cl(Error(a(424)),t));break e}for(oa=uo(t.stateNode.containerInfo.firstChild),ra=t,aa=!0,ia=null,n=Ja(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===o){t=Wl(e,t,n);break e}Sl(e,t,r,n)}t=t.child}return t;case 5:return ii(t),null===e&&ca(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,l=o.children,no(r,o)?l=null:null!==i&&no(r,i)&&(t.flags|=32),_l(e,t),Sl(e,t,l,n),t.child;case 6:return null===e&&ca(t),null;case 13:return Bl(e,t,n);case 4:return oi(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Xa(t,null,r,n):Sl(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,xl(e,t,r,o=t.elementType===r?o:va(r,o),n);case 7:return Sl(e,t,t.pendingProps,n),t.child;case 8:case 12:return Sl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,o=t.pendingProps,i=t.memoizedProps,l=o.value,$o(ya,r._currentValue),r._currentValue=l,null!==i)if(lr(i.value,l)){if(i.children===o.children&&!Oo.current){t=Wl(e,t,n);break e}}else for(null!==(i=t.child)&&(i.return=t);null!==i;){var s=i.dependencies;if(null!==s){l=i.child;for(var u=s.firstContext;null!==u;){if(u.context===r){if(1===i.tag){(u=Ia(-1,n&-n)).tag=2;var c=i.updateQueue;if(null!==c){var d=(c=c.shared).pending;null===d?u.next=u:(u.next=d.next,d.next=u),c.pending=u}}i.lanes|=n,null!==(u=i.alternate)&&(u.lanes|=n),Ca(i.return,n,t),s.lanes|=n;break}u=u.next}}else if(10===i.tag)l=i.type===t.type?null:i.child;else if(18===i.tag){if(null===(l=i.return))throw Error(a(341));l.lanes|=n,null!==(s=l.alternate)&&(s.lanes|=n),Ca(l,n,t),l=i.sibling}else l=i.child;if(null!==l)l.return=i;else for(l=i;null!==l;){if(l===t){l=null;break}if(null!==(i=l.sibling)){i.return=l.return,l=i;break}l=l.return}i=l}Sl(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=t.pendingProps.children,Ea(t,n),r=r(o=_a(o)),t.flags|=1,Sl(e,t,r,n),t.child;case 14:return o=va(r=t.type,t.pendingProps),kl(e,t,r,o=va(r.type,o),n);case 15:return Cl(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:va(r,o),Ul(e,t),t.tag=1,Do(r)?(e=!0,Lo(t)):e=!1,Ea(t,n),Ua(t,r,o),Ka(t,r,o,n),Tl(null,t,r,!0,e,n);case 19:return Hl(e,t,n);case 22:return El(e,t,n)}throw Error(a(156,t.tag))};var Gu="function"==typeof reportError?reportError:function(e){console.error(e)};function Qu(e){this._internalRoot=e}function Yu(e){this._internalRoot=e}function Xu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Ju(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Zu(){}function ec(e,t,n,r,o){var a=n._reactRootContainer;if(a){var i=a;if("function"==typeof o){var l=o;o=function(){var e=Wu(i);l.call(e)}}Uu(t,i,e,o)}else i=function(e,t,n,r,o){if(o){if("function"==typeof r){var a=r;r=function(){var e=Wu(i);a.call(e)}}var i=Hu(t,r,e,0,null,!1,0,"",Zu);return e._reactRootContainer=i,e[mo]=i.current,Vr(8===e.nodeType?e.parentNode:e),du(),i}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=Wu(s);l.call(e)}}var s=ju(e,0,!1,null,0,!1,0,"",Zu);return e._reactRootContainer=s,e[mo]=s.current,Vr(8===e.nodeType?e.parentNode:e),du((function(){Uu(t,s,n,r)})),s}(n,t,e,o,r);return Wu(i)}Yu.prototype.render=Qu.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Uu(e,t,null,null)},Yu.prototype.unmount=Qu.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;du((function(){Uu(null,e,null,null)})),t[mo]=null}},Yu.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ct();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Dt.length&&0!==t&&t<Dt[n].priority;n++);Dt.splice(n,0,e),0===n&&Lt(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),ou(t,Xe()),0==(6&Ts)&&(Hs=Xe()+500,Ho()))}break;case 13:du((function(){var t=Oa(e,1);if(null!==t){var n=tu();ru(t,e,1,n)}})),qu(e,1)}},xt=function(e){if(13===e.tag){var t=Oa(e,134217728);null!==t&&ru(t,e,134217728,tu()),qu(e,134217728)}},kt=function(e){if(13===e.tag){var t=nu(e),n=Oa(e,t);null!==n&&ru(n,e,t,tu()),qu(e,t)}},Ct=function(){return bt},Et=function(e,t){var n=bt;try{return bt=e,t()}finally{bt=n}},xe=function(e,t,n){switch(t){case"input":if(J(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=xo(r);if(!o)throw Error(a(90));q(r),J(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Pe=cu,Te=du;var tc={usingClientEntryPoint:!1,Events:[wo,So,xo,_e,$e,cu]},nc={findFiberByHostInstance:bo,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},rc={bundleType:nc.bundleType,version:nc.version,rendererPackageName:nc.rendererPackageName,rendererConfig:nc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=We(e))?null:e.stateNode},findFiberByHostInstance:nc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var oc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!oc.isDisabled&&oc.supportsFiber)try{ot=oc.inject(rc),at=oc}catch(ce){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xu(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:x,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xu(e))throw Error(a(299));var n=!1,r="",o=Gu;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=ju(e,1,!1,null,0,n,0,r,o),e[mo]=t.current,Vr(8===e.nodeType?e.parentNode:e),new Qu(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=We(t))?null:e.stateNode},t.flushSync=function(e){return du(e)},t.hydrate=function(e,t,n){if(!Ju(t))throw Error(a(200));return ec(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xu(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=Gu;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=Hu(t,null,e,1,null!=n?n:null,o,0,i,l),e[mo]=t.current,Vr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Yu(t)},t.render=function(e,t,n){if(!Ju(t))throw Error(a(200));return ec(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Ju(e))throw Error(a(40));return!!e._reactRootContainer&&(du((function(){ec(null,null,e,!1,(function(){e._reactRootContainer=null,e[mo]=null}))})),!0)},t.unstable_batchedUpdates=cu,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Ju(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return ec(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},745:(e,t,n)=>{var r=n(935);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},935:(e,t,n)=>{!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(448)},921:(e,t)=>{Symbol.for("react.element"),Symbol.for("react.portal"),Symbol.for("react.fragment"),Symbol.for("react.strict_mode"),Symbol.for("react.profiler"),Symbol.for("react.provider"),Symbol.for("react.context"),Symbol.for("react.server_context"),Symbol.for("react.forward_ref"),Symbol.for("react.suspense"),Symbol.for("react.suspense_list"),Symbol.for("react.memo"),Symbol.for("react.lazy"),Symbol.for("react.offscreen");Symbol.for("react.module.reference")},864:(e,t,n)=>{n(921)},251:(e,t,n)=>{var r=n(294),o=Symbol.for("react.element"),a=(Symbol.for("react.fragment"),Object.prototype.hasOwnProperty),i=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,s={},u=null,c=null;for(r in void 0!==n&&(u=""+n),void 0!==t.key&&(u=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,r)&&!l.hasOwnProperty(r)&&(s[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===s[r]&&(s[r]=t[r]);return{$$typeof:o,type:e,key:u,ref:c,props:s,_owner:i.current}}t.jsx=s,t.jsxs=s},408:(e,t)=>{var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),o=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),i=Symbol.for("react.profiler"),l=Symbol.for("react.provider"),s=Symbol.for("react.context"),u=Symbol.for("react.forward_ref"),c=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),p=Symbol.iterator,h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m=Object.assign,g={};function v(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}function y(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var w=b.prototype=new y;w.constructor=b,m(w,v.prototype),w.isPureReactComponent=!0;var S=Array.isArray,x=Object.prototype.hasOwnProperty,k={current:null},C={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var o,a={},i=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,o)&&!C.hasOwnProperty(o)&&(a[o]=t[o]);var s=arguments.length-2;if(1===s)a.children=r;else if(1<s){for(var u=Array(s),c=0;c<s;c++)u[c]=arguments[c+2];a.children=u}if(e&&e.defaultProps)for(o in s=e.defaultProps)void 0===a[o]&&(a[o]=s[o]);return{$$typeof:n,type:e,key:i,ref:l,props:a,_owner:k.current}}function _(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var $=/\/+/g;function P(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,o,a,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var s=!1;if(null===e)s=!0;else switch(l){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case n:case r:s=!0}}if(s)return i=i(s=e),e=""===a?"."+P(s,0):a,S(i)?(o="",null!=e&&(o=e.replace($,"$&/")+"/"),T(i,t,o,"",(function(e){return e}))):null!=i&&(_(i)&&(i=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,o+(!i.key||s&&s.key===i.key?"":(""+i.key).replace($,"$&/")+"/")+e)),t.push(i)),1;if(s=0,a=""===a?".":a+":",S(e))for(var u=0;u<e.length;u++){var c=a+P(l=e[u],u);s+=T(l,t,o,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=p&&e[p]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),u=0;!(l=e.next()).done;)s+=T(l=l.value,t,o,c=a+P(l,u++),i);else if("object"===l)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function O(e,t,n){if(null==e)return e;var r=[],o=0;return T(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function R(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var A={current:null},D={transition:null},I={ReactCurrentDispatcher:A,ReactCurrentBatchConfig:D,ReactCurrentOwner:k};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!_(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=v,t.Fragment=o,t.Profiler=i,t.PureComponent=b,t.StrictMode=a,t.Suspense=c,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=I,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=m({},e.props),a=e.key,i=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(i=t.ref,l=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(u in t)x.call(t,u)&&!C.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=r;else if(1<u){s=Array(u);for(var c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}return{$$typeof:n,type:e.type,key:a,ref:i,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=_,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:R}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=D.transition;D.transition={};try{e()}finally{D.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return A.current.useCallback(e,t)},t.useContext=function(e){return A.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return A.current.useDeferredValue(e)},t.useEffect=function(e,t){return A.current.useEffect(e,t)},t.useId=function(){return A.current.useId()},t.useImperativeHandle=function(e,t,n){return A.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return A.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return A.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return A.current.useMemo(e,t)},t.useReducer=function(e,t,n){return A.current.useReducer(e,t,n)},t.useRef=function(e){return A.current.useRef(e)},t.useState=function(e){return A.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return A.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return A.current.useTransition()},t.version="18.2.0"},294:(e,t,n)=>{e.exports=n(408)},893:(e,t,n)=>{e.exports=n(251)},53:(e,t)=>{function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function r(e){return 0===e.length?null:e[0]}function o(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,s=e[l],u=l+1,c=e[u];if(0>a(s,n))u<o&&0>a(c,s)?(e[r]=c,e[u]=n,r=u):(e[r]=s,e[l]=n,r=l);else{if(!(u<o&&0>a(c,n)))break e;e[r]=c,e[u]=n,r=u}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,s=l.now();t.unstable_now=function(){return l.now()-s}}var u=[],c=[],d=1,f=null,p=3,h=!1,m=!1,g=!1,v="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,b="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=r(c);null!==t;){if(null===t.callback)o(c);else{if(!(t.startTime<=e))break;o(c),t.sortIndex=t.expirationTime,n(u,t)}t=r(c)}}function S(e){if(g=!1,w(e),!m)if(null!==r(u))m=!0,D(x);else{var t=r(c);null!==t&&I(S,t.startTime-e)}}function x(e,n){m=!1,g&&(g=!1,y(_),_=-1),h=!0;var a=p;try{for(w(n),f=r(u);null!==f&&(!(f.expirationTime>n)||e&&!T());){var i=f.callback;if("function"==typeof i){f.callback=null,p=f.priorityLevel;var l=i(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?f.callback=l:f===r(u)&&o(u),w(n)}else o(u);f=r(u)}if(null!==f)var s=!0;else{var d=r(c);null!==d&&I(S,d.startTime-n),s=!1}return s}finally{f=null,p=a,h=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var k,C=!1,E=null,_=-1,$=5,P=-1;function T(){return!(t.unstable_now()-P<$)}function O(){if(null!==E){var e=t.unstable_now();P=e;var n=!0;try{n=E(!0,e)}finally{n?k():(C=!1,E=null)}}else C=!1}if("function"==typeof b)k=function(){b(O)};else if("undefined"!=typeof MessageChannel){var R=new MessageChannel,A=R.port2;R.port1.onmessage=O,k=function(){A.postMessage(null)}}else k=function(){v(O,0)};function D(e){E=e,C||(C=!0,k())}function I(e,n){_=v((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){m||h||(m=!0,D(x))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):$=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return p},t.unstable_getFirstCallbackNode=function(){return r(u)},t.unstable_next=function(e){switch(p){case 1:case 2:case 3:var t=3;break;default:t=p}var n=p;p=t;try{return e()}finally{p=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=p;p=e;try{return t()}finally{p=n}},t.unstable_scheduleCallback=function(e,o,a){var i=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?i+a:i,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:d++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>i?(e.sortIndex=a,n(c,e),null===r(u)&&e===r(c)&&(g?(y(_),_=-1):g=!0,I(S,a-i))):(e.sortIndex=l,n(u,e),m||h||(m=!0,D(x))),e},t.unstable_shouldYield=T,t.unstable_wrapCallback=function(e){var t=p;return function(){var n=p;p=t;try{return e.apply(this,arguments)}finally{p=n}}}},840:(e,t,n)=>{e.exports=n(53)},305:(e,t,n)=>{e.exports=n.p+"d8e75345303819e0bcc7.jpg"},326:(e,t,n)=>{e.exports=n.p+"31b6c3850ce3e2af322f.png"},389:(e,t,n)=>{n.d(t,{Jn:()=>F,qX:()=>D,Xd:()=>A,Mq:()=>B,ZF:()=>L,KN:()=>M});var r=n(463),o=n(333),a=n(444);const i=(e,t)=>t.some((t=>e instanceof t));let l,s;const u=new WeakMap,c=new WeakMap,d=new WeakMap,f=new WeakMap,p=new WeakMap;let h={get(e,t,n){if(e instanceof IDBTransaction){if("done"===t)return c.get(e);if("objectStoreNames"===t)return e.objectStoreNames||d.get(e);if("store"===t)return n.objectStoreNames[1]?void 0:n.objectStore(n.objectStoreNames[0])}return g(e[t])},set:(e,t,n)=>(e[t]=n,!0),has:(e,t)=>e instanceof IDBTransaction&&("done"===t||"store"===t)||t in e};function m(e){return"function"==typeof e?(t=e)!==IDBDatabase.prototype.transaction||"objectStoreNames"in IDBTransaction.prototype?(s||(s=[IDBCursor.prototype.advance,IDBCursor.prototype.continue,IDBCursor.prototype.continuePrimaryKey])).includes(t)?function(...e){return t.apply(v(this),e),g(u.get(this))}:function(...e){return g(t.apply(v(this),e))}:function(e,...n){const r=t.call(v(this),e,...n);return d.set(r,e.sort?e.sort():[e]),g(r)}:(e instanceof IDBTransaction&&function(e){if(c.has(e))return;const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("complete",o),e.removeEventListener("error",a),e.removeEventListener("abort",a)},o=()=>{t(),r()},a=()=>{n(e.error||new DOMException("AbortError","AbortError")),r()};e.addEventListener("complete",o),e.addEventListener("error",a),e.addEventListener("abort",a)}));c.set(e,t)}(e),i(e,l||(l=[IDBDatabase,IDBObjectStore,IDBIndex,IDBCursor,IDBTransaction]))?new Proxy(e,h):e);var t}function g(e){if(e instanceof IDBRequest)return function(e){const t=new Promise(((t,n)=>{const r=()=>{e.removeEventListener("success",o),e.removeEventListener("error",a)},o=()=>{t(g(e.result)),r()},a=()=>{n(e.error),r()};e.addEventListener("success",o),e.addEventListener("error",a)}));return t.then((t=>{t instanceof IDBCursor&&u.set(t,e)})).catch((()=>{})),p.set(t,e),t}(e);if(f.has(e))return f.get(e);const t=m(e);return t!==e&&(f.set(e,t),p.set(t,e)),t}const v=e=>p.get(e),y=["get","getKey","getAll","getAllKeys","count"],b=["put","add","delete","clear"],w=new Map;function S(e,t){if(!(e instanceof IDBDatabase)||t in e||"string"!=typeof t)return;if(w.get(t))return w.get(t);const n=t.replace(/FromIndex$/,""),r=t!==n,o=b.includes(n);if(!(n in(r?IDBIndex:IDBObjectStore).prototype)||!o&&!y.includes(n))return;const a=async function(e,...t){const a=this.transaction(e,o?"readwrite":"readonly");let i=a.store;return r&&(i=i.index(t.shift())),(await Promise.all([i[n](...t),o&&a.done]))[0]};return w.set(t,a),a}var x;x=h,h={...x,get:(e,t,n)=>S(e,t)||x.get(e,t,n),has:(e,t)=>!!S(e,t)||x.has(e,t)};class k{constructor(e){this.container=e}getPlatformInfoString(){return this.container.getProviders().map((e=>{if(function(e){const t=e.getComponent();return"VERSION"===(null==t?void 0:t.type)}(e)){const t=e.getImmediate();return`${t.library}/${t.version}`}return null})).filter((e=>e)).join(" ")}}const C="@firebase/app",E="0.9.13",_=new o.Yd("@firebase/app"),$="[DEFAULT]",P={[C]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},T=new Map,O=new Map;function R(e,t){try{e.container.addComponent(t)}catch(n){_.debug(`Component ${t.name} failed to register with FirebaseApp ${e.name}`,n)}}function A(e){const t=e.name;if(O.has(t))return _.debug(`There were multiple attempts to register component ${t}.`),!1;O.set(t,e);for(const t of T.values())R(t,e);return!0}function D(e,t){const n=e.container.getProvider("heartbeat").getImmediate({optional:!0});return n&&n.triggerHeartbeat(),e.container.getProvider(t)}const I=new a.LL("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call initializeApp() first","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","no-options":"Need to provide options, when not being deployed to hosting via source.","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function.","idb-open":"Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.","idb-get":"Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.","idb-set":"Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.","idb-delete":"Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."});class N{constructor(e,t,n){this._isDeleted=!1,this._options=Object.assign({},e),this._config=Object.assign({},t),this._name=t.name,this._automaticDataCollectionEnabled=t.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new r.wA("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(e){this.checkDestroyed(),this._automaticDataCollectionEnabled=e}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(e){this._isDeleted=e}checkDestroyed(){if(this.isDeleted)throw I.create("app-deleted",{appName:this._name})}}const F="9.23.0";function L(e,t={}){let n=e;"object"!=typeof t&&(t={name:t});const o=Object.assign({name:$,automaticDataCollectionEnabled:!1},t),i=o.name;if("string"!=typeof i||!i)throw I.create("bad-app-name",{appName:String(i)});if(n||(n=(0,a.aH)()),!n)throw I.create("no-options");const l=T.get(i);if(l){if((0,a.vZ)(n,l.options)&&(0,a.vZ)(o,l.config))return l;throw I.create("duplicate-app",{appName:i})}const s=new r.H0(i);for(const e of O.values())s.addComponent(e);const u=new N(n,o,s);return T.set(i,u),u}function B(e=$){const t=T.get(e);if(!t&&e===$&&(0,a.aH)())return L();if(!t)throw I.create("no-app",{appName:e});return t}function M(e,t,n){var o;let a=null!==(o=P[e])&&void 0!==o?o:e;n&&(a+=`-${n}`);const i=a.match(/\s|\//),l=t.match(/\s|\//);if(i||l){const e=[`Unable to register library "${a}" with version "${t}":`];return i&&e.push(`library name "${a}" contains illegal characters (whitespace or "/")`),i&&l&&e.push("and"),l&&e.push(`version name "${t}" contains illegal characters (whitespace or "/")`),void _.warn(e.join(" "))}A(new r.wA(`${a}-version`,(()=>({library:a,version:t})),"VERSION"))}const z="firebase-heartbeat-database",j=1,V="firebase-heartbeat-store";let H=null;function U(){return H||(H=function(e,t,{blocked:n,upgrade:r,blocking:o,terminated:a}={}){const i=indexedDB.open(e,t),l=g(i);return r&&i.addEventListener("upgradeneeded",(e=>{r(g(i.result),e.oldVersion,e.newVersion,g(i.transaction),e)})),n&&i.addEventListener("blocked",(e=>n(e.oldVersion,e.newVersion,e))),l.then((e=>{a&&e.addEventListener("close",(()=>a())),o&&e.addEventListener("versionchange",(e=>o(e.oldVersion,e.newVersion,e)))})).catch((()=>{})),l}(z,j,{upgrade:(e,t)=>{0===t&&e.createObjectStore(V)}}).catch((e=>{throw I.create("idb-open",{originalErrorMessage:e.message})}))),H}async function W(e,t){try{const n=(await U()).transaction(V,"readwrite"),r=n.objectStore(V);await r.put(t,K(e)),await n.done}catch(e){if(e instanceof a.ZR)_.warn(e.message);else{const t=I.create("idb-set",{originalErrorMessage:null==e?void 0:e.message});_.warn(t.message)}}}function K(e){return`${e.name}!${e.options.appId}`}class q{constructor(e){this.container=e,this._heartbeatsCache=null;const t=this.container.getProvider("app").getImmediate();this._storage=new Q(t),this._heartbeatsCachePromise=this._storage.read().then((e=>(this._heartbeatsCache=e,e)))}async triggerHeartbeat(){const e=this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(),t=G();if(null===this._heartbeatsCache&&(this._heartbeatsCache=await this._heartbeatsCachePromise),this._heartbeatsCache.lastSentHeartbeatDate!==t&&!this._heartbeatsCache.heartbeats.some((e=>e.date===t)))return this._heartbeatsCache.heartbeats.push({date:t,agent:e}),this._heartbeatsCache.heartbeats=this._heartbeatsCache.heartbeats.filter((e=>{const t=new Date(e.date).valueOf();return Date.now()-t<=2592e6})),this._storage.overwrite(this._heartbeatsCache)}async getHeartbeatsHeader(){if(null===this._heartbeatsCache&&await this._heartbeatsCachePromise,null===this._heartbeatsCache||0===this._heartbeatsCache.heartbeats.length)return"";const e=G(),{heartbeatsToSend:t,unsentEntries:n}=function(e,t=1024){const n=[];let r=e.slice();for(const o of e){const e=n.find((e=>e.agent===o.agent));if(e){if(e.dates.push(o.date),Y(n)>t){e.dates.pop();break}}else if(n.push({agent:o.agent,dates:[o.date]}),Y(n)>t){n.pop();break}r=r.slice(1)}return{heartbeatsToSend:n,unsentEntries:r}}(this._heartbeatsCache.heartbeats),r=(0,a.L)(JSON.stringify({version:2,heartbeats:t}));return this._heartbeatsCache.lastSentHeartbeatDate=e,n.length>0?(this._heartbeatsCache.heartbeats=n,await this._storage.overwrite(this._heartbeatsCache)):(this._heartbeatsCache.heartbeats=[],this._storage.overwrite(this._heartbeatsCache)),r}}function G(){return(new Date).toISOString().substring(0,10)}class Q{constructor(e){this.app=e,this._canUseIndexedDBPromise=this.runIndexedDBEnvironmentCheck()}async runIndexedDBEnvironmentCheck(){return!!(0,a.hl)()&&(0,a.eu)().then((()=>!0)).catch((()=>!1))}async read(){return await this._canUseIndexedDBPromise&&await async function(e){try{const t=await U();return await t.transaction(V).objectStore(V).get(K(e))}catch(e){if(e instanceof a.ZR)_.warn(e.message);else{const t=I.create("idb-get",{originalErrorMessage:null==e?void 0:e.message});_.warn(t.message)}}}(this.app)||{heartbeats:[]}}async overwrite(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return W(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:e.heartbeats})}}async add(e){var t;if(await this._canUseIndexedDBPromise){const n=await this.read();return W(this.app,{lastSentHeartbeatDate:null!==(t=e.lastSentHeartbeatDate)&&void 0!==t?t:n.lastSentHeartbeatDate,heartbeats:[...n.heartbeats,...e.heartbeats]})}}}function Y(e){return(0,a.L)(JSON.stringify({version:2,heartbeats:e})).length}A(new r.wA("platform-logger",(e=>new k(e)),"PRIVATE")),A(new r.wA("heartbeat",(e=>new q(e)),"PRIVATE")),M(C,E,""),M(C,E,"esm2017"),M("fire-js","")},463:(e,t,n)=>{n.d(t,{H0:()=>l,wA:()=>o});var r=n(444);class o{constructor(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}setInstantiationMode(e){return this.instantiationMode=e,this}setMultipleInstances(e){return this.multipleInstances=e,this}setServiceProps(e){return this.serviceProps=e,this}setInstanceCreatedCallback(e){return this.onInstanceCreated=e,this}}const a="[DEFAULT]";class i{constructor(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}get(e){const t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){const e=new r.BH;if(this.instancesDeferred.set(t,e),this.isInitialized(t)||this.shouldAutoInitialize())try{const n=this.getOrInitializeService({instanceIdentifier:t});n&&e.resolve(n)}catch(e){}}return this.instancesDeferred.get(t).promise}getImmediate(e){var t;const n=this.normalizeInstanceIdentifier(null==e?void 0:e.identifier),r=null!==(t=null==e?void 0:e.optional)&&void 0!==t&&t;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(r)return null;throw Error(`Service ${this.name} is not available`)}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(e){if(r)return null;throw e}}getComponent(){return this.component}setComponent(e){if(e.name!==this.name)throw Error(`Mismatching Component ${e.name} for Provider ${this.name}.`);if(this.component)throw Error(`Component for ${this.name} has already been provided`);if(this.component=e,this.shouldAutoInitialize()){if(function(e){return"EAGER"===e.instantiationMode}(e))try{this.getOrInitializeService({instanceIdentifier:a})}catch(e){}for(const[e,t]of this.instancesDeferred.entries()){const n=this.normalizeInstanceIdentifier(e);try{const e=this.getOrInitializeService({instanceIdentifier:n});t.resolve(e)}catch(e){}}}}clearInstance(e=a){this.instancesDeferred.delete(e),this.instancesOptions.delete(e),this.instances.delete(e)}async delete(){const e=Array.from(this.instances.values());await Promise.all([...e.filter((e=>"INTERNAL"in e)).map((e=>e.INTERNAL.delete())),...e.filter((e=>"_delete"in e)).map((e=>e._delete()))])}isComponentSet(){return null!=this.component}isInitialized(e=a){return this.instances.has(e)}getOptions(e=a){return this.instancesOptions.get(e)||{}}initialize(e={}){const{options:t={}}=e,n=this.normalizeInstanceIdentifier(e.instanceIdentifier);if(this.isInitialized(n))throw Error(`${this.name}(${n}) has already been initialized`);if(!this.isComponentSet())throw Error(`Component ${this.name} has not been registered yet`);const r=this.getOrInitializeService({instanceIdentifier:n,options:t});for(const[e,t]of this.instancesDeferred.entries())n===this.normalizeInstanceIdentifier(e)&&t.resolve(r);return r}onInit(e,t){var n;const r=this.normalizeInstanceIdentifier(t),o=null!==(n=this.onInitCallbacks.get(r))&&void 0!==n?n:new Set;o.add(e),this.onInitCallbacks.set(r,o);const a=this.instances.get(r);return a&&e(a,r),()=>{o.delete(e)}}invokeOnInitCallbacks(e,t){const n=this.onInitCallbacks.get(t);if(n)for(const r of n)try{r(e,t)}catch(e){}}getOrInitializeService({instanceIdentifier:e,options:t={}}){let n=this.instances.get(e);if(!n&&this.component&&(n=this.component.instanceFactory(this.container,{instanceIdentifier:(r=e,r===a?void 0:r),options:t}),this.instances.set(e,n),this.instancesOptions.set(e,t),this.invokeOnInitCallbacks(n,e),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,e,n)}catch(e){}var r;return n||null}normalizeInstanceIdentifier(e=a){return this.component?this.component.multipleInstances?e:a:e}shouldAutoInitialize(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode}}class l{constructor(e){this.name=e,this.providers=new Map}addComponent(e){const t=this.getProvider(e.name);if(t.isComponentSet())throw new Error(`Component ${e.name} has already been registered with ${this.name}`);t.setComponent(e)}addOrOverwriteComponent(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)}getProvider(e){if(this.providers.has(e))return this.providers.get(e);const t=new i(e,this);return this.providers.set(e,t),t}getProviders(){return Array.from(this.providers.values())}}},333:(e,t,n)=>{n.d(t,{Yd:()=>u,in:()=>o});const r=[];var o;!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(o||(o={}));const a={debug:o.DEBUG,verbose:o.VERBOSE,info:o.INFO,warn:o.WARN,error:o.ERROR,silent:o.SILENT},i=o.INFO,l={[o.DEBUG]:"log",[o.VERBOSE]:"log",[o.INFO]:"info",[o.WARN]:"warn",[o.ERROR]:"error"},s=(e,t,...n)=>{if(t<e.logLevel)return;const r=(new Date).toISOString(),o=l[t];if(!o)throw new Error(`Attempted to log a message with an invalid logType (value: ${t})`);console[o](`[${r}]  ${e.name}:`,...n)};class u{constructor(e){this.name=e,this._logLevel=i,this._logHandler=s,this._userLogHandler=null,r.push(this)}get logLevel(){return this._logLevel}set logLevel(e){if(!(e in o))throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);this._logLevel=e}setLogLevel(e){this._logLevel="string"==typeof e?a[e]:e}get logHandler(){return this._logHandler}set logHandler(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e}get userLogHandler(){return this._userLogHandler}set userLogHandler(e){this._userLogHandler=e}debug(...e){this._userLogHandler&&this._userLogHandler(this,o.DEBUG,...e),this._logHandler(this,o.DEBUG,...e)}log(...e){this._userLogHandler&&this._userLogHandler(this,o.VERBOSE,...e),this._logHandler(this,o.VERBOSE,...e)}info(...e){this._userLogHandler&&this._userLogHandler(this,o.INFO,...e),this._logHandler(this,o.INFO,...e)}warn(...e){this._userLogHandler&&this._userLogHandler(this,o.WARN,...e),this._logHandler(this,o.WARN,...e)}error(...e){this._userLogHandler&&this._userLogHandler(this,o.ERROR,...e),this._logHandler(this,o.ERROR,...e)}}},977:(e,t,n)=>{n.d(t,{ZF:()=>r.ZF});var r=n(389);(0,r.KN)("firebase","9.23.0","app")},650:(e,t,n)=>{n.d(t,{hJ:()=>lt,PL:()=>vt,ad:()=>rt});var r=n(389),o=n(463),a=n(333),i=n(444);class l{constructor(e){this.uid=e}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(e){return e.uid===this.uid}}l.UNAUTHENTICATED=new l(null),l.GOOGLE_CREDENTIALS=new l("google-credentials-uid"),l.FIRST_PARTY=new l("first-party-uid"),l.MOCK_USER=new l("mock-user");let s="9.23.0";const u=new a.Yd("@firebase/firestore");function c(e,...t){if(u.logLevel<=a.in.DEBUG){const n=t.map(p);u.debug(`Firestore (${s}): ${e}`,...n)}}function d(e,...t){if(u.logLevel<=a.in.ERROR){const n=t.map(p);u.error(`Firestore (${s}): ${e}`,...n)}}function f(e,...t){if(u.logLevel<=a.in.WARN){const n=t.map(p);u.warn(`Firestore (${s}): ${e}`,...n)}}function p(e){if("string"==typeof e)return e;try{return t=e,JSON.stringify(t)}catch(t){return e}var t}function h(e="Unexpected state"){const t=`FIRESTORE (${s}) INTERNAL ASSERTION FAILED: `+e;throw d(t),new Error(t)}function m(e,t){e||h()}function g(e,t){return e}const v="unknown",y="invalid-argument",b="unauthenticated",w="failed-precondition",S="unimplemented";class x extends i.ZR{constructor(e,t){super(e,t),this.code=e,this.message=t,this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class k{constructor(e,t){this.user=t,this.type="OAuth",this.headers=new Map,this.headers.set("Authorization",`Bearer ${e}`)}}class C{getToken(){return Promise.resolve(null)}invalidateToken(){}start(e,t){e.enqueueRetryable((()=>t(l.UNAUTHENTICATED)))}shutdown(){}}class E{constructor(e){this.token=e,this.changeListener=null}getToken(){return Promise.resolve(this.token)}invalidateToken(){}start(e,t){this.changeListener=t,e.enqueueRetryable((()=>t(this.token.user)))}shutdown(){this.changeListener=null}}class _{constructor(e){this.auth=null,e.onInit((e=>{this.auth=e}))}getToken(){return this.auth?this.auth.getToken().then((e=>e?(m("string"==typeof e.accessToken),new k(e.accessToken,new l(this.auth.getUid()))):null)):Promise.resolve(null)}invalidateToken(){}start(e,t){}shutdown(){}}class ${constructor(e,t,n){this.t=e,this.i=t,this.o=n,this.type="FirstParty",this.user=l.FIRST_PARTY,this.u=new Map}h(){return this.o?this.o():null}get headers(){this.u.set("X-Goog-AuthUser",this.t);const e=this.h();return e&&this.u.set("Authorization",e),this.i&&this.u.set("X-Goog-Iam-Authorization-Token",this.i),this.u}}class P{constructor(e,t,n){this.t=e,this.i=t,this.o=n}getToken(){return Promise.resolve(new $(this.t,this.i,this.o))}start(e,t){e.enqueueRetryable((()=>t(l.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class T{constructor(e){this.value=e,this.type="AppCheck",this.headers=new Map,e&&e.length>0&&this.headers.set("x-firebase-appcheck",this.value)}}class O{constructor(e){this.l=e,this.appCheck=null,e.onInit((e=>{this.appCheck=e}))}getToken(){return this.appCheck?this.appCheck.getToken().then((e=>e?(m("string"==typeof e.token),new T(e.token)):null)):Promise.resolve(null)}invalidateToken(){}start(e,t){}shutdown(){}}class R{constructor(e,t,n,r,o,a,i,l,s){this.databaseId=e,this.appId=t,this.persistenceKey=n,this.host=r,this.ssl=o,this.forceLongPolling=a,this.autoDetectLongPolling=i,this.longPollingOptions=l,this.useFetchStreams=s}}class A{constructor(e,t){this.projectId=e,this.database=t||"(default)"}static empty(){return new A("","")}get isDefaultDatabase(){return"(default)"===this.database}isEqual(e){return e instanceof A&&e.projectId===this.projectId&&e.database===this.database}}class D{constructor(e,t,n){void 0===t?t=0:t>e.length&&h(),void 0===n?n=e.length-t:n>e.length-t&&h(),this.segments=e,this.offset=t,this.len=n}get length(){return this.len}isEqual(e){return 0===D.comparator(this,e)}child(e){const t=this.segments.slice(this.offset,this.limit());return e instanceof D?e.forEach((e=>{t.push(e)})):t.push(e),this.construct(t)}limit(){return this.offset+this.length}popFirst(e){return e=void 0===e?1:e,this.construct(this.segments,this.offset+e,this.length-e)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(e){return this.segments[this.offset+e]}isEmpty(){return 0===this.length}isPrefixOf(e){if(e.length<this.length)return!1;for(let t=0;t<this.length;t++)if(this.get(t)!==e.get(t))return!1;return!0}isImmediateParentOf(e){if(this.length+1!==e.length)return!1;for(let t=0;t<this.length;t++)if(this.get(t)!==e.get(t))return!1;return!0}forEach(e){for(let t=this.offset,n=this.limit();t<n;t++)e(this.segments[t])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(e,t){const n=Math.min(e.length,t.length);for(let r=0;r<n;r++){const n=e.get(r),o=t.get(r);if(n<o)return-1;if(n>o)return 1}return e.length<t.length?-1:e.length>t.length?1:0}}class I extends D{construct(e,t,n){return new I(e,t,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...e){const t=[];for(const n of e){if(n.indexOf("//")>=0)throw new x(y,`Invalid segment (${n}). Paths must not contain // in them.`);t.push(...n.split("/").filter((e=>e.length>0)))}return new I(t)}static emptyPath(){return new I([])}}const N=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class F extends D{construct(e,t,n){return new F(e,t,n)}static isValidIdentifier(e){return N.test(e)}canonicalString(){return this.toArray().map((e=>(e=e.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),F.isValidIdentifier(e)||(e="`"+e+"`"),e))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new F(["__name__"])}static fromServerFormat(e){const t=[];let n="",r=0;const o=()=>{if(0===n.length)throw new x(y,`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);t.push(n),n=""};let a=!1;for(;r<e.length;){const t=e[r];if("\\"===t){if(r+1===e.length)throw new x(y,"Path has trailing escape character: "+e);const t=e[r+1];if("\\"!==t&&"."!==t&&"`"!==t)throw new x(y,"Path has invalid escape sequence: "+e);n+=t,r+=2}else"`"===t?(a=!a,r++):"."!==t||a?(n+=t,r++):(o(),r++)}if(o(),a)throw new x(y,"Unterminated ` in path: "+e);return new F(t)}static emptyPath(){return new F([])}}class L{constructor(e){this.path=e}static fromPath(e){return new L(I.fromString(e))}static fromName(e){return new L(I.fromString(e).popFirst(5))}static empty(){return new L(I.emptyPath())}get collectionGroup(){return this.path.popLast().lastSegment()}hasCollectionId(e){return this.path.length>=2&&this.path.get(this.path.length-2)===e}getCollectionGroup(){return this.path.get(this.path.length-2)}getCollectionPath(){return this.path.popLast()}isEqual(e){return null!==e&&0===I.comparator(this.path,e.path)}toString(){return this.path.toString()}static comparator(e,t){return I.comparator(e.path,t.path)}static isDocumentKey(e){return e.length%2==0}static fromSegments(e){return new L(new I(e.slice()))}}function B(e){if(L.isDocumentKey(e))throw new x(y,`Invalid collection reference. Collection references must have an odd number of segments, but ${e} has ${e.length}.`)}function M(e,t){if("_delegate"in e&&(e=e._delegate),!(e instanceof t)){if(t.name===e.constructor.name)throw new x(y,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=function(e){if(void 0===e)return"undefined";if(null===e)return"null";if("string"==typeof e)return e.length>20&&(e=`${e.substring(0,20)}...`),JSON.stringify(e);if("number"==typeof e||"boolean"==typeof e)return""+e;if("object"==typeof e){if(e instanceof Array)return"an array";{const t=function(e){return e.constructor?e.constructor.name:null}(e);return t?`a custom ${t} object`:"an object"}}return"function"==typeof e?"a function":h()}(e);throw new x(y,`Expected type '${t.name}', but it was: ${n}`)}}return e}function z(e){const t={};return void 0!==e.timeoutSeconds&&(t.timeoutSeconds=e.timeoutSeconds),t}let j=null;function V(e){return 0===e&&1/e==-1/0}const H={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery",RunAggregationQuery:"runAggregationQuery"};var U,W;function K(e){if(void 0===e)return d("RPC_ERROR","HTTP error has no status"),v;switch(e){case 200:return"ok";case 400:return w;case 401:return b;case 403:return"permission-denied";case 404:return"not-found";case 409:return"aborted";case 416:return"out-of-range";case 429:return"resource-exhausted";case 499:return"cancelled";case 500:return v;case 501:return S;case 503:return"unavailable";case 504:return"deadline-exceeded";default:return e>=200&&e<300?"ok":e>=400&&e<500?w:e>=500&&e<600?"internal":v}}(W=U||(U={}))[W.OK=0]="OK",W[W.CANCELLED=1]="CANCELLED",W[W.UNKNOWN=2]="UNKNOWN",W[W.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",W[W.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",W[W.NOT_FOUND=5]="NOT_FOUND",W[W.ALREADY_EXISTS=6]="ALREADY_EXISTS",W[W.PERMISSION_DENIED=7]="PERMISSION_DENIED",W[W.UNAUTHENTICATED=16]="UNAUTHENTICATED",W[W.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",W[W.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",W[W.ABORTED=10]="ABORTED",W[W.OUT_OF_RANGE=11]="OUT_OF_RANGE",W[W.UNIMPLEMENTED=12]="UNIMPLEMENTED",W[W.INTERNAL=13]="INTERNAL",W[W.UNAVAILABLE=14]="UNAVAILABLE",W[W.DATA_LOSS=15]="DATA_LOSS";class q extends class{constructor(e){this.databaseInfo=e,this.databaseId=e.databaseId;const t=e.ssl?"https":"http";this.m=t+"://"+e.host,this.p="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}get g(){return!1}v(e,t,n,r,o){const a=(null===j?j=268435456+Math.round(2147483648*Math.random()):j++,"0x"+j.toString(16)),i=this.I(e,t);c("RestConnection",`Sending RPC '${e}' ${a}:`,i,n);const l={};return this.T(l,r,o),this.A(e,i,l,n).then((t=>(c("RestConnection",`Received RPC '${e}' ${a}: `,t),t)),(t=>{throw f("RestConnection",`RPC '${e}' ${a} failed with error: `,t,"url: ",i,"request:",n),t}))}R(e,t,n,r,o,a){return this.v(e,t,n,r,o)}T(e,t,n){e["X-Goog-Api-Client"]="gl-js/ fire/"+s,e["Content-Type"]="text/plain",this.databaseInfo.appId&&(e["X-Firebase-GMPID"]=this.databaseInfo.appId),t&&t.headers.forEach(((t,n)=>e[n]=t)),n&&n.headers.forEach(((t,n)=>e[n]=t))}I(e,t){const n=H[e];return`${this.m}/v1/${t}:${n}`}}{constructor(e,t){super(e),this.P=t}V(e,t){throw new Error("Not supported by FetchConnection")}async A(e,t,n,r){var o;const a=JSON.stringify(r);let i;try{i=await this.P(t,{method:"POST",headers:n,body:a})}catch(e){const t=e;throw new x(K(t.status),"Request failed with error: "+t.statusText)}if(!i.ok){let e=await i.json();Array.isArray(e)&&(e=e[0]);const t=null===(o=null==e?void 0:e.error)||void 0===o?void 0:o.message;throw new x(K(i.status),`Request failed with error: ${null!=t?t:i.statusText}`)}return i.json()}}function G(e,t){return e<t?-1:e>t?1:0}function Q(e){let t=0;for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t++;return t}function Y(e,t){for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&t(n,e[n])}class X extends Error{constructor(){super(...arguments),this.name="Base64DecodeError"}}class J{constructor(e){this.binaryString=e}static fromBase64String(e){const t=function(e){try{return atob(e)}catch(e){throw"undefined"!=typeof DOMException&&e instanceof DOMException?new X("Invalid base64 string: "+e):e}}(e);return new J(t)}static fromUint8Array(e){const t=function(e){let t="";for(let n=0;n<e.length;++n)t+=String.fromCharCode(e[n]);return t}(e);return new J(t)}[Symbol.iterator](){let e=0;return{next:()=>e<this.binaryString.length?{value:this.binaryString.charCodeAt(e++),done:!1}:{value:void 0,done:!0}}}toBase64(){return e=this.binaryString,btoa(e);var e}toUint8Array(){return function(e){const t=new Uint8Array(e.length);for(let n=0;n<e.length;n++)t[n]=e.charCodeAt(n);return t}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(e){return G(this.binaryString,e.binaryString)}isEqual(e){return this.binaryString===e.binaryString}}J.EMPTY_BYTE_STRING=new J("");const Z=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function ee(e){if(m(!!e),"string"==typeof e){let t=0;const n=Z.exec(e);if(m(!!n),n[1]){let e=n[1];e=(e+"000000000").substr(0,9),t=Number(e)}const r=new Date(e);return{seconds:Math.floor(r.getTime()/1e3),nanos:t}}return{seconds:te(e.seconds),nanos:te(e.nanos)}}function te(e){return"number"==typeof e?e:"string"==typeof e?Number(e):0}function ne(e){return"string"==typeof e?J.fromBase64String(e):J.fromUint8Array(e)}class re{constructor(e,t){if(this.seconds=e,this.nanoseconds=t,t<0)throw new x(y,"Timestamp nanoseconds out of range: "+t);if(t>=1e9)throw new x(y,"Timestamp nanoseconds out of range: "+t);if(e<-62135596800)throw new x(y,"Timestamp seconds out of range: "+e);if(e>=253402300800)throw new x(y,"Timestamp seconds out of range: "+e)}static now(){return re.fromMillis(Date.now())}static fromDate(e){return re.fromMillis(e.getTime())}static fromMillis(e){const t=Math.floor(e/1e3),n=Math.floor(1e6*(e-1e3*t));return new re(t,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(e){return this.seconds===e.seconds?G(this.nanoseconds,e.nanoseconds):G(this.seconds,e.seconds)}isEqual(e){return e.seconds===this.seconds&&e.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const e=this.seconds- -62135596800;return String(e).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}function oe(e){var t,n;return"server_timestamp"===(null===(n=((null===(t=null==e?void 0:e.mapValue)||void 0===t?void 0:t.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function ae(e){const t=e.mapValue.fields.__previous_value__;return oe(t)?ae(t):t}function ie(e){const t=ee(e.mapValue.fields.__local_write_time__.timestampValue);return new re(t.seconds,t.nanos)}const le={fields:{__type__:{stringValue:"__max__"}}};function se(e){return"nullValue"in e?0:"booleanValue"in e?1:"integerValue"in e||"doubleValue"in e?2:"timestampValue"in e?3:"stringValue"in e?5:"bytesValue"in e?6:"referenceValue"in e?7:"geoPointValue"in e?8:"arrayValue"in e?9:"mapValue"in e?oe(e)?4:function(e){return"__max__"===(((e.mapValue||{}).fields||{}).__type__||{}).stringValue}(e)?9007199254740991:10:h()}function ue(e,t){if(e===t)return!0;const n=se(e);if(n!==se(t))return!1;switch(n){case 0:case 9007199254740991:return!0;case 1:return e.booleanValue===t.booleanValue;case 4:return ie(e).isEqual(ie(t));case 3:return function(e,t){if("string"==typeof e.timestampValue&&"string"==typeof t.timestampValue&&e.timestampValue.length===t.timestampValue.length)return e.timestampValue===t.timestampValue;const n=ee(e.timestampValue),r=ee(t.timestampValue);return n.seconds===r.seconds&&n.nanos===r.nanos}(e,t);case 5:return e.stringValue===t.stringValue;case 6:return function(e,t){return ne(e.bytesValue).isEqual(ne(t.bytesValue))}(e,t);case 7:return e.referenceValue===t.referenceValue;case 8:return function(e,t){return te(e.geoPointValue.latitude)===te(t.geoPointValue.latitude)&&te(e.geoPointValue.longitude)===te(t.geoPointValue.longitude)}(e,t);case 2:return function(e,t){if("integerValue"in e&&"integerValue"in t)return te(e.integerValue)===te(t.integerValue);if("doubleValue"in e&&"doubleValue"in t){const n=te(e.doubleValue),r=te(t.doubleValue);return n===r?V(n)===V(r):isNaN(n)&&isNaN(r)}return!1}(e,t);case 9:return function(e,t,n){return e.length===t.length&&e.every(((e,r)=>n(e,t[r])))}(e.arrayValue.values||[],t.arrayValue.values||[],ue);case 10:return function(e,t){const n=e.mapValue.fields||{},r=t.mapValue.fields||{};if(Q(n)!==Q(r))return!1;for(const e in n)if(n.hasOwnProperty(e)&&(void 0===r[e]||!ue(n[e],r[e])))return!1;return!0}(e,t);default:return h()}}function ce(e,t){return void 0!==(e.values||[]).find((e=>ue(e,t)))}function de(e,t){if(e===t)return 0;const n=se(e),r=se(t);if(n!==r)return G(n,r);switch(n){case 0:case 9007199254740991:return 0;case 1:return G(e.booleanValue,t.booleanValue);case 2:return function(e,t){const n=te(e.integerValue||e.doubleValue),r=te(t.integerValue||t.doubleValue);return n<r?-1:n>r?1:n===r?0:isNaN(n)?isNaN(r)?0:-1:1}(e,t);case 3:return fe(e.timestampValue,t.timestampValue);case 4:return fe(ie(e),ie(t));case 5:return G(e.stringValue,t.stringValue);case 6:return function(e,t){const n=ne(e),r=ne(t);return n.compareTo(r)}(e.bytesValue,t.bytesValue);case 7:return function(e,t){const n=e.split("/"),r=t.split("/");for(let e=0;e<n.length&&e<r.length;e++){const t=G(n[e],r[e]);if(0!==t)return t}return G(n.length,r.length)}(e.referenceValue,t.referenceValue);case 8:return function(e,t){const n=G(te(e.latitude),te(t.latitude));return 0!==n?n:G(te(e.longitude),te(t.longitude))}(e.geoPointValue,t.geoPointValue);case 9:return function(e,t){const n=e.values||[],r=t.values||[];for(let e=0;e<n.length&&e<r.length;++e){const t=de(n[e],r[e]);if(t)return t}return G(n.length,r.length)}(e.arrayValue,t.arrayValue);case 10:return function(e,t){if(e===le&&t===le)return 0;if(e===le)return 1;if(t===le)return-1;const n=e.fields||{},r=Object.keys(n),o=t.fields||{},a=Object.keys(o);r.sort(),a.sort();for(let e=0;e<r.length&&e<a.length;++e){const t=G(r[e],a[e]);if(0!==t)return t;const i=de(n[r[e]],o[a[e]]);if(0!==i)return i}return G(r.length,a.length)}(e.mapValue,t.mapValue);default:throw h()}}function fe(e,t){if("string"==typeof e&&"string"==typeof t&&e.length===t.length)return G(e,t);const n=ee(e),r=ee(t),o=G(n.seconds,r.seconds);return 0!==o?o:G(n.nanos,r.nanos)}function pe(e){return!!e&&"arrayValue"in e}function he(e){return!!e&&"nullValue"in e}function me(e){return!!e&&"doubleValue"in e&&isNaN(Number(e.doubleValue))}function ge(e){return!!e&&"mapValue"in e}function ve(e){if(e.geoPointValue)return{geoPointValue:Object.assign({},e.geoPointValue)};if(e.timestampValue&&"object"==typeof e.timestampValue)return{timestampValue:Object.assign({},e.timestampValue)};if(e.mapValue){const t={mapValue:{fields:{}}};return Y(e.mapValue.fields,((e,n)=>t.mapValue.fields[e]=ve(n))),t}if(e.arrayValue){const t={arrayValue:{values:[]}};for(let n=0;n<(e.arrayValue.values||[]).length;++n)t.arrayValue.values[n]=ve(e.arrayValue.values[n]);return t}return Object.assign({},e)}class ye{constructor(e,t){this.position=e,this.inclusive=t}}class be{}class we extends be{constructor(e,t,n){super(),this.field=e,this.op=t,this.value=n}static create(e,t,n){return e.isKeyField()?"in"===t||"not-in"===t?this.createKeyFieldInFilter(e,t,n):new xe(e,t,n):"array-contains"===t?new _e(e,n):"in"===t?new $e(e,n):"not-in"===t?new Pe(e,n):"array-contains-any"===t?new Te(e,n):new we(e,t,n)}static createKeyFieldInFilter(e,t,n){return"in"===t?new ke(e,n):new Ce(e,n)}matches(e){const t=e.data.field(this.field);return"!="===this.op?null!==t&&this.matchesComparison(de(t,this.value)):null!==t&&se(this.value)===se(t)&&this.matchesComparison(de(t,this.value))}matchesComparison(e){switch(this.op){case"<":return e<0;case"<=":return e<=0;case"==":return 0===e;case"!=":return 0!==e;case">":return e>0;case">=":return e>=0;default:return h()}}isInequality(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}getFlattenedFilters(){return[this]}getFilters(){return[this]}getFirstInequalityField(){return this.isInequality()?this.field:null}}class Se extends be{constructor(e,t){super(),this.filters=e,this.op=t,this.D=null}static create(e,t){return new Se(e,t)}matches(e){return"and"===this.op?void 0===this.filters.find((t=>!t.matches(e))):void 0!==this.filters.find((t=>t.matches(e)))}getFlattenedFilters(){return null!==this.D||(this.D=this.filters.reduce(((e,t)=>e.concat(t.getFlattenedFilters())),[])),this.D}getFilters(){return Object.assign([],this.filters)}getFirstInequalityField(){const e=this.F((e=>e.isInequality()));return null!==e?e.field:null}F(e){for(const t of this.getFlattenedFilters())if(e(t))return t;return null}}class xe extends we{constructor(e,t,n){super(e,t,n),this.key=L.fromName(n.referenceValue)}matches(e){const t=L.comparator(e.key,this.key);return this.matchesComparison(t)}}class ke extends we{constructor(e,t){super(e,"in",t),this.keys=Ee(0,t)}matches(e){return this.keys.some((t=>t.isEqual(e.key)))}}class Ce extends we{constructor(e,t){super(e,"not-in",t),this.keys=Ee(0,t)}matches(e){return!this.keys.some((t=>t.isEqual(e.key)))}}function Ee(e,t){var n;return((null===(n=t.arrayValue)||void 0===n?void 0:n.values)||[]).map((e=>L.fromName(e.referenceValue)))}class _e extends we{constructor(e,t){super(e,"array-contains",t)}matches(e){const t=e.data.field(this.field);return pe(t)&&ce(t.arrayValue,this.value)}}class $e extends we{constructor(e,t){super(e,"in",t)}matches(e){const t=e.data.field(this.field);return null!==t&&ce(this.value.arrayValue,t)}}class Pe extends we{constructor(e,t){super(e,"not-in",t)}matches(e){if(ce(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const t=e.data.field(this.field);return null!==t&&!ce(this.value.arrayValue,t)}}class Te extends we{constructor(e,t){super(e,"array-contains-any",t)}matches(e){const t=e.data.field(this.field);return!(!pe(t)||!t.arrayValue.values)&&t.arrayValue.values.some((e=>ce(this.value.arrayValue,e)))}}class Oe{constructor(e,t="asc"){this.field=e,this.dir=t}}class Re{constructor(e){this.timestamp=e}static fromTimestamp(e){return new Re(e)}static min(){return new Re(new re(0,0))}static max(){return new Re(new re(253402300799,999999999))}compareTo(e){return this.timestamp._compareTo(e.timestamp)}isEqual(e){return this.timestamp.isEqual(e.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}class Ae{constructor(e,t,n,r,o){this.key=e,this.value=t,this.color=null!=n?n:Ae.RED,this.left=null!=r?r:Ae.EMPTY,this.right=null!=o?o:Ae.EMPTY,this.size=this.left.size+1+this.right.size}copy(e,t,n,r,o){return new Ae(null!=e?e:this.key,null!=t?t:this.value,null!=n?n:this.color,null!=r?r:this.left,null!=o?o:this.right)}isEmpty(){return!1}inorderTraversal(e){return this.left.inorderTraversal(e)||e(this.key,this.value)||this.right.inorderTraversal(e)}reverseTraversal(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(e,t,n){let r=this;const o=n(e,r.key);return r=o<0?r.copy(null,null,null,r.left.insert(e,t,n),null):0===o?r.copy(null,t,null,null,null):r.copy(null,null,null,null,r.right.insert(e,t,n)),r.fixUp()}removeMin(){if(this.left.isEmpty())return Ae.EMPTY;let e=this;return e.left.isRed()||e.left.left.isRed()||(e=e.moveRedLeft()),e=e.copy(null,null,null,e.left.removeMin(),null),e.fixUp()}remove(e,t){let n,r=this;if(t(e,r.key)<0)r.left.isEmpty()||r.left.isRed()||r.left.left.isRed()||(r=r.moveRedLeft()),r=r.copy(null,null,null,r.left.remove(e,t),null);else{if(r.left.isRed()&&(r=r.rotateRight()),r.right.isEmpty()||r.right.isRed()||r.right.left.isRed()||(r=r.moveRedRight()),0===t(e,r.key)){if(r.right.isEmpty())return Ae.EMPTY;n=r.right.min(),r=r.copy(n.key,n.value,null,null,r.right.removeMin())}r=r.copy(null,null,null,null,r.right.remove(e,t))}return r.fixUp()}isRed(){return this.color}fixUp(){let e=this;return e.right.isRed()&&!e.left.isRed()&&(e=e.rotateLeft()),e.left.isRed()&&e.left.left.isRed()&&(e=e.rotateRight()),e.left.isRed()&&e.right.isRed()&&(e=e.colorFlip()),e}moveRedLeft(){let e=this.colorFlip();return e.right.left.isRed()&&(e=e.copy(null,null,null,null,e.right.rotateRight()),e=e.rotateLeft(),e=e.colorFlip()),e}moveRedRight(){let e=this.colorFlip();return e.left.left.isRed()&&(e=e.rotateRight(),e=e.colorFlip()),e}rotateLeft(){const e=this.copy(null,null,Ae.RED,null,this.right.left);return this.right.copy(null,null,this.color,e,null)}rotateRight(){const e=this.copy(null,null,Ae.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,e)}colorFlip(){const e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)}checkMaxDepth(){const e=this.check();return Math.pow(2,e)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw h();if(this.right.isRed())throw h();const e=this.left.check();if(e!==this.right.check())throw h();return e+(this.isRed()?0:1)}}Ae.EMPTY=null,Ae.RED=!0,Ae.BLACK=!1,Ae.EMPTY=new class{constructor(){this.size=0}get key(){throw h()}get value(){throw h()}get color(){throw h()}get left(){throw h()}get right(){throw h()}copy(e,t,n,r,o){return this}insert(e,t,n){return new Ae(e,t)}remove(e,t){return this}isEmpty(){return!0}inorderTraversal(e){return!1}reverseTraversal(e){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class De{constructor(e){this.value=e}static empty(){return new De({mapValue:{}})}field(e){if(e.isEmpty())return this.value;{let t=this.value;for(let n=0;n<e.length-1;++n)if(t=(t.mapValue.fields||{})[e.get(n)],!ge(t))return null;return t=(t.mapValue.fields||{})[e.lastSegment()],t||null}}set(e,t){this.getFieldsMap(e.popLast())[e.lastSegment()]=ve(t)}setAll(e){let t=F.emptyPath(),n={},r=[];e.forEach(((e,o)=>{if(!t.isImmediateParentOf(o)){const e=this.getFieldsMap(t);this.applyChanges(e,n,r),n={},r=[],t=o.popLast()}e?n[o.lastSegment()]=ve(e):r.push(o.lastSegment())}));const o=this.getFieldsMap(t);this.applyChanges(o,n,r)}delete(e){const t=this.field(e.popLast());ge(t)&&t.mapValue.fields&&delete t.mapValue.fields[e.lastSegment()]}isEqual(e){return ue(this.value,e.value)}getFieldsMap(e){let t=this.value;t.mapValue.fields||(t.mapValue={fields:{}});for(let n=0;n<e.length;++n){let r=t.mapValue.fields[e.get(n)];ge(r)&&r.mapValue.fields||(r={mapValue:{fields:{}}},t.mapValue.fields[e.get(n)]=r),t=r}return t.mapValue.fields}applyChanges(e,t,n){Y(t,((t,n)=>e[t]=n));for(const t of n)delete e[t]}clone(){return new De(ve(this.value))}}class Ie{constructor(e,t,n,r,o,a,i){this.key=e,this.documentType=t,this.version=n,this.readTime=r,this.createTime=o,this.data=a,this.documentState=i}static newInvalidDocument(e){return new Ie(e,0,Re.min(),Re.min(),Re.min(),De.empty(),0)}static newFoundDocument(e,t,n,r){return new Ie(e,1,t,Re.min(),n,r,0)}static newNoDocument(e,t){return new Ie(e,2,t,Re.min(),Re.min(),De.empty(),0)}static newUnknownDocument(e,t){return new Ie(e,3,t,Re.min(),Re.min(),De.empty(),2)}convertToFoundDocument(e,t){return!this.createTime.isEqual(Re.min())||2!==this.documentType&&0!==this.documentType||(this.createTime=e),this.version=e,this.documentType=1,this.data=t,this.documentState=0,this}convertToNoDocument(e){return this.version=e,this.documentType=2,this.data=De.empty(),this.documentState=0,this}convertToUnknownDocument(e){return this.version=e,this.documentType=3,this.data=De.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this.version=Re.min(),this}setReadTime(e){return this.readTime=e,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(e){return e instanceof Ie&&this.key.isEqual(e.key)&&this.version.isEqual(e.version)&&this.documentType===e.documentType&&this.documentState===e.documentState&&this.data.isEqual(e.data)}mutableCopy(){return new Ie(this.key,this.documentType,this.version,this.readTime,this.createTime,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class Ne{constructor(e,t=null,n=[],r=[],o=null,a=null,i=null){this.path=e,this.collectionGroup=t,this.orderBy=n,this.filters=r,this.limit=o,this.startAt=a,this.endAt=i,this.S=null}}function Fe(e,t=null,n=[],r=[],o=null,a=null,i=null){return new Ne(e,t,n,r,o,a,i)}class Le{constructor(e,t=null,n=[],r=[],o=null,a="F",i=null,l=null){this.path=e,this.collectionGroup=t,this.explicitOrderBy=n,this.filters=r,this.limit=o,this.limitType=a,this.startAt=i,this.endAt=l,this.q=null,this.O=null,this.startAt,this.endAt}}function Be(e){const t=g(e);if(null===t.q){t.q=[];const e=function(e){for(const t of e.filters){const e=t.getFirstInequalityField();if(null!==e)return e}return null}(t),n=function(e){return e.explicitOrderBy.length>0?e.explicitOrderBy[0].field:null}(t);if(null!==e&&null===n)e.isKeyField()||t.q.push(new Oe(e)),t.q.push(new Oe(F.keyField(),"asc"));else{let e=!1;for(const n of t.explicitOrderBy)t.q.push(n),n.field.isKeyField()&&(e=!0);if(!e){const e=t.explicitOrderBy.length>0?t.explicitOrderBy[t.explicitOrderBy.length-1].dir:"asc";t.q.push(new Oe(F.keyField(),e))}}}return t.q}const Me={asc:"ASCENDING",desc:"DESCENDING"},ze={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"},je={and:"AND",or:"OR"};class Ve{constructor(e,t){this.databaseId=e,this.useProto3Json=t}}function He(e){return m(!!e),Re.fromTimestamp(function(e){const t=ee(e);return new re(t.seconds,t.nanos)}(e))}function Ue(e,t){return function(e,t){return function(e){return new I(["projects",e.projectId,"databases",e.database])}(e).child("documents").child(t).canonicalString()}(e.databaseId,t)}function We(e,t){const n={structuredQuery:{}},r=t.path;null!==t.collectionGroup?(n.parent=Ue(e,r),n.structuredQuery.from=[{collectionId:t.collectionGroup,allDescendants:!0}]):(n.parent=Ue(e,r.popLast()),n.structuredQuery.from=[{collectionId:r.lastSegment()}]);const o=function(e){if(0!==e.length)return Ye(Se.create(e,"and"))}(t.filters);o&&(n.structuredQuery.where=o);const a=function(e){if(0!==e.length)return e.map((e=>function(e){return{field:Qe(e.field),direction:Ke(e.dir)}}(e)))}(t.orderBy);a&&(n.structuredQuery.orderBy=a);const i=function(e,t){return e.useProto3Json||function(e){return null==e}(t)?t:{value:t}}(e,t.limit);var l;return null!==i&&(n.structuredQuery.limit=i),t.startAt&&(n.structuredQuery.startAt={before:(l=t.startAt).inclusive,values:l.position}),t.endAt&&(n.structuredQuery.endAt=function(e){return{before:!e.inclusive,values:e.position}}(t.endAt)),n}function Ke(e){return Me[e]}function qe(e){return ze[e]}function Ge(e){return je[e]}function Qe(e){return{fieldPath:e.canonicalString()}}function Ye(e){return e instanceof we?function(e){if("=="===e.op){if(me(e.value))return{unaryFilter:{field:Qe(e.field),op:"IS_NAN"}};if(he(e.value))return{unaryFilter:{field:Qe(e.field),op:"IS_NULL"}}}else if("!="===e.op){if(me(e.value))return{unaryFilter:{field:Qe(e.field),op:"IS_NOT_NAN"}};if(he(e.value))return{unaryFilter:{field:Qe(e.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:Qe(e.field),op:qe(e.op),value:e.value}}}(e):e instanceof Se?function(e){const t=e.getFilters().map((e=>Ye(e)));return 1===t.length?t[0]:{compositeFilter:{op:Ge(e.op),filters:t}}}(e):h()}function Xe(e){return e.length>=4&&"projects"===e.get(0)&&"databases"===e.get(2)}class Je extends class{}{constructor(e,t,n,r){super(),this.authCredentials=e,this.appCheckCredentials=t,this.connection=n,this.serializer=r,this.J=!1}X(){if(this.J)throw new x(w,"The client has already been terminated.")}v(e,t,n){return this.X(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([r,o])=>this.connection.v(e,t,n,r,o))).catch((e=>{throw"FirebaseError"===e.name?(e.code===b&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),e):new x(v,e.toString())}))}R(e,t,n,r){return this.X(),Promise.all([this.authCredentials.getToken(),this.appCheckCredentials.getToken()]).then((([o,a])=>this.connection.R(e,t,n,o,a,r))).catch((e=>{throw"FirebaseError"===e.name?(e.code===b&&(this.authCredentials.invalidateToken(),this.appCheckCredentials.invalidateToken()),e):new x(v,e.toString())}))}terminate(){this.J=!0}}const Ze=new Map;function et(e){if(e._terminated)throw new x(w,"The client has already been terminated.");if(!Ze.has(e)){c("ComponentProvider","Initializing Datastore");const a=function(e){return new q(e,fetch.bind(null))}((t=e._databaseId,n=e.app.options.appId||"",r=e._persistenceKey,o=e._freezeSettings(),new R(t,n,r,o.host,o.ssl,o.experimentalForceLongPolling,o.experimentalAutoDetectLongPolling,z(o.experimentalLongPollingOptions),o.useFetchStreams))),i=function(e){return new Ve(e,!0)}(e._databaseId),l=function(e,t,n,r){return new Je(e,t,n,r)}(e._authCredentials,e._appCheckCredentials,a,i);Ze.set(e,l)}var t,n,r,o;return Ze.get(e)}class tt{constructor(e){var t,n;if(void 0===e.host){if(void 0!==e.ssl)throw new x(y,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=e.host,this.ssl=null===(t=e.ssl)||void 0===t||t;if(this.credentials=e.credentials,this.ignoreUndefinedProperties=!!e.ignoreUndefinedProperties,this.cache=e.localCache,void 0===e.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==e.cacheSizeBytes&&e.cacheSizeBytes<1048576)throw new x(y,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=e.cacheSizeBytes}!function(e,t,n,r){if(!0===t&&!0===r)throw new x(y,"experimentalForceLongPolling and experimentalAutoDetectLongPolling cannot be used together.")}(0,e.experimentalForceLongPolling,0,e.experimentalAutoDetectLongPolling),this.experimentalForceLongPolling=!!e.experimentalForceLongPolling,this.experimentalForceLongPolling?this.experimentalAutoDetectLongPolling=!1:void 0===e.experimentalAutoDetectLongPolling?this.experimentalAutoDetectLongPolling=!0:this.experimentalAutoDetectLongPolling=!!e.experimentalAutoDetectLongPolling,this.experimentalLongPollingOptions=z(null!==(n=e.experimentalLongPollingOptions)&&void 0!==n?n:{}),function(e){if(void 0!==e.timeoutSeconds){if(isNaN(e.timeoutSeconds))throw new x(y,`invalid long polling timeout: ${e.timeoutSeconds} (must not be NaN)`);if(e.timeoutSeconds<5)throw new x(y,`invalid long polling timeout: ${e.timeoutSeconds} (minimum allowed value is 5)`);if(e.timeoutSeconds>30)throw new x(y,`invalid long polling timeout: ${e.timeoutSeconds} (maximum allowed value is 30)`)}}(this.experimentalLongPollingOptions),this.useFetchStreams=!!e.useFetchStreams}isEqual(e){return this.host===e.host&&this.ssl===e.ssl&&this.credentials===e.credentials&&this.cacheSizeBytes===e.cacheSizeBytes&&this.experimentalForceLongPolling===e.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===e.experimentalAutoDetectLongPolling&&(t=this.experimentalLongPollingOptions,n=e.experimentalLongPollingOptions,t.timeoutSeconds===n.timeoutSeconds)&&this.ignoreUndefinedProperties===e.ignoreUndefinedProperties&&this.useFetchStreams===e.useFetchStreams;var t,n}}class nt{constructor(e,t,n,r){this._authCredentials=e,this._appCheckCredentials=t,this._databaseId=n,this._app=r,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new tt({}),this._settingsFrozen=!1}get app(){if(!this._app)throw new x(w,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(e){if(this._settingsFrozen)throw new x(w,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new tt(e),void 0!==e.credentials&&(this._authCredentials=function(e){if(!e)return new C;switch(e.type){case"firstParty":return new P(e.sessionIndex||"0",e.iamToken||null,e.authTokenFactory||null);case"provider":return e.client;default:throw new x(y,"makeAuthCredentialsProvider failed due to invalid credential type")}}(e.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(e){const t=Ze.get(e);t&&(c("ComponentProvider","Removing Datastore"),Ze.delete(e),t.terminate())}(this),Promise.resolve()}}function rt(e,t){const n="object"==typeof e?e:(0,r.Mq)(),o="string"==typeof e?e:t||"(default)",a=(0,r.qX)(n,"firestore/lite").getImmediate({identifier:o});if(!a._initialized){const e=(0,i.P0)("firestore");e&&function(e,t,n,r={}){var o;const a=(e=M(e,nt))._getSettings(),s=`${t}:${n}`;if("firestore.googleapis.com"!==a.host&&a.host!==s&&f("Host has been set in both settings() and connectFirestoreEmulator(), emulator host will be used."),e._setSettings(Object.assign(Object.assign({},a),{host:s,ssl:!1})),r.mockUserToken){let t,n;if("string"==typeof r.mockUserToken)t=r.mockUserToken,n=l.MOCK_USER;else{t=(0,i.Sg)(r.mockUserToken,null===(o=e._app)||void 0===o?void 0:o.options.projectId);const a=r.mockUserToken.sub||r.mockUserToken.user_id;if(!a)throw new x(y,"mockUserToken must contain 'sub' or 'user_id' field!");n=new l(a)}e._authCredentials=new E(new k(t,n))}}(a,...e)}return a}class ot{constructor(e,t,n){this.converter=t,this._key=n,this.type="document",this.firestore=e}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new it(this.firestore,this.converter,this._key.path.popLast())}withConverter(e){return new ot(this.firestore,e,this._key)}}class at{constructor(e,t,n){this.converter=t,this._query=n,this.type="query",this.firestore=e}withConverter(e){return new at(this.firestore,e,this._query)}}class it extends at{constructor(e,t,n){super(e,t,new Le(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const e=this._path.popLast();return e.isEmpty()?null:new ot(this.firestore,null,new L(e))}withConverter(e){return new it(this.firestore,e,this._path)}}function lt(e,t,...n){if(e=(0,i.m9)(e),function(e,t,n){if(!n)throw new x(y,`Function ${e}() cannot be called with an empty ${t}.`)}("collection","path",t),e instanceof nt){const r=I.fromString(t,...n);return B(r),new it(e,null,r)}{if(!(e instanceof ot||e instanceof it))throw new x(y,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const r=e._path.child(I.fromString(t,...n));return B(r),new it(e.firestore,null,r)}}class st{constructor(e){this._byteString=e}static fromBase64String(e){try{return new st(J.fromBase64String(e))}catch(e){throw new x(y,"Failed to construct data from Base64 string: "+e)}}static fromUint8Array(e){return new st(J.fromUint8Array(e))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(e){return this._byteString.isEqual(e._byteString)}}class ut{constructor(...e){for(let t=0;t<e.length;++t)if(0===e[t].length)throw new x(y,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new F(e)}isEqual(e){return this._internalPath.isEqual(e._internalPath)}}class ct{constructor(e,t){if(!isFinite(e)||e<-90||e>90)throw new x(y,"Latitude must be a number between -90 and 90, but was: "+e);if(!isFinite(t)||t<-180||t>180)throw new x(y,"Longitude must be a number between -180 and 180, but was: "+t);this._lat=e,this._long=t}get latitude(){return this._lat}get longitude(){return this._long}isEqual(e){return this._lat===e._lat&&this._long===e._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(e){return G(this._lat,e._lat)||G(this._long,e._long)}}const dt=new RegExp("[~\\*/\\[\\]]");function ft(e,t,n,r,o){const a=r&&!r.isEmpty(),i=void 0!==o;let l=`Function ${t}() called with invalid data`;n&&(l+=" (via `toFirestore()`)"),l+=". ";let s="";return(a||i)&&(s+=" (found",a&&(s+=` in field ${r}`),i&&(s+=` in document ${o}`),s+=")"),new x(y,l+e+s)}class pt{constructor(e,t,n,r,o){this._firestore=e,this._userDataWriter=t,this._key=n,this._document=r,this._converter=o}get id(){return this._key.path.lastSegment()}get ref(){return new ot(this._firestore,this._converter,this._key)}exists(){return null!==this._document}data(){if(this._document){if(this._converter){const e=new ht(this._firestore,this._userDataWriter,this._key,this._document,null);return this._converter.fromFirestore(e)}return this._userDataWriter.convertValue(this._document.data.value)}}get(e){if(this._document){const t=this._document.data.field(function(e,t){return"string"==typeof t?function(e,t,n){if(t.search(dt)>=0)throw ft(`Invalid field path (${t}). Paths must not contain '~', '*', '/', '[', or ']'`,e,!1,void 0,n);try{return new ut(...t.split("."))._internalPath}catch(r){throw ft(`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,e,!1,void 0,n)}}(e,t):t instanceof ut?t._internalPath:t._delegate._internalPath}("DocumentSnapshot.get",e));if(null!==t)return this._userDataWriter.convertValue(t)}}}class ht extends pt{data(){return super.data()}}class mt{constructor(e,t){this._docs=t,this.query=e}get docs(){return[...this._docs]}get size(){return this.docs.length}get empty(){return 0===this.docs.length}forEach(e,t){this._docs.forEach(e,t)}}class gt extends class{convertValue(e,t="none"){switch(se(e)){case 0:return null;case 1:return e.booleanValue;case 2:return te(e.integerValue||e.doubleValue);case 3:return this.convertTimestamp(e.timestampValue);case 4:return this.convertServerTimestamp(e,t);case 5:return e.stringValue;case 6:return this.convertBytes(ne(e.bytesValue));case 7:return this.convertReference(e.referenceValue);case 8:return this.convertGeoPoint(e.geoPointValue);case 9:return this.convertArray(e.arrayValue,t);case 10:return this.convertObject(e.mapValue,t);default:throw h()}}convertObject(e,t){return this.convertObjectMap(e.fields,t)}convertObjectMap(e,t="none"){const n={};return Y(e,((e,r)=>{n[e]=this.convertValue(r,t)})),n}convertGeoPoint(e){return new ct(te(e.latitude),te(e.longitude))}convertArray(e,t){return(e.values||[]).map((e=>this.convertValue(e,t)))}convertServerTimestamp(e,t){switch(t){case"previous":const n=ae(e);return null==n?null:this.convertValue(n,t);case"estimate":return this.convertTimestamp(ie(e));default:return null}}convertTimestamp(e){const t=ee(e);return new re(t.seconds,t.nanos)}convertDocumentKey(e,t){const n=I.fromString(e);m(Xe(n));const r=new A(n.get(1),n.get(3)),o=new L(n.popFirst(5));return r.isEqual(t)||d(`Document ${o} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${t.projectId}/${t.database}) instead.`),o}}{constructor(e){super(),this.firestore=e}convertBytes(e){return new st(e)}convertReference(e){const t=this.convertDocumentKey(e,this.firestore._databaseId);return new ot(this.firestore,null,t)}}function vt(e){!function(e){if("L"===e.limitType&&0===e.explicitOrderBy.length)throw new x(S,"limitToLast() queries require specifying at least one orderBy() clause")}((e=M(e,at))._query);const t=et(e.firestore),n=new gt(e.firestore);return async function(e,t){const n=g(e),r=We(n.serializer,function(e){const t=g(e);if(!t.O)if("F"===t.limitType)t.O=Fe(t.path,t.collectionGroup,Be(t),t.filters,t.limit,t.startAt,t.endAt);else{const e=[];for(const n of Be(t)){const t="desc"===n.dir?"asc":"desc";e.push(new Oe(n.field,t))}const n=t.endAt?new ye(t.endAt.position,t.endAt.inclusive):null,r=t.startAt?new ye(t.startAt.position,t.startAt.inclusive):null;t.O=Fe(t.path,t.collectionGroup,e,t.filters,t.limit,n,r)}return t.O}(t));return(await n.R("RunQuery",r.parent,{structuredQuery:r.structuredQuery})).filter((e=>!!e.document)).map((e=>function(e,t,n){const r=function(e,t){const n=function(e){const t=I.fromString(e);return m(Xe(t)),t}(t);if(n.get(1)!==e.databaseId.projectId)throw new x(y,"Tried to deserialize key from different project: "+n.get(1)+" vs "+e.databaseId.projectId);if(n.get(3)!==e.databaseId.database)throw new x(y,"Tried to deserialize key from different database: "+n.get(3)+" vs "+e.databaseId.database);return new L((m((r=n).length>4&&"documents"===r.get(4)),r.popFirst(5)));var r}(e,t.name),o=He(t.updateTime),a=t.createTime?He(t.createTime):Re.min(),i=new De({mapValue:{fields:t.fields}});return Ie.newFoundDocument(r,o,a,i)}(n.serializer,e.document)))}(t,e._query).then((t=>{const r=t.map((t=>new ht(e.firestore,n,t.key,t,e.converter)));return"L"===e._query.limitType&&r.reverse(),new mt(e,r)}))}var yt;yt=`${r.Jn}_lite`,s=yt,(0,r.Xd)(new o.wA("firestore/lite",((e,{instanceIdentifier:t,options:n})=>{const r=e.getProvider("app").getImmediate(),o=new nt(new _(e.getProvider("auth-internal")),new O(e.getProvider("app-check-internal")),function(e,t){if(!Object.prototype.hasOwnProperty.apply(e.options,["projectId"]))throw new x(y,'"projectId" not provided in firebase.initializeApp.');return new A(e.options.projectId,t)}(r,t),r);return n&&o._setSettings(n),o}),"PUBLIC").setMultipleInstances(!0)),(0,r.KN)("firestore-lite","3.13.0",""),(0,r.KN)("firestore-lite","3.13.0","esm2017")}},l={};function s(e){var t=l[e];if(void 0!==t)return t.exports;var n=l[e]={exports:{}};return i[e](n,n.exports,s),n.exports}e="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",t="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",n="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",r=e=>{e&&!e.d&&(e.d=1,e.forEach((e=>e.r--)),e.forEach((e=>e.r--?e.r++:e())))},s.a=(o,a,i)=>{var l;i&&((l=[]).d=1);var s,u,c,d=new Set,f=o.exports,p=new Promise(((e,t)=>{c=t,u=e}));p[t]=f,p[e]=e=>(l&&e(l),d.forEach(e),p.catch((e=>{}))),o.exports=p,a((o=>{var a;s=(o=>o.map((o=>{if(null!==o&&"object"==typeof o){if(o[e])return o;if(o.then){var a=[];a.d=0,o.then((e=>{i[t]=e,r(a)}),(e=>{i[n]=e,r(a)}));var i={};return i[e]=e=>e(a),i}}var l={};return l[e]=e=>{},l[t]=o,l})))(o);var i=()=>s.map((e=>{if(e[n])throw e[n];return e[t]})),u=new Promise((t=>{(a=()=>t(i)).r=0;var n=e=>e!==l&&!d.has(e)&&(d.add(e),e&&!e.d&&(a.r++,e.push(a)));s.map((t=>t[e](n)))}));return a.r?u:i()}),(e=>(e?c(p[n]=e):u(f),r(l)))),l&&(l.d=0)},a=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,s.t=function(e,t){if(1&t&&(e=this(e)),8&t)return e;if("object"==typeof e&&e){if(4&t&&e.__esModule)return e;if(16&t&&"function"==typeof e.then)return e}var n=Object.create(null);s.r(n);var r={};o=o||[null,a({}),a([]),a(a)];for(var i=2&t&&e;"object"==typeof i&&!~o.indexOf(i);i=a(i))Object.getOwnPropertyNames(i).forEach((t=>r[t]=()=>e[t]));return r.default=()=>e,s.d(n,r),n},s.d=(e,t)=>{for(var n in t)s.o(t,n)&&!s.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),s.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.p="/",s(579)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,